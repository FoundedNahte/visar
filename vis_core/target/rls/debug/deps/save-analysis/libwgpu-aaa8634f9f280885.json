{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1","program":"C:\\Users\\Ethan\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","wgpu","--edition=2018","C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=aaa8634f9f280885","-C","extra-filename=-aaa8634f9f280885","--out-dir","c:\\Users\\Ethan\\Desktop\\repo\\sorting_visualizer\\vis_core\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Ethan\\Desktop\\repo\\sorting_visualizer\\vis_core\\target\\rls\\debug\\deps","--extern","arrayvec=c:\\Users\\Ethan\\Desktop\\repo\\sorting_visualizer\\vis_core\\target\\rls\\debug\\deps\\libarrayvec-c50ca68c0af4276f.rmeta","--extern","log=c:\\Users\\Ethan\\Desktop\\repo\\sorting_visualizer\\vis_core\\target\\rls\\debug\\deps\\liblog-069b0722d85b0d36.rmeta","--extern","parking_lot=c:\\Users\\Ethan\\Desktop\\repo\\sorting_visualizer\\vis_core\\target\\rls\\debug\\deps\\libparking_lot-1a6a62baea37b675.rmeta","--extern","raw_window_handle=c:\\Users\\Ethan\\Desktop\\repo\\sorting_visualizer\\vis_core\\target\\rls\\debug\\deps\\libraw_window_handle-131c5dd1505eabd3.rmeta","--extern","smallvec=c:\\Users\\Ethan\\Desktop\\repo\\sorting_visualizer\\vis_core\\target\\rls\\debug\\deps\\libsmallvec-ce150e0b00f58441.rmeta","--extern","wgc=c:\\Users\\Ethan\\Desktop\\repo\\sorting_visualizer\\vis_core\\target\\rls\\debug\\deps\\libwgpu_core-1c48fc1175fc02f9.rmeta","--extern","hal=c:\\Users\\Ethan\\Desktop\\repo\\sorting_visualizer\\vis_core\\target\\rls\\debug\\deps\\libwgpu_hal-e78edda4ec699c40.rmeta","--extern","wgt=c:\\Users\\Ethan\\Desktop\\repo\\sorting_visualizer\\vis_core\\target\\rls\\debug\\deps\\libwgpu_types-3c2b3c7de18d4392.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Ethan\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Ethan\\Desktop\\repo\\sorting_visualizer\\vis_core\\target\\rls\\debug\\deps\\libwgpu-aaa8634f9f280885.rmeta"},"prelude":{"crate_id":{"name":"wgpu","disambiguator":[13544064580596138791,0]},"crate_root":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src","external_crates":[{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[4355726627561370771,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[267229713070244971,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3683013900974168134,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15143829146767998538,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[10594799546926461173,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[5830232627024197309,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3472286635410469373,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1387985299865621046,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[10967310900533047156,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16235493736143484136,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17010194385668190056,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[14878302039127249509,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[1028073505301703285,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":14,"id":{"name":"arrayvec","disambiguator":[10366315418655362567,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":15,"id":{"name":"parking_lot","disambiguator":[5199487385521284020,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":16,"id":{"name":"instant","disambiguator":[17297191021591612711,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":17,"id":{"name":"cfg_if","disambiguator":[3991922908739949058,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":18,"id":{"name":"lock_api","disambiguator":[8445319423513083380,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":19,"id":{"name":"scopeguard","disambiguator":[17428104027214378579,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":20,"id":{"name":"parking_lot_core","disambiguator":[8937000561533757569,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":21,"id":{"name":"smallvec","disambiguator":[8974166085561947634,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":22,"id":{"name":"winapi","disambiguator":[3170263987741117969,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":23,"id":{"name":"wgpu_core","disambiguator":[1021477373259183063,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":24,"id":{"name":"thiserror","disambiguator":[5863147044255054346,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":25,"id":{"name":"thiserror_impl","disambiguator":[12693347285000013365,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":26,"id":{"name":"wgpu_hal","disambiguator":[14350728955541675961,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","num":27,"id":{"name":"wgpu_types","disambiguator":[2444313241542226875,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":28,"id":{"name":"bitflags","disambiguator":[5917516365941265445,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":29,"id":{"name":"bit_set","disambiguator":[2555677219658810880,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":30,"id":{"name":"bit_vec","disambiguator":[3018013893558467829,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":31,"id":{"name":"range_alloc","disambiguator":[756134972267892521,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":32,"id":{"name":"naga","disambiguator":[12085204807965857015,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":33,"id":{"name":"indexmap","disambiguator":[10604732814453076193,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":34,"id":{"name":"hashbrown","disambiguator":[5461629460425849450,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":35,"id":{"name":"ahash","disambiguator":[10817290254778178182,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":36,"id":{"name":"once_cell","disambiguator":[10221698252932934158,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":37,"id":{"name":"getrandom","disambiguator":[17308934061476616526,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":38,"id":{"name":"spirv","disambiguator":[15159110875103168103,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":39,"id":{"name":"num_traits","disambiguator":[9038457068698427232,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":40,"id":{"name":"hexf_parse","disambiguator":[17455348090266259981,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":41,"id":{"name":"codespan_reporting","disambiguator":[5383838135557850406,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":42,"id":{"name":"termcolor","disambiguator":[13152367609431708025,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":43,"id":{"name":"winapi_util","disambiguator":[13017759796326993967,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":44,"id":{"name":"unicode_width","disambiguator":[1408648533131569240,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":45,"id":{"name":"log","disambiguator":[458480816434803666,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":46,"id":{"name":"fxhash","disambiguator":[4423399910093231080,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":47,"id":{"name":"byteorder","disambiguator":[377215142259247241,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":48,"id":{"name":"ash","disambiguator":[8803379178664088955,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":49,"id":{"name":"libloading","disambiguator":[5106893216605038724,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":50,"id":{"name":"inplace_it","disambiguator":[1454422394188629565,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":51,"id":{"name":"gpu_alloc","disambiguator":[17427170259377314812,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":52,"id":{"name":"gpu_alloc_types","disambiguator":[14314395864268881592,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":53,"id":{"name":"raw_window_handle","disambiguator":[13514088941808815542,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":54,"id":{"name":"libc","disambiguator":[9603115017356426880,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":55,"id":{"name":"raw_window_handle","disambiguator":[16016939460934389210,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":56,"id":{"name":"cty","disambiguator":[17892821322945071816,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":57,"id":{"name":"profiling","disambiguator":[6385931350413348998,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":58,"id":{"name":"d3d12","disambiguator":[2265310924095857890,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":59,"id":{"name":"gpu_descriptor","disambiguator":[7725540707194279253,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":60,"id":{"name":"gpu_descriptor_types","disambiguator":[8593198528321389458,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":61,"id":{"name":"renderdoc_sys","disambiguator":[699600436505298064,0]}},{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","num":62,"id":{"name":"copyless","disambiguator":[2564550771911130800,0]}}],"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":0,"byte_end":116104,"line_start":1,"line_end":3271,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":193744,"byte_end":193755,"line_start":15,"line_end":15,"column_start":15,"column_end":26},"alias_span":null,"name":"StagingBelt","value":"","parent":{"krate":0,"index":455}},{"kind":"Use","ref_id":{"krate":0,"index":1489},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":193774,"byte_end":193794,"line_start":16,"line_end":16,"column_start":18,"column_end":38},"alias_span":null,"name":"BufferInitDescriptor","value":"","parent":{"krate":0,"index":455}},{"kind":"Use","ref_id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":193796,"byte_end":193805,"line_start":16,"line_end":16,"column_start":40,"column_end":49},"alias_span":null,"name":"DeviceExt","value":"","parent":{"krate":0,"index":455}},{"kind":"Use","ref_id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":193825,"byte_end":193838,"line_start":17,"line_end":17,"column_start":18,"column_end":31},"alias_span":null,"name":"RenderEncoder","value":"","parent":{"krate":0,"index":455}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":193854,"byte_end":193855,"line_start":18,"line_end":18,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":455}},{"kind":"Use","ref_id":{"krate":27,"index":881},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":584,"byte_end":595,"line_start":28,"line_end":28,"column_start":5,"column_end":16},"alias_span":null,"name":"AdapterInfo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2555},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":597,"byte_end":608,"line_start":28,"line_end":28,"column_start":18,"column_end":29},"alias_span":null,"name":"AddressMode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":182},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":610,"byte_end":617,"line_start":28,"line_end":28,"column_start":31,"column_end":38},"alias_span":null,"name":"Backend","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":239},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":619,"byte_end":627,"line_start":28,"line_end":28,"column_start":40,"column_end":48},"alias_span":null,"name":"Backends","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2797},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":629,"byte_end":649,"line_start":28,"line_end":28,"column_start":50,"column_end":70},"alias_span":null,"name":"BindGroupLayoutEntry","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2766},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":651,"byte_end":662,"line_start":28,"line_end":28,"column_start":72,"column_end":83},"alias_span":null,"name":"BindingType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1127},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":664,"byte_end":678,"line_start":28,"line_end":28,"column_start":85,"column_end":99},"alias_span":null,"name":"BlendComponent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1043},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":684,"byte_end":695,"line_start":29,"line_end":29,"column_start":5,"column_end":16},"alias_span":null,"name":"BlendFactor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1097},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":697,"byte_end":711,"line_start":29,"line_end":29,"column_start":18,"column_end":32},"alias_span":null,"name":"BlendOperation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1146},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":713,"byte_end":723,"line_start":29,"line_end":29,"column_start":34,"column_end":44},"alias_span":null,"name":"BlendState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":10},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":725,"byte_end":738,"line_start":29,"line_end":29,"column_start":46,"column_end":59},"alias_span":null,"name":"BufferAddress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2701},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":740,"byte_end":757,"line_start":29,"line_end":29,"column_start":61,"column_end":78},"alias_span":null,"name":"BufferBindingType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":11},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":759,"byte_end":769,"line_start":29,"line_end":29,"column_start":80,"column_end":90},"alias_span":null,"name":"BufferSize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2087},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":775,"byte_end":787,"line_start":30,"line_end":30,"column_start":5,"column_end":17},"alias_span":null,"name":"BufferUsages","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2429},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":789,"byte_end":794,"line_start":30,"line_end":30,"column_start":19,"column_end":24},"alias_span":null,"name":"Color","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1164},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":796,"byte_end":812,"line_start":30,"line_end":30,"column_start":26,"column_end":42},"alias_span":null,"name":"ColorTargetState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1649},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":814,"byte_end":825,"line_start":30,"line_end":30,"column_start":44,"column_end":55},"alias_span":null,"name":"ColorWrites","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2620},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":827,"byte_end":850,"line_start":30,"line_end":30,"column_start":57,"column_end":80},"alias_span":null,"name":"CommandBufferDescriptor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1891},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":852,"byte_end":867,"line_start":30,"line_end":30,"column_start":82,"column_end":97},"alias_span":null,"name":"CompareFunction","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1782},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":873,"byte_end":887,"line_start":31,"line_end":31,"column_start":5,"column_end":19},"alias_span":null,"name":"DepthBiasState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1797},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":889,"byte_end":906,"line_start":31,"line_end":31,"column_start":21,"column_end":38},"alias_span":null,"name":"DepthStencilState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":862},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":908,"byte_end":918,"line_start":31,"line_end":31,"column_start":40,"column_end":50},"alias_span":null,"name":"DeviceType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":668},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":920,"byte_end":941,"line_start":31,"line_end":31,"column_start":52,"column_end":73},"alias_span":null,"name":"DownlevelCapabilities","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":690},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":943,"byte_end":957,"line_start":31,"line_end":31,"column_start":75,"column_end":89},"alias_span":null,"name":"DownlevelFlags","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":13},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":963,"byte_end":976,"line_start":32,"line_end":32,"column_start":5,"column_end":18},"alias_span":null,"name":"DynamicOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2485},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":978,"byte_end":986,"line_start":32,"line_end":32,"column_start":20,"column_end":28},"alias_span":null,"name":"Extent3d","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1233},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":988,"byte_end":992,"line_start":32,"line_end":32,"column_start":30,"column_end":34},"alias_span":null,"name":"Face","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":389},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":994,"byte_end":1002,"line_start":32,"line_end":32,"column_start":36,"column_end":44},"alias_span":null,"name":"Features","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2582},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1004,"byte_end":1014,"line_start":32,"line_end":32,"column_start":46,"column_end":56},"alias_span":null,"name":"FilterMode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1212},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1016,"byte_end":1025,"line_start":32,"line_end":32,"column_start":58,"column_end":67},"alias_span":null,"name":"FrontFace","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2690},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1027,"byte_end":1042,"line_start":32,"line_end":32,"column_start":69,"column_end":84},"alias_span":null,"name":"ImageDataLayout","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2839},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1048,"byte_end":1069,"line_start":33,"line_end":33,"column_start":5,"column_end":26},"alias_span":null,"name":"ImageSubresourceRange","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1811},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1071,"byte_end":1082,"line_start":33,"line_end":33,"column_start":28,"column_end":39},"alias_span":null,"name":"IndexFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":611},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1084,"byte_end":1090,"line_start":33,"line_end":33,"column_start":41,"column_end":47},"alias_span":null,"name":"Limits","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1303},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1092,"byte_end":1108,"line_start":33,"line_end":33,"column_start":49,"column_end":65},"alias_span":null,"name":"MultisampleState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2466},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1110,"byte_end":1118,"line_start":33,"line_end":33,"column_start":67,"column_end":75},"alias_span":null,"name":"Origin3d","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2900},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1124,"byte_end":1147,"line_start":34,"line_end":34,"column_start":5,"column_end":28},"alias_span":null,"name":"PipelineStatisticsTypes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1254},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1149,"byte_end":1160,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"alias_span":null,"name":"PolygonMode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":218},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1162,"byte_end":1177,"line_start":34,"line_end":34,"column_start":43,"column_end":58},"alias_span":null,"name":"PowerPreference","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2265},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1179,"byte_end":1190,"line_start":34,"line_end":34,"column_start":60,"column_end":71},"alias_span":null,"name":"PresentMode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1278},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1192,"byte_end":1206,"line_start":34,"line_end":34,"column_start":73,"column_end":87},"alias_span":null,"name":"PrimitiveState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1182},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1212,"byte_end":1229,"line_start":35,"line_end":35,"column_start":5,"column_end":22},"alias_span":null,"name":"PrimitiveTopology","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2603},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1231,"byte_end":1248,"line_start":35,"line_end":35,"column_start":24,"column_end":41},"alias_span":null,"name":"PushConstantRange","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2887},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1250,"byte_end":1259,"line_start":35,"line_end":35,"column_start":43,"column_end":52},"alias_span":null,"name":"QueryType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2647},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1261,"byte_end":1285,"line_start":35,"line_end":35,"column_start":54,"column_end":78},"alias_span":null,"name":"RenderBundleDepthStencil","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2855},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1287,"byte_end":1305,"line_start":35,"line_end":35,"column_start":80,"column_end":98},"alias_span":null,"name":"SamplerBorderColor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":12},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1311,"byte_end":1325,"line_start":36,"line_end":36,"column_start":5,"column_end":19},"alias_span":null,"name":"ShaderLocation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":837},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1327,"byte_end":1338,"line_start":36,"line_end":36,"column_start":21,"column_end":32},"alias_span":null,"name":"ShaderModel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":909},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1340,"byte_end":1352,"line_start":36,"line_end":36,"column_start":34,"column_end":46},"alias_span":null,"name":"ShaderStages","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1871},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1354,"byte_end":1370,"line_start":36,"line_end":36,"column_start":48,"column_end":64},"alias_span":null,"name":"StencilFaceState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1832},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1372,"byte_end":1388,"line_start":36,"line_end":36,"column_start":66,"column_end":82},"alias_span":null,"name":"StencilOperation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1761},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1390,"byte_end":1402,"line_start":36,"line_end":36,"column_start":84,"column_end":96},"alias_span":null,"name":"StencilState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2745},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1408,"byte_end":1428,"line_start":37,"line_end":37,"column_start":5,"column_end":25},"alias_span":null,"name":"StorageTextureAccess","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2396},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1430,"byte_end":1450,"line_start":37,"line_end":37,"column_start":27,"column_end":47},"alias_span":null,"name":"SurfaceConfiguration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2416},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1452,"byte_end":1465,"line_start":37,"line_end":37,"column_start":49,"column_end":62},"alias_span":null,"name":"SurfaceStatus","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2534},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1467,"byte_end":1480,"line_start":37,"line_end":37,"column_start":64,"column_end":77},"alias_span":null,"name":"TextureAspect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2445},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1482,"byte_end":1498,"line_start":37,"line_end":37,"column_start":79,"column_end":95},"alias_span":null,"name":"TextureDimension","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1456},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1504,"byte_end":1517,"line_start":38,"line_end":38,"column_start":5,"column_end":18},"alias_span":null,"name":"TextureFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1322},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1519,"byte_end":1544,"line_start":38,"line_end":38,"column_start":20,"column_end":45},"alias_span":null,"name":"TextureFormatFeatureFlags","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1414},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1546,"byte_end":1567,"line_start":38,"line_end":38,"column_start":47,"column_end":68},"alias_span":null,"name":"TextureFormatFeatures","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2721},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1569,"byte_end":1586,"line_start":38,"line_end":38,"column_start":70,"column_end":87},"alias_span":null,"name":"TextureSampleType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2289},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1592,"byte_end":1605,"line_start":39,"line_end":39,"column_start":5,"column_end":18},"alias_span":null,"name":"TextureUsages","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1016},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1607,"byte_end":1627,"line_start":39,"line_end":39,"column_start":20,"column_end":40},"alias_span":null,"name":"TextureViewDimension","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1951},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1629,"byte_end":1644,"line_start":39,"line_end":39,"column_start":42,"column_end":57},"alias_span":null,"name":"VertexAttribute","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1970},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1646,"byte_end":1658,"line_start":39,"line_end":39,"column_start":59,"column_end":71},"alias_span":null,"name":"VertexFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1930},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1660,"byte_end":1674,"line_start":39,"line_end":39,"column_start":73,"column_end":87},"alias_span":null,"name":"VertexStepMode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":16},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1680,"byte_end":1701,"line_start":40,"line_end":40,"column_start":5,"column_end":26},"alias_span":null,"name":"COPY_BUFFER_ALIGNMENT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":14},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1703,"byte_end":1731,"line_start":40,"line_end":40,"column_start":28,"column_end":56},"alias_span":null,"name":"COPY_BYTES_PER_ROW_ALIGNMENT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":17},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1733,"byte_end":1746,"line_start":40,"line_end":40,"column_start":58,"column_end":71},"alias_span":null,"name":"MAP_ALIGNMENT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":19},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1748,"byte_end":1771,"line_start":40,"line_end":40,"column_start":73,"column_end":96},"alias_span":null,"name":"PUSH_CONSTANT_ALIGNMENT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":15},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1777,"byte_end":1807,"line_start":41,"line_end":41,"column_start":5,"column_end":35},"alias_span":null,"name":"QUERY_RESOLVE_BUFFER_ALIGNMENT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":20},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1809,"byte_end":1830,"line_start":41,"line_end":41,"column_start":37,"column_end":58},"alias_span":null,"name":"QUERY_SET_MAX_QUERIES","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":21},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1832,"byte_end":1842,"line_start":41,"line_end":41,"column_start":60,"column_end":70},"alias_span":null,"name":"QUERY_SIZE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":18},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":1844,"byte_end":1867,"line_start":41,"line_end":41,"column_start":72,"column_end":95},"alias_span":null,"name":"VERTEX_STRIDE_ALIGNMENT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":361},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35714,"byte_end":35735,"line_start":1086,"line_end":1086,"column_start":14,"column_end":35},"alias_span":null,"name":"RequestAdapterOptionsBase","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2817},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45484,"byte_end":45499,"line_start":1304,"line_end":1304,"column_start":14,"column_end":29},"alias_span":null,"name":"ImageCopyBufferBase","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2827},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45668,"byte_end":45684,"line_start":1308,"line_end":1308,"column_start":14,"column_end":30},"alias_span":null,"name":"ImageCopyTextureBase","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":0,"byte_end":116104,"line_start":1,"line_end":3271,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":455},{"krate":0,"index":681},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":689},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":699},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":709},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":725},{"krate":0,"index":728},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":735},{"krate":0,"index":738},{"krate":0,"index":741},{"krate":0,"index":744},{"krate":0,"index":747},{"krate":0,"index":750},{"krate":0,"index":753},{"krate":0,"index":756},{"krate":0,"index":759},{"krate":0,"index":762},{"krate":0,"index":765},{"krate":0,"index":768},{"krate":0,"index":771},{"krate":0,"index":774},{"krate":0,"index":777},{"krate":0,"index":780},{"krate":0,"index":783},{"krate":0,"index":786},{"krate":0,"index":789},{"krate":0,"index":792},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":813},{"krate":0,"index":816},{"krate":0,"index":819},{"krate":0,"index":822},{"krate":0,"index":825},{"krate":0,"index":828},{"krate":0,"index":831},{"krate":0,"index":834},{"krate":0,"index":837},{"krate":0,"index":840},{"krate":0,"index":843},{"krate":0,"index":846},{"krate":0,"index":849},{"krate":0,"index":852},{"krate":0,"index":855},{"krate":0,"index":858},{"krate":0,"index":861},{"krate":0,"index":864},{"krate":0,"index":867},{"krate":0,"index":870},{"krate":0,"index":873},{"krate":0,"index":876},{"krate":0,"index":879},{"krate":0,"index":882},{"krate":0,"index":885},{"krate":0,"index":888},{"krate":0,"index":891},{"krate":0,"index":894},{"krate":0,"index":897},{"krate":0,"index":900},{"krate":0,"index":903},{"krate":0,"index":906},{"krate":0,"index":909},{"krate":0,"index":912},{"krate":0,"index":915},{"krate":0,"index":918},{"krate":0,"index":921},{"krate":0,"index":924},{"krate":0,"index":927},{"krate":0,"index":930},{"krate":0,"index":933},{"krate":0,"index":936},{"krate":0,"index":939},{"krate":0,"index":942},{"krate":0,"index":945},{"krate":0,"index":948},{"krate":0,"index":951},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":958},{"krate":0,"index":961},{"krate":0,"index":974},{"krate":0,"index":989},{"krate":0,"index":1004},{"krate":0,"index":1515},{"krate":0,"index":1517},{"krate":0,"index":1519},{"krate":0,"index":1522},{"krate":0,"index":1118},{"krate":0,"index":1524},{"krate":0,"index":1527},{"krate":0,"index":1529},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1545},{"krate":0,"index":1549},{"krate":0,"index":1120},{"krate":0,"index":1551},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1563},{"krate":0,"index":1565},{"krate":0,"index":1568},{"krate":0,"index":1571},{"krate":0,"index":1575},{"krate":0,"index":1577},{"krate":0,"index":1580},{"krate":0,"index":1582},{"krate":0,"index":1585},{"krate":0,"index":1126},{"krate":0,"index":1587},{"krate":0,"index":1590},{"krate":0,"index":1128},{"krate":0,"index":1592},{"krate":0,"index":1595},{"krate":0,"index":1130},{"krate":0,"index":1597},{"krate":0,"index":1600},{"krate":0,"index":1132},{"krate":0,"index":1602},{"krate":0,"index":1605},{"krate":0,"index":1134},{"krate":0,"index":1136},{"krate":0,"index":1141},{"krate":0,"index":1145},{"krate":0,"index":1607},{"krate":0,"index":1610},{"krate":0,"index":1149},{"krate":0,"index":1612},{"krate":0,"index":1615},{"krate":0,"index":1151},{"krate":0,"index":1153},{"krate":0,"index":1617},{"krate":0,"index":1620},{"krate":0,"index":1155},{"krate":0,"index":1157},{"krate":0,"index":1622},{"krate":0,"index":1625},{"krate":0,"index":1159},{"krate":0,"index":1627},{"krate":0,"index":1630},{"krate":0,"index":1161},{"krate":0,"index":1632},{"krate":0,"index":1636},{"krate":0,"index":1639},{"krate":0,"index":1643},{"krate":0,"index":1646},{"krate":0,"index":1652},{"krate":0,"index":1655},{"krate":0,"index":1658},{"krate":0,"index":1163},{"krate":0,"index":1165},{"krate":0,"index":1168},{"krate":0,"index":1660},{"krate":0,"index":1663},{"krate":0,"index":1665},{"krate":0,"index":1682},{"krate":0,"index":1685},{"krate":0,"index":1688},{"krate":0,"index":1693},{"krate":0,"index":1696},{"krate":0,"index":1699},{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1711},{"krate":0,"index":1714},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1723},{"krate":0,"index":1725},{"krate":0,"index":1170},{"krate":0,"index":1729},{"krate":0,"index":1733},{"krate":0,"index":1735},{"krate":0,"index":1738},{"krate":0,"index":1741},{"krate":0,"index":1745},{"krate":0,"index":1747},{"krate":0,"index":1750},{"krate":0,"index":1752},{"krate":0,"index":1173},{"krate":0,"index":1756},{"krate":0,"index":1761},{"krate":0,"index":1764},{"krate":0,"index":1767},{"krate":0,"index":1772},{"krate":0,"index":1775},{"krate":0,"index":1176},{"krate":0,"index":1178},{"krate":0,"index":1181},{"krate":0,"index":1183},{"krate":0,"index":1185},{"krate":0,"index":1187},{"krate":0,"index":1189},{"krate":0,"index":1191},{"krate":0,"index":1193},{"krate":0,"index":1778},{"krate":0,"index":1788},{"krate":0,"index":1791},{"krate":0,"index":1794},{"krate":0,"index":1797},{"krate":0,"index":1799},{"krate":0,"index":1803},{"krate":0,"index":1808},{"krate":0,"index":1811},{"krate":0,"index":1814},{"krate":0,"index":1817},{"krate":0,"index":1831},{"krate":0,"index":1834},{"krate":0,"index":1837},{"krate":0,"index":1839},{"krate":0,"index":1195},{"krate":0,"index":1843},{"krate":0,"index":1847},{"krate":0,"index":1850},{"krate":0,"index":1853},{"krate":0,"index":1858},{"krate":0,"index":1861},{"krate":0,"index":1864},{"krate":0,"index":1870},{"krate":0,"index":1874},{"krate":0,"index":1878},{"krate":0,"index":1882},{"krate":0,"index":1887},{"krate":0,"index":1890},{"krate":0,"index":1893},{"krate":0,"index":1897},{"krate":0,"index":1899},{"krate":0,"index":1902},{"krate":0,"index":1904},{"krate":0,"index":1908},{"krate":0,"index":1913},{"krate":0,"index":1916},{"krate":0,"index":1919},{"krate":0,"index":1924},{"krate":0,"index":1927},{"krate":0,"index":1930},{"krate":0,"index":1939},{"krate":0,"index":1942},{"krate":0,"index":1945},{"krate":0,"index":1948},{"krate":0,"index":1951},{"krate":0,"index":1954},{"krate":0,"index":1957},{"krate":0,"index":1963},{"krate":0,"index":1966},{"krate":0,"index":1197},{"krate":0,"index":1200},{"krate":0,"index":1202},{"krate":0,"index":1205},{"krate":0,"index":1969},{"krate":0,"index":1973},{"krate":0,"index":1976},{"krate":0,"index":1979},{"krate":0,"index":1985},{"krate":0,"index":1988},{"krate":0,"index":1991},{"krate":0,"index":1994},{"krate":0,"index":1996},{"krate":0,"index":2000},{"krate":0,"index":2002},{"krate":0,"index":2005},{"krate":0,"index":2009},{"krate":0,"index":2014},{"krate":0,"index":2016},{"krate":0,"index":2025},{"krate":0,"index":2027},{"krate":0,"index":2028},{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2033},{"krate":0,"index":1207},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1227},{"krate":0,"index":1241},{"krate":0,"index":1265},{"krate":0,"index":2035},{"krate":0,"index":2037},{"krate":0,"index":2039},{"krate":0,"index":2040},{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2045},{"krate":0,"index":1267},{"krate":0,"index":1269},{"krate":0,"index":2047},{"krate":0,"index":2049},{"krate":0,"index":2051},{"krate":0,"index":2052},{"krate":0,"index":2054},{"krate":0,"index":2055},{"krate":0,"index":2057},{"krate":0,"index":1270},{"krate":0,"index":1272},{"krate":0,"index":2059},{"krate":0,"index":2064},{"krate":0,"index":2066},{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":1273},{"krate":0,"index":1276},{"krate":0,"index":2072},{"krate":0,"index":2076},{"krate":0,"index":2079},{"krate":0,"index":2084},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1285},{"krate":0,"index":1287},{"krate":0,"index":1289},{"krate":0,"index":1291},{"krate":0,"index":1293},{"krate":0,"index":1295},{"krate":0,"index":1302},{"krate":0,"index":1308},{"krate":0,"index":1310},{"krate":0,"index":1317},{"krate":0,"index":1319},{"krate":0,"index":1321},{"krate":0,"index":1335},{"krate":0,"index":1337},{"krate":0,"index":1339},{"krate":0,"index":1359},{"krate":0,"index":1363},{"krate":0,"index":1367},{"krate":0,"index":1370},{"krate":0,"index":1373},{"krate":0,"index":1377},{"krate":0,"index":1380},{"krate":0,"index":1389},{"krate":0,"index":1392},{"krate":0,"index":1395},{"krate":0,"index":1399},{"krate":0,"index":1402},{"krate":0,"index":1413},{"krate":0,"index":1416},{"krate":0,"index":1425},{"krate":0,"index":1427},{"krate":0,"index":1429},{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":2087},{"krate":0,"index":2093},{"krate":0,"index":1437},{"krate":0,"index":1439}],"decl_id":null,"docs":" A cross-platform graphics and compute library based on [WebGPU](https://gpuweb.github.io/gpuweb/).","sig":null,"attributes":[{"value":"/ A cross-platform graphics and compute library based on [WebGPU](https://gpuweb.github.io/gpuweb/).","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":0,"byte_end":102,"line_start":1,"line_end":1,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":103,"byte_end":106,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ To start using the API, create an [`Instance`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107,"byte_end":158,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":249,"byte_end":271,"line_start":6,"line_end":6,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":455},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"util","qualname":"::util","value":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":531},{"krate":0,"index":541},{"krate":0,"index":607},{"krate":0,"index":637},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":648},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":674},{"krate":0,"index":678}],"decl_id":null,"docs":" Utility structures and functions.\n","sig":null,"attributes":[{"value":"/ Utility structures and functions.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":193528,"byte_end":193565,"line_start":1,"line_end":1,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":198939,"byte_end":198950,"line_start":58,"line_end":58,"column_start":12,"column_end":23},"name":"StagingBelt","qualname":"::util::belt::StagingBelt","value":"StagingBelt {  }","parent":null,"children":[{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520}],"decl_id":null,"docs":" Staging belt is a machine that uploads data.","sig":null,"attributes":[{"value":"/ Staging belt is a machine that uploads data.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":198399,"byte_end":198447,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":198448,"byte_end":198451,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Internally it uses a ring-buffer of staging buffers that are sub-allocated.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":198452,"byte_end":198531,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/ It has an advantage over `Queue.write_buffer` in a way that it returns a mutable slice,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":198532,"byte_end":198623,"line_start":50,"line_end":50,"column_start":1,"column_end":92}},{"value":"/ which you can fill to avoid an extra data copy.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":198624,"byte_end":198675,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":198676,"byte_end":198679,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Using a staging belt is slightly complicated, and generally goes as follows:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":198680,"byte_end":198760,"line_start":53,"line_end":53,"column_start":1,"column_end":81}},{"value":"/ - Write to buffers that need writing to using `write_buffer`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":198761,"byte_end":198826,"line_start":54,"line_end":54,"column_start":1,"column_end":66}},{"value":"/ - Call `finish`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":198827,"byte_end":198847,"line_start":55,"line_end":55,"column_start":1,"column_end":21}},{"value":"/ - Submit all command encoders used with `write_buffer`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":198848,"byte_end":198907,"line_start":56,"line_end":56,"column_start":1,"column_end":60}},{"value":"/ - Call `recall`","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":198908,"byte_end":198927,"line_start":57,"line_end":57,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":199618,"byte_end":199621,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<StagingBelt>::new","value":"pub fn new(BufferAddress) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new staging belt.","sig":null,"attributes":[{"value":"/ Create a new staging belt.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":199369,"byte_end":199399,"line_start":71,"line_end":71,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":199404,"byte_end":199407,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ The `chunk_size` is the unit of internal buffer allocation.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":199412,"byte_end":199475,"line_start":73,"line_end":73,"column_start":5,"column_end":68}},{"value":"/ It's better when it's big, but ideally still 1-4 times less than","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":199480,"byte_end":199548,"line_start":74,"line_end":74,"column_start":5,"column_end":73}},{"value":"/ the total amount of data uploaded per submission.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":199553,"byte_end":199606,"line_start":75,"line_end":75,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":200235,"byte_end":200247,"line_start":93,"line_end":93,"column_start":12,"column_end":24},"name":"write_buffer","qualname":"<StagingBelt>::write_buffer","value":"pub fn write_buffer(&mut Self, &mut CommandEncoder, &Buffer, BufferAddress,\n                    BufferSize, &Device) -> BufferViewMut","parent":null,"children":[],"decl_id":null,"docs":" Allocate the staging belt slice of `size` to be uploaded into the `target` buffer\n at the specified offset.","sig":null,"attributes":[{"value":"/ Allocate the staging belt slice of `size` to be uploaded into the `target` buffer","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":199933,"byte_end":200018,"line_start":88,"line_end":88,"column_start":5,"column_end":90}},{"value":"/ at the specified offset.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":200023,"byte_end":200051,"line_start":89,"line_end":89,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":200056,"byte_end":200059,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ The upload will be placed into the provided command encoder. This encoder","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":200064,"byte_end":200141,"line_start":91,"line_end":91,"column_start":5,"column_end":82}},{"value":"/ must be submitted after `finish` is called and before `recall` is called.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":200146,"byte_end":200223,"line_start":92,"line_end":92,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":202089,"byte_end":202095,"line_start":148,"line_end":148,"column_start":12,"column_end":18},"name":"finish","qualname":"<StagingBelt>::finish","value":"pub fn finish(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Prepare currently mapped buffers for use in a submission.","sig":null,"attributes":[{"value":"/ Prepare currently mapped buffers for use in a submission.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":201877,"byte_end":201938,"line_start":144,"line_end":144,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":201943,"byte_end":201946,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ At this point, all the partially used staging buffers are closed until","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":201951,"byte_end":202025,"line_start":146,"line_end":146,"column_start":5,"column_end":79}},{"value":"/ the GPU is done copying the data from them.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":202030,"byte_end":202077,"line_start":147,"line_end":147,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":202433,"byte_end":202439,"line_start":158,"line_end":158,"column_start":12,"column_end":18},"name":"recall","qualname":"<StagingBelt>::recall","value":"pub fn recall(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Recall all of the closed buffers back to be reused.","sig":null,"attributes":[{"value":"/ Recall all of the closed buffers back to be reused.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":202260,"byte_end":202315,"line_start":155,"line_end":155,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":202320,"byte_end":202323,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ This has to be called after the command encoders written to `write_buffer` are submitted!","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":202328,"byte_end":202421,"line_start":157,"line_end":157,"column_start":5,"column_end":98}}]},{"kind":"Struct","id":{"krate":0,"index":1489},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":203412,"byte_end":203432,"line_start":5,"line_end":5,"column_start":12,"column_end":32},"name":"BufferInitDescriptor","qualname":"::util::device::BufferInitDescriptor","value":"BufferInitDescriptor { label, contents, usage }","parent":null,"children":[{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1493}],"decl_id":null,"docs":" Describes a [Buffer](crate::Buffer) when allocating.\n","sig":null,"attributes":[{"value":"/ Describes a [Buffer](crate::Buffer) when allocating.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":203299,"byte_end":203355,"line_start":3,"line_end":3,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":1491},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":203545,"byte_end":203550,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"name":"label","qualname":"::util::device::BufferInitDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1489},"children":[],"decl_id":null,"docs":" Debug label of a buffer. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of a buffer. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":203443,"byte_end":203536,"line_start":6,"line_end":6,"column_start":5,"column_end":98}}]},{"kind":"Field","id":{"krate":0,"index":1492},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":203620,"byte_end":203628,"line_start":9,"line_end":9,"column_start":9,"column_end":17},"name":"contents","qualname":"::util::device::BufferInitDescriptor::contents","value":"&'a [u8]","parent":{"krate":0,"index":1489},"children":[],"decl_id":null,"docs":" Contents of a buffer on creation.\n","sig":null,"attributes":[{"value":"/ Contents of a buffer on creation.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":203574,"byte_end":203611,"line_start":8,"line_end":8,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1493},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":203770,"byte_end":203775,"line_start":12,"line_end":12,"column_start":9,"column_end":14},"name":"usage","qualname":"::util::device::BufferInitDescriptor::usage","value":"wgpu_types::BufferUsages","parent":{"krate":0,"index":1489},"children":[],"decl_id":null,"docs":" Usages of a buffer. If the buffer is used in any way that isn't specified here, the operation\n will panic.\n","sig":null,"attributes":[{"value":"/ Usages of a buffer. If the buffer is used in any way that isn't specified here, the operation","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":203644,"byte_end":203741,"line_start":10,"line_end":10,"column_start":5,"column_end":102}},{"value":"/ will panic.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":203746,"byte_end":203761,"line_start":11,"line_end":11,"column_start":5,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":203864,"byte_end":203873,"line_start":16,"line_end":16,"column_start":11,"column_end":20},"name":"DeviceExt","qualname":"::util::device::DeviceExt","value":"DeviceExt","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537}],"decl_id":null,"docs":" Utility methods not meant to be in the main API.\n","sig":null,"attributes":[{"value":"/ Utility methods not meant to be in the main API.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":203801,"byte_end":203853,"line_start":15,"line_end":15,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":203953,"byte_end":203971,"line_start":18,"line_end":18,"column_start":8,"column_end":26},"name":"create_buffer_init","qualname":"::util::device::DeviceExt::create_buffer_init","value":"pub fn create_buffer_init(&Self, &BufferInitDescriptor) -> crate::Buffer","parent":{"krate":0,"index":535},"children":[],"decl_id":null,"docs":" Creates a [Buffer](crate::Buffer) with data to initialize it.\n","sig":null,"attributes":[{"value":"/ Creates a [Buffer](crate::Buffer) with data to initialize it.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":203880,"byte_end":203945,"line_start":17,"line_end":17,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":204596,"byte_end":204620,"line_start":32,"line_end":32,"column_start":8,"column_end":32},"name":"create_texture_with_data","qualname":"::util::device::DeviceExt::create_texture_with_data","value":"pub fn create_texture_with_data(&Self, &crate::Queue,\n                                &crate::TextureDescriptor, &[u8])\n-> crate::Texture","parent":{"krate":0,"index":535},"children":[],"decl_id":null,"docs":" Upload an entire texture and its mipmaps from a source buffer.","sig":null,"attributes":[{"value":"/ Upload an entire texture and its mipmaps from a source buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":204031,"byte_end":204097,"line_start":20,"line_end":20,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":204102,"byte_end":204105,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Expects all mipmaps to be tightly packed in the data buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":204110,"byte_end":204174,"line_start":22,"line_end":22,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":204179,"byte_end":204182,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ If the texture is a 2DArray texture, uploads each layer in order, expecting","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":204187,"byte_end":204266,"line_start":24,"line_end":24,"column_start":5,"column_end":84}},{"value":"/ each layer and its mips to be tightly packed.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":204271,"byte_end":204320,"line_start":25,"line_end":25,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":204325,"byte_end":204328,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ Example:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":204333,"byte_end":204345,"line_start":27,"line_end":27,"column_start":5,"column_end":17}},{"value":"/ Layer0Mip0 Layer0Mip1 Layer0Mip2 ... Layer1Mip0 Layer1Mip1 Layer1Mip2 ...","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":204350,"byte_end":204427,"line_start":28,"line_end":28,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":204432,"byte_end":204435,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ Implicitly adds the `COPY_DST` usage if it is not present in the descriptor,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":204440,"byte_end":204520,"line_start":30,"line_end":30,"column_start":5,"column_end":85}},{"value":"/ as it is required to be able to upload the data to the gpu.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":204525,"byte_end":204588,"line_start":31,"line_end":31,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":209423,"byte_end":209436,"line_start":8,"line_end":8,"column_start":11,"column_end":24},"name":"RenderEncoder","qualname":"::util::encoder::RenderEncoder","value":"RenderEncoder<'a>","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584}],"decl_id":null,"docs":" Methods shared by [`RenderPass`] and [`RenderBundleEncoder`].\n","sig":null,"attributes":[{"value":"/ Methods shared by [`RenderPass`] and [`RenderBundleEncoder`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":209347,"byte_end":209412,"line_start":7,"line_end":7,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":209747,"byte_end":209761,"line_start":13,"line_end":13,"column_start":8,"column_end":22},"name":"set_bind_group","qualname":"::util::encoder::RenderEncoder::set_bind_group","value":"pub fn set_bind_group(&mut Self, u32, &'a BindGroup, &[DynamicOffset])","parent":{"krate":0,"index":574},"children":[],"decl_id":null,"docs":" Sets the active bind group for a given bind group index. The bind group layout\n in the active pipeline when any `draw()` function is called must match the layout of this bind group.","sig":null,"attributes":[{"value":"/ Sets the active bind group for a given bind group index. The bind group layout","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":209447,"byte_end":209529,"line_start":9,"line_end":9,"column_start":5,"column_end":87}},{"value":"/ in the active pipeline when any `draw()` function is called must match the layout of this bind group.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":209534,"byte_end":209639,"line_start":10,"line_end":10,"column_start":5,"column_end":110}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":209644,"byte_end":209647,"line_start":11,"line_end":11,"column_start":5,"column_end":8}},{"value":"/ If the bind group have dynamic offsets, provide them in order of their declaration.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":209652,"byte_end":209739,"line_start":12,"line_end":12,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":209976,"byte_end":209988,"line_start":18,"line_end":18,"column_start":8,"column_end":20},"name":"set_pipeline","qualname":"::util::encoder::RenderEncoder::set_pipeline","value":"pub fn set_pipeline(&mut Self, &'a RenderPipeline)","parent":{"krate":0,"index":574},"children":[],"decl_id":null,"docs":" Sets the active render pipeline.","sig":null,"attributes":[{"value":"/ Sets the active render pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":209845,"byte_end":209881,"line_start":15,"line_end":15,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":209886,"byte_end":209889,"line_start":16,"line_end":16,"column_start":5,"column_end":8}},{"value":"/ Subsequent draw calls will exhibit the behavior defined by `pipeline`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":209894,"byte_end":209968,"line_start":17,"line_end":17,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210239,"byte_end":210255,"line_start":24,"line_end":24,"column_start":8,"column_end":24},"name":"set_index_buffer","qualname":"::util::encoder::RenderEncoder::set_index_buffer","value":"pub fn set_index_buffer(&mut Self, BufferSlice, IndexFormat)","parent":{"krate":0,"index":574},"children":[],"decl_id":null,"docs":" Sets the active index buffer.","sig":null,"attributes":[{"value":"/ Sets the active index buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210036,"byte_end":210069,"line_start":20,"line_end":20,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210074,"byte_end":210077,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Subsequent calls to [`draw_indexed`](RenderEncoder::draw_indexed) on this [`RenderEncoder`] will","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210082,"byte_end":210182,"line_start":22,"line_end":22,"column_start":5,"column_end":105}},{"value":"/ use `buffer` as the source index buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210187,"byte_end":210231,"line_start":23,"line_end":23,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210769,"byte_end":210786,"line_start":36,"line_end":36,"column_start":8,"column_end":25},"name":"set_vertex_buffer","qualname":"::util::encoder::RenderEncoder::set_vertex_buffer","value":"pub fn set_vertex_buffer(&mut Self, u32, BufferSlice)","parent":{"krate":0,"index":574},"children":[],"decl_id":null,"docs":" Assign a vertex buffer to a slot.","sig":null,"attributes":[{"value":"/ Assign a vertex buffer to a slot.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210331,"byte_end":210368,"line_start":26,"line_end":26,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210373,"byte_end":210376,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ Subsequent calls to [`draw`] and [`draw_indexed`] on this","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210381,"byte_end":210442,"line_start":28,"line_end":28,"column_start":5,"column_end":66}},{"value":"/ [`RenderEncoder`] will use `buffer` as one of the source vertex buffers.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210447,"byte_end":210523,"line_start":29,"line_end":29,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210528,"byte_end":210531,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ The `slot` refers to the index of the matching descriptor in","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210536,"byte_end":210600,"line_start":31,"line_end":31,"column_start":5,"column_end":69}},{"value":"/ [VertexState::buffers](crate::VertexState::buffers).","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210605,"byte_end":210661,"line_start":32,"line_end":32,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210666,"byte_end":210669,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ [`draw`]: RenderEncoder::draw","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210674,"byte_end":210707,"line_start":34,"line_end":34,"column_start":5,"column_end":38}},{"value":"/ [`draw_indexed`]: RenderEncoder::draw_indexed","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210712,"byte_end":210761,"line_start":35,"line_end":35,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211004,"byte_end":211008,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"draw","qualname":"::util::encoder::RenderEncoder::draw","value":"pub fn draw(&mut Self, Range<u32>, Range<u32>)","parent":{"krate":0,"index":574},"children":[],"decl_id":null,"docs":" Draws primitives from the active vertex buffer(s).","sig":null,"attributes":[{"value":"/ Draws primitives from the active vertex buffer(s).","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210846,"byte_end":210900,"line_start":38,"line_end":38,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210905,"byte_end":210908,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":210913,"byte_end":210996,"line_start":40,"line_end":40,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211355,"byte_end":211367,"line_start":47,"line_end":47,"column_start":8,"column_end":20},"name":"draw_indexed","qualname":"::util::encoder::RenderEncoder::draw_indexed","value":"pub fn draw_indexed(&mut Self, Range<u32>, i32, Range<u32>)","parent":{"krate":0,"index":574},"children":[],"decl_id":null,"docs":" Draws indexed primitives using the active index buffer and the active vertex buffers.","sig":null,"attributes":[{"value":"/ Draws indexed primitives using the active index buffer and the active vertex buffers.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211071,"byte_end":211160,"line_start":43,"line_end":43,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211165,"byte_end":211168,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderEncoder::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211173,"byte_end":211270,"line_start":45,"line_end":45,"column_start":5,"column_end":102}},{"value":"/ vertex buffers can be set with [`RenderEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211275,"byte_end":211347,"line_start":46,"line_end":46,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212114,"byte_end":212127,"line_start":64,"line_end":64,"column_start":8,"column_end":21},"name":"draw_indirect","qualname":"::util::encoder::RenderEncoder::draw_indirect","value":"pub fn draw_indirect(&mut Self, &'a Buffer, BufferAddress)","parent":{"krate":0,"index":574},"children":[],"decl_id":null,"docs":" Draws primitives from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","sig":null,"attributes":[{"value":"/ Draws primitives from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211447,"byte_end":211548,"line_start":49,"line_end":49,"column_start":5,"column_end":106}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211553,"byte_end":211556,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211561,"byte_end":211644,"line_start":51,"line_end":51,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211649,"byte_end":211652,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211657,"byte_end":211722,"line_start":53,"line_end":53,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211727,"byte_end":211730,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211735,"byte_end":211746,"line_start":55,"line_end":55,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211751,"byte_end":211765,"line_start":56,"line_end":56,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndirect {","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211770,"byte_end":211795,"line_start":57,"line_end":57,"column_start":5,"column_end":30}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211800,"byte_end":211861,"line_start":58,"line_end":58,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211866,"byte_end":211930,"line_start":59,"line_end":59,"column_start":5,"column_end":69}},{"value":"/     base_vertex: u32, // The Index of the first vertex to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":211935,"byte_end":212002,"line_start":60,"line_end":60,"column_start":5,"column_end":72}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212007,"byte_end":212084,"line_start":61,"line_end":61,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212089,"byte_end":212094,"line_start":62,"line_end":62,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212099,"byte_end":212106,"line_start":63,"line_end":63,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213126,"byte_end":213147,"line_start":84,"line_end":84,"column_start":8,"column_end":29},"name":"draw_indexed_indirect","qualname":"::util::encoder::RenderEncoder::draw_indexed_indirect","value":"pub fn draw_indexed_indirect(&mut Self, &'a Buffer, BufferAddress)","parent":{"krate":0,"index":574},"children":[],"decl_id":null,"docs":" Draws indexed primitives using the active index buffer and the active vertex buffers,\n based on the contents of the `indirect_buffer`.","sig":null,"attributes":[{"value":"/ Draws indexed primitives using the active index buffer and the active vertex buffers,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212206,"byte_end":212295,"line_start":66,"line_end":66,"column_start":5,"column_end":94}},{"value":"/ based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212300,"byte_end":212351,"line_start":67,"line_end":67,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212356,"byte_end":212359,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderEncoder::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212364,"byte_end":212461,"line_start":69,"line_end":69,"column_start":5,"column_end":102}},{"value":"/ vertex buffers can be set with [`RenderEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212466,"byte_end":212538,"line_start":70,"line_end":70,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212543,"byte_end":212546,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212551,"byte_end":212616,"line_start":72,"line_end":72,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212621,"byte_end":212624,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212629,"byte_end":212640,"line_start":74,"line_end":74,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212645,"byte_end":212659,"line_start":75,"line_end":75,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndexedIndirect {","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212664,"byte_end":212696,"line_start":76,"line_end":76,"column_start":5,"column_end":37}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212701,"byte_end":212762,"line_start":77,"line_end":77,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212767,"byte_end":212831,"line_start":78,"line_end":78,"column_start":5,"column_end":69}},{"value":"/     base_index: u32, // The base index within the index buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212836,"byte_end":212903,"line_start":79,"line_end":79,"column_start":5,"column_end":72}},{"value":"/     vertex_offset: i32, // The value added to the vertex index before indexing into the vertex buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":212908,"byte_end":213014,"line_start":80,"line_end":80,"column_start":5,"column_end":111}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213019,"byte_end":213096,"line_start":81,"line_end":81,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213101,"byte_end":213106,"line_start":82,"line_end":82,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213111,"byte_end":213118,"line_start":83,"line_end":83,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214580,"byte_end":214598,"line_start":120,"line_end":120,"column_start":8,"column_end":26},"name":"set_push_constants","qualname":"::util::encoder::RenderEncoder::set_push_constants","value":"pub fn set_push_constants(&mut Self, wgt::ShaderStages, u32, &[u8])","parent":{"krate":0,"index":574},"children":[],"decl_id":null,"docs":" [`wgt::Features::PUSH_CONSTANTS`] must be enabled on the device in order to call this function.","sig":null,"attributes":[{"value":"/ [`wgt::Features::PUSH_CONSTANTS`] must be enabled on the device in order to call this function.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213257,"byte_end":213356,"line_start":90,"line_end":90,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213361,"byte_end":213364,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Set push constant data.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213369,"byte_end":213396,"line_start":92,"line_end":92,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213401,"byte_end":213404,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Offset is measured in bytes, but must be a multiple of [`wgt::PUSH_CONSTANT_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213409,"byte_end":213501,"line_start":94,"line_end":94,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213506,"byte_end":213509,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ Data size must be a multiple of 4 and must be aligned to the 4s, so we take an array of u32.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213514,"byte_end":213610,"line_start":96,"line_end":96,"column_start":5,"column_end":101}},{"value":"/ For example, with an offset of 4 and an array of `[u32; 3]`, that will write to the range","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213615,"byte_end":213708,"line_start":97,"line_end":97,"column_start":5,"column_end":98}},{"value":"/ of 4..16.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213713,"byte_end":213726,"line_start":98,"line_end":98,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213731,"byte_end":213734,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ For each byte in the range of push constant data written, the union of the stages of all push constant","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213739,"byte_end":213845,"line_start":100,"line_end":100,"column_start":5,"column_end":111}},{"value":"/ ranges that covers that byte must be exactly `stages`. There's no good way of explaining this simply,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213850,"byte_end":213955,"line_start":101,"line_end":101,"column_start":5,"column_end":110}},{"value":"/ so here are some examples:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213960,"byte_end":213990,"line_start":102,"line_end":102,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":213995,"byte_end":213998,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214003,"byte_end":214014,"line_start":104,"line_end":104,"column_start":5,"column_end":16}},{"value":"/ For the given ranges:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214019,"byte_end":214044,"line_start":105,"line_end":105,"column_start":5,"column_end":30}},{"value":"/ - 0..4 Vertex","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214049,"byte_end":214066,"line_start":106,"line_end":106,"column_start":5,"column_end":22}},{"value":"/ - 4..8 Fragment","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214071,"byte_end":214090,"line_start":107,"line_end":107,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214095,"byte_end":214102,"line_start":108,"line_end":108,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214107,"byte_end":214110,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ You would need to upload this in two set_push_constants calls. First for the `Vertex` range, second for the `Fragment` range.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214115,"byte_end":214244,"line_start":110,"line_end":110,"column_start":5,"column_end":134}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214249,"byte_end":214252,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214257,"byte_end":214268,"line_start":112,"line_end":112,"column_start":5,"column_end":16}},{"value":"/ For the given ranges:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214273,"byte_end":214298,"line_start":113,"line_end":113,"column_start":5,"column_end":30}},{"value":"/ - 0..8  Vertex","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214303,"byte_end":214321,"line_start":114,"line_end":114,"column_start":5,"column_end":23}},{"value":"/ - 4..12 Fragment","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214326,"byte_end":214346,"line_start":115,"line_end":115,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214351,"byte_end":214358,"line_start":116,"line_end":116,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214363,"byte_end":214366,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ You would need to upload this in three set_push_constants calls. First for the `Vertex` only range 0..4, second","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214371,"byte_end":214486,"line_start":118,"line_end":118,"column_start":5,"column_end":120}},{"value":"/ for the `Vertex | Fragment` range 4..8, third for the `Fragment` range 8..12.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214491,"byte_end":214572,"line_start":119,"line_end":119,"column_start":5,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\init.rs","byte_start":218560,"byte_end":218581,"line_start":14,"line_end":14,"column_start":8,"column_end":29},"name":"backend_bits_from_env","qualname":"::util::init::backend_bits_from_env","value":"pub fn backend_bits_from_env() -> Option<Backends>","parent":null,"children":[],"decl_id":null,"docs":" Get a set of backend bits from the environment variable WGPU_BACKEND.\n","sig":null,"attributes":[{"value":"/ Get a set of backend bits from the environment variable WGPU_BACKEND.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\init.rs","byte_start":218479,"byte_end":218552,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\init.rs","byte_start":218854,"byte_end":218879,"line_start":24,"line_end":24,"column_start":8,"column_end":33},"name":"power_preference_from_env","qualname":"::util::init::power_preference_from_env","value":"pub fn power_preference_from_env() -> Option<PowerPreference>","parent":null,"children":[],"decl_id":null,"docs":" Get a power preference from the environment variable WGPU_POWER_PREF\n","sig":null,"attributes":[{"value":"/ Get a power preference from the environment variable WGPU_POWER_PREF","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\init.rs","byte_start":218774,"byte_end":218846,"line_start":23,"line_end":23,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\init.rs","byte_start":219346,"byte_end":219373,"line_start":40,"line_end":40,"column_start":8,"column_end":35},"name":"initialize_adapter_from_env","qualname":"::util::init::initialize_adapter_from_env","value":"pub fn initialize_adapter_from_env(&Instance, Backends) -> Option<Adapter>","parent":null,"children":[],"decl_id":null,"docs":" Initialize the adapter obeying the WGPU_ADAPTER_NAME environment variable.\n","sig":null,"attributes":[{"value":"/ Initialize the adapter obeying the WGPU_ADAPTER_NAME environment variable.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\init.rs","byte_start":219224,"byte_end":219302,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"cfg(not(target_arch = \"wasm32\"))","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\init.rs","byte_start":219303,"byte_end":219338,"line_start":39,"line_end":39,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\init.rs","byte_start":220367,"byte_end":220405,"line_start":71,"line_end":71,"column_start":14,"column_end":52},"name":"initialize_adapter_from_env_or_default","qualname":"::util::init::initialize_adapter_from_env_or_default","value":"pub async fn initialize_adapter_from_env_or_default<'_,\n                                                    '_>(&'_ Instance,\n                                                        wgt::Backends,\n                                                        Option<&'_ Surface>)\n-> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Initialize the adapter obeying the WGPU_ADAPTER_NAME environment variable and if it doesn't exist fall back on a default adapter.\n","sig":null,"attributes":[{"value":"/ Initialize the adapter obeying the WGPU_ADAPTER_NAME environment variable and if it doesn't exist fall back on a default adapter.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\init.rs","byte_start":220220,"byte_end":220353,"line_start":70,"line_end":70,"column_start":1,"column_end":134}}]},{"kind":"Function","id":{"krate":0,"index":668},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":194481,"byte_end":194495,"line_start":38,"line_end":38,"column_start":8,"column_end":22},"name":"make_spirv_raw","qualname":"::util::make_spirv_raw","value":"pub fn make_spirv_raw(&[u8]) -> Cow<, [u32]>","parent":null,"children":[],"decl_id":null,"docs":" Version of make_spirv intended for use with [`Device::create_shader_module_spirv`].\n Returns raw slice instead of ShaderSource.","sig":null,"attributes":[{"value":"/ Version of make_spirv intended for use with [`Device::create_shader_module_spirv`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":194249,"byte_end":194336,"line_start":34,"line_end":34,"column_start":1,"column_end":88}},{"value":"/ Returns raw slice instead of ShaderSource.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":194337,"byte_end":194383,"line_start":35,"line_end":35,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":194384,"byte_end":194387,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ [`Device::create_shader_module_spirv`]: crate::Device::create_shader_module_spirv","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":194388,"byte_end":194473,"line_start":37,"line_end":37,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":195551,"byte_end":195565,"line_start":71,"line_end":71,"column_start":12,"column_end":26},"name":"DownloadBuffer","qualname":"::util::DownloadBuffer","value":"","parent":null,"children":[],"decl_id":null,"docs":" CPU accessible buffer used to download data back from the GPU.\n","sig":null,"attributes":[{"value":"/ CPU accessible buffer used to download data back from the GPU.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":195473,"byte_end":195539,"line_start":70,"line_end":70,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":195696,"byte_end":195707,"line_start":75,"line_end":75,"column_start":12,"column_end":23},"name":"read_buffer","qualname":"<DownloadBuffer>::read_buffer","value":"pub fn read_buffer(&super::Device, &super::Queue, &super::BufferSlice)\n-> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Asynchronously read the contents of a buffer.\n","sig":null,"attributes":[{"value":"/ Asynchronously read the contents of a buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":195635,"byte_end":195684,"line_start":74,"line_end":74,"column_start":5,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":1005},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":5659,"byte_end":5668,"line_start":156,"line_end":156,"column_start":10,"column_end":19},"name":"AdapterId","qualname":"::Context::AdapterId","value":"type AdapterId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1006},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":5710,"byte_end":5718,"line_start":157,"line_end":157,"column_start":10,"column_end":18},"name":"DeviceId","qualname":"::Context::DeviceId","value":"type DeviceId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1007},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":5760,"byte_end":5767,"line_start":158,"line_end":158,"column_start":10,"column_end":17},"name":"QueueId","qualname":"::Context::QueueId","value":"type QueueId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1008},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":5809,"byte_end":5823,"line_start":159,"line_end":159,"column_start":10,"column_end":24},"name":"ShaderModuleId","qualname":"::Context::ShaderModuleId","value":"type ShaderModuleId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1009},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":5865,"byte_end":5882,"line_start":160,"line_end":160,"column_start":10,"column_end":27},"name":"BindGroupLayoutId","qualname":"::Context::BindGroupLayoutId","value":"type BindGroupLayoutId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1010},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":5924,"byte_end":5935,"line_start":161,"line_end":161,"column_start":10,"column_end":21},"name":"BindGroupId","qualname":"::Context::BindGroupId","value":"type BindGroupId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1011},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":5977,"byte_end":5990,"line_start":162,"line_end":162,"column_start":10,"column_end":23},"name":"TextureViewId","qualname":"::Context::TextureViewId","value":"type TextureViewId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1012},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6032,"byte_end":6041,"line_start":163,"line_end":163,"column_start":10,"column_end":19},"name":"SamplerId","qualname":"::Context::SamplerId","value":"type SamplerId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1013},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6083,"byte_end":6091,"line_start":164,"line_end":164,"column_start":10,"column_end":18},"name":"BufferId","qualname":"::Context::BufferId","value":"type BufferId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1014},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6133,"byte_end":6142,"line_start":165,"line_end":165,"column_start":10,"column_end":19},"name":"TextureId","qualname":"::Context::TextureId","value":"type TextureId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1015},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6184,"byte_end":6194,"line_start":166,"line_end":166,"column_start":10,"column_end":20},"name":"QuerySetId","qualname":"::Context::QuerySetId","value":"type QuerySetId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1016},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6236,"byte_end":6252,"line_start":167,"line_end":167,"column_start":10,"column_end":26},"name":"PipelineLayoutId","qualname":"::Context::PipelineLayoutId","value":"type PipelineLayoutId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1017},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6294,"byte_end":6310,"line_start":168,"line_end":168,"column_start":10,"column_end":26},"name":"RenderPipelineId","qualname":"::Context::RenderPipelineId","value":"type RenderPipelineId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1018},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6352,"byte_end":6369,"line_start":169,"line_end":169,"column_start":10,"column_end":27},"name":"ComputePipelineId","qualname":"::Context::ComputePipelineId","value":"type ComputePipelineId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1019},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6411,"byte_end":6427,"line_start":170,"line_end":170,"column_start":10,"column_end":26},"name":"CommandEncoderId","qualname":"::Context::CommandEncoderId","value":"type CommandEncoderId: Debug;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1020},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6445,"byte_end":6458,"line_start":171,"line_end":171,"column_start":10,"column_end":23},"name":"ComputePassId","qualname":"::Context::ComputePassId","value":"type ComputePassId: Debug + ComputePassInner<Self>;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1021},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6501,"byte_end":6513,"line_start":172,"line_end":172,"column_start":10,"column_end":22},"name":"RenderPassId","qualname":"::Context::RenderPassId","value":"type RenderPassId: Debug + RenderPassInner<Self>;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1022},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6555,"byte_end":6570,"line_start":173,"line_end":173,"column_start":10,"column_end":25},"name":"CommandBufferId","qualname":"::Context::CommandBufferId","value":"type CommandBufferId: Debug + Send + Sync;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1023},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6602,"byte_end":6623,"line_start":174,"line_end":174,"column_start":10,"column_end":31},"name":"RenderBundleEncoderId","qualname":"::Context::RenderBundleEncoderId","value":"type RenderBundleEncoderId: Debug + RenderInner<Self>;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1024},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6661,"byte_end":6675,"line_start":175,"line_end":175,"column_start":10,"column_end":24},"name":"RenderBundleId","qualname":"::Context::RenderBundleId","value":"type RenderBundleId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1025},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6717,"byte_end":6726,"line_start":176,"line_end":176,"column_start":10,"column_end":19},"name":"SurfaceId","qualname":"::Context::SurfaceId","value":"type SurfaceId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1026},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6769,"byte_end":6788,"line_start":178,"line_end":178,"column_start":10,"column_end":29},"name":"SurfaceOutputDetail","qualname":"::Context::SurfaceOutputDetail","value":"type SurfaceOutputDetail: Send;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1027},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6806,"byte_end":6826,"line_start":180,"line_end":180,"column_start":10,"column_end":30},"name":"RequestAdapterFuture","qualname":"::Context::RequestAdapterFuture","value":"type RequestAdapterFuture: Future<Output = Option<Self::AdapterId>> + Send;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1028},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":6886,"byte_end":6905,"line_start":181,"line_end":181,"column_start":10,"column_end":29},"name":"RequestDeviceFuture","qualname":"::Context::RequestDeviceFuture","value":"type RequestDeviceFuture: Future<Output = Result<(Self::DeviceId, Self::QueueId), RequestDeviceError>>\n        + Send;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1029},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":7009,"byte_end":7023,"line_start":183,"line_end":183,"column_start":10,"column_end":24},"name":"MapAsyncFuture","qualname":"::Context::MapAsyncFuture","value":"type MapAsyncFuture: Future<Output = Result<(), BufferAsyncError>> + Send;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1030},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":7088,"byte_end":7113,"line_start":184,"line_end":184,"column_start":10,"column_end":35},"name":"OnSubmittedWorkDoneFuture","qualname":"::Context::OnSubmittedWorkDoneFuture","value":"type OnSubmittedWorkDoneFuture: Future<Output = ()> + Send;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1515},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17602,"byte_end":17610,"line_start":497,"line_end":497,"column_start":12,"column_end":20},"name":"Instance","qualname":"::Instance","value":"Instance {  }","parent":null,"children":[{"krate":0,"index":1516}],"decl_id":null,"docs":" Context for all other wgpu objects. Instance of wgpu.","sig":null,"attributes":[{"value":"/ Context for all other wgpu objects. Instance of wgpu.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17352,"byte_end":17409,"line_start":490,"line_end":490,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17410,"byte_end":17413,"line_start":491,"line_end":491,"column_start":1,"column_end":4}},{"value":"/ This is the first thing you create when using wgpu.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17414,"byte_end":17469,"line_start":492,"line_end":492,"column_start":1,"column_end":56}},{"value":"/ Its primary use is to create [`Adapter`]s and [`Surface`]s.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17470,"byte_end":17533,"line_start":493,"line_end":493,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17534,"byte_end":17537,"line_start":494,"line_end":494,"column_start":1,"column_end":4}},{"value":"/ Does not have to be kept alive.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17538,"byte_end":17573,"line_start":495,"line_end":495,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1519},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17905,"byte_end":17912,"line_start":508,"line_end":508,"column_start":12,"column_end":19},"name":"Adapter","qualname":"::Adapter","value":"Adapter {  }","parent":null,"children":[{"krate":0,"index":1520},{"krate":0,"index":1521}],"decl_id":null,"docs":" Handle to a physical graphics and/or compute device.","sig":null,"attributes":[{"value":"/ Handle to a physical graphics and/or compute device.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17637,"byte_end":17693,"line_start":501,"line_end":501,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17694,"byte_end":17697,"line_start":502,"line_end":502,"column_start":1,"column_end":4}},{"value":"/ Adapters can be used to open a connection to the corresponding [`Device`]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17698,"byte_end":17775,"line_start":503,"line_end":503,"column_start":1,"column_end":78}},{"value":"/ on the host system by using [`Adapter::request_device`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17776,"byte_end":17836,"line_start":504,"line_end":504,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17837,"byte_end":17840,"line_start":505,"line_end":505,"column_start":1,"column_end":4}},{"value":"/ Does not have to be kept alive.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17841,"byte_end":17876,"line_start":506,"line_end":506,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1524},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":18444,"byte_end":18450,"line_start":528,"line_end":528,"column_start":12,"column_end":18},"name":"Device","qualname":"::Device","value":"Device {  }","parent":null,"children":[{"krate":0,"index":1525},{"krate":0,"index":1526}],"decl_id":null,"docs":" Open connection to a graphics and/or compute device.","sig":null,"attributes":[{"value":"/ Open connection to a graphics and/or compute device.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":18124,"byte_end":18180,"line_start":521,"line_end":521,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":18181,"byte_end":18184,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ Responsible for the creation of most rendering and compute resources.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":18185,"byte_end":18258,"line_start":523,"line_end":523,"column_start":1,"column_end":74}},{"value":"/ These are then used in commands, which are submitted to a [`Queue`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":18259,"byte_end":18331,"line_start":524,"line_end":524,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":18332,"byte_end":18335,"line_start":525,"line_end":525,"column_start":1,"column_end":4}},{"value":"/ A device may be requested from an adapter with [`Adapter::request_device`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":18336,"byte_end":18415,"line_start":526,"line_end":526,"column_start":1,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1530},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":18698,"byte_end":18702,"line_start":538,"line_end":538,"column_start":5,"column_end":9},"name":"Wait","qualname":"::Maintain::Wait","value":"Maintain::Wait","parent":{"krate":0,"index":1529},"children":[],"decl_id":null,"docs":" Block\n","sig":null,"attributes":[{"value":"/ Block","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":18684,"byte_end":18693,"line_start":537,"line_end":537,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1532},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":18728,"byte_end":18732,"line_start":540,"line_end":540,"column_start":5,"column_end":9},"name":"Poll","qualname":"::Maintain::Poll","value":"Maintain::Poll","parent":{"krate":0,"index":1529},"children":[],"decl_id":null,"docs":" Don't block\n","sig":null,"attributes":[{"value":"/ Don't block","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":18708,"byte_end":18723,"line_start":539,"line_end":539,"column_start":5,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":1529},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":18669,"byte_end":18677,"line_start":536,"line_end":536,"column_start":10,"column_end":18},"name":"Maintain","qualname":"::Maintain","value":"pub enum Maintain { Wait, Poll, }","parent":null,"children":[{"krate":0,"index":1530},{"krate":0,"index":1532}],"decl_id":null,"docs":" Passed to [`Device::poll`] to control if it should block or not. This has no effect on\n the web.\n","sig":null,"attributes":[{"value":"/ Passed to [`Device::poll`] to control if it should block or not. This has no effect on","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":18511,"byte_end":18601,"line_start":533,"line_end":533,"column_start":1,"column_end":91}},{"value":"/ the web.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":18602,"byte_end":18614,"line_start":534,"line_end":534,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":1551},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":20661,"byte_end":20667,"line_start":607,"line_end":607,"column_start":12,"column_end":18},"name":"Buffer","qualname":"::Buffer","value":"Buffer {  }","parent":null,"children":[{"krate":0,"index":1552},{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1555}],"decl_id":null,"docs":" Handle to a GPU-accessible buffer.","sig":null,"attributes":[{"value":"/ Handle to a GPU-accessible buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":20468,"byte_end":20506,"line_start":602,"line_end":602,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":20507,"byte_end":20510,"line_start":603,"line_end":603,"column_start":1,"column_end":4}},{"value":"/ Created with [`Device::create_buffer`] or","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":20511,"byte_end":20556,"line_start":604,"line_end":604,"column_start":1,"column_end":46}},{"value":"/ [`DeviceExt::create_buffer_init`](util::DeviceExt::create_buffer_init).","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":20557,"byte_end":20632,"line_start":605,"line_end":605,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1558},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":20984,"byte_end":20995,"line_start":620,"line_end":620,"column_start":12,"column_end":23},"name":"BufferSlice","qualname":"::BufferSlice","value":"BufferSlice {  }","parent":null,"children":[{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1562}],"decl_id":null,"docs":" Slice into a [`Buffer`].","sig":null,"attributes":[{"value":"/ Slice into a [`Buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":20789,"byte_end":20817,"line_start":614,"line_end":614,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":20818,"byte_end":20821,"line_start":615,"line_end":615,"column_start":1,"column_end":4}},{"value":"/ Created by calling [`Buffer::slice`]. To use the whole buffer, call with unbounded slice:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":20822,"byte_end":20915,"line_start":616,"line_end":616,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":20916,"byte_end":20919,"line_start":617,"line_end":617,"column_start":1,"column_end":4}},{"value":"/ `buffer.slice(..)`","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":20920,"byte_end":20942,"line_start":618,"line_end":618,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1571},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21204,"byte_end":21211,"line_start":630,"line_end":630,"column_start":12,"column_end":19},"name":"Texture","qualname":"::Texture","value":"Texture {  }","parent":null,"children":[{"krate":0,"index":1572},{"krate":0,"index":1573},{"krate":0,"index":1574}],"decl_id":null,"docs":" Handle to a texture on the GPU.","sig":null,"attributes":[{"value":"/ Handle to a texture on the GPU.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21086,"byte_end":21121,"line_start":626,"line_end":626,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21122,"byte_end":21125,"line_start":627,"line_end":627,"column_start":1,"column_end":4}},{"value":"/ Created by calling [`Device::create_texture`]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21126,"byte_end":21175,"line_start":628,"line_end":628,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1577},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21476,"byte_end":21487,"line_start":641,"line_end":641,"column_start":12,"column_end":23},"name":"TextureView","qualname":"::TextureView","value":"TextureView {  }","parent":null,"children":[{"krate":0,"index":1578},{"krate":0,"index":1579}],"decl_id":null,"docs":" Handle to a texture view.","sig":null,"attributes":[{"value":"/ Handle to a texture view.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21290,"byte_end":21319,"line_start":636,"line_end":636,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21320,"byte_end":21323,"line_start":637,"line_end":637,"column_start":1,"column_end":4}},{"value":"/ A `TextureView` object describes a texture and associated metadata needed by a","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21324,"byte_end":21406,"line_start":638,"line_end":638,"column_start":1,"column_end":83}},{"value":"/ [`RenderPipeline`] or [`BindGroup`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21407,"byte_end":21447,"line_start":639,"line_end":639,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1582},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21873,"byte_end":21880,"line_start":652,"line_end":652,"column_start":12,"column_end":19},"name":"Sampler","qualname":"::Sampler","value":"Sampler {  }","parent":null,"children":[{"krate":0,"index":1583},{"krate":0,"index":1584}],"decl_id":null,"docs":" Handle to a sampler.","sig":null,"attributes":[{"value":"/ Handle to a sampler.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21553,"byte_end":21577,"line_start":646,"line_end":646,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21578,"byte_end":21581,"line_start":647,"line_end":647,"column_start":1,"column_end":4}},{"value":"/ A `Sampler` object defines how a pipeline will sample from a [`TextureView`]. Samplers define","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21582,"byte_end":21679,"line_start":648,"line_end":648,"column_start":1,"column_end":98}},{"value":"/ image filters (including anisotropy) and address (wrapping) modes, among other things. See","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21680,"byte_end":21774,"line_start":649,"line_end":649,"column_start":1,"column_end":95}},{"value":"/ the documentation for [`SamplerDescriptor`] for more information.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21775,"byte_end":21844,"line_start":650,"line_end":650,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":1587},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":22364,"byte_end":22371,"line_start":670,"line_end":670,"column_start":12,"column_end":19},"name":"Surface","qualname":"::Surface","value":"Surface {  }","parent":null,"children":[{"krate":0,"index":1588},{"krate":0,"index":1589}],"decl_id":null,"docs":" Handle to a presentable surface.","sig":null,"attributes":[{"value":"/ Handle to a presentable surface.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":22093,"byte_end":22129,"line_start":665,"line_end":665,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":22130,"byte_end":22133,"line_start":666,"line_end":666,"column_start":1,"column_end":4}},{"value":"/ A `Surface` represents a platform-specific surface (e.g. a window) onto which rendered images may","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":22134,"byte_end":22235,"line_start":667,"line_end":667,"column_start":1,"column_end":102}},{"value":"/ be presented. A `Surface` may be created with the unsafe function [`Instance::create_surface`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":22236,"byte_end":22335,"line_start":668,"line_end":668,"column_start":1,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":1592},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":23038,"byte_end":23053,"line_start":690,"line_end":690,"column_start":12,"column_end":27},"name":"BindGroupLayout","qualname":"::BindGroupLayout","value":"BindGroupLayout {  }","parent":null,"children":[{"krate":0,"index":1593},{"krate":0,"index":1594}],"decl_id":null,"docs":" Handle to a binding group layout.","sig":null,"attributes":[{"value":"/ Handle to a binding group layout.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":22583,"byte_end":22620,"line_start":683,"line_end":683,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":22621,"byte_end":22624,"line_start":684,"line_end":684,"column_start":1,"column_end":4}},{"value":"/ A `BindGroupLayout` is a handle to the GPU-side layout of a binding group. It can be used to","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":22625,"byte_end":22721,"line_start":685,"line_end":685,"column_start":1,"column_end":97}},{"value":"/ create a [`BindGroupDescriptor`] object, which in turn can be used to create a [`BindGroup`]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":22722,"byte_end":22818,"line_start":686,"line_end":686,"column_start":1,"column_end":97}},{"value":"/ object with [`Device::create_bind_group`]. A series of `BindGroupLayout`s can also be used to","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":22819,"byte_end":22916,"line_start":687,"line_end":687,"column_start":1,"column_end":98}},{"value":"/ create a [`PipelineLayoutDescriptor`], which can be used to create a [`PipelineLayout`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":22917,"byte_end":23009,"line_start":688,"line_end":688,"column_start":1,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":1597},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":23686,"byte_end":23695,"line_start":710,"line_end":710,"column_start":12,"column_end":21},"name":"BindGroup","qualname":"::BindGroup","value":"BindGroup {  }","parent":null,"children":[{"krate":0,"index":1598},{"krate":0,"index":1599}],"decl_id":null,"docs":" Handle to a binding group.","sig":null,"attributes":[{"value":"/ Handle to a binding group.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":23292,"byte_end":23322,"line_start":703,"line_end":703,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":23323,"byte_end":23326,"line_start":704,"line_end":704,"column_start":1,"column_end":4}},{"value":"/ A `BindGroup` represents the set of resources bound to the bindings described by a","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":23327,"byte_end":23413,"line_start":705,"line_end":705,"column_start":1,"column_end":87}},{"value":"/ [`BindGroupLayout`]. It can be created with [`Device::create_bind_group`]. A `BindGroup` can","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":23414,"byte_end":23510,"line_start":706,"line_end":706,"column_start":1,"column_end":97}},{"value":"/ be bound to a particular [`RenderPass`] with [`RenderPass::set_bind_group`], or to a","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":23511,"byte_end":23599,"line_start":707,"line_end":707,"column_start":1,"column_end":89}},{"value":"/ [`ComputePass`] with [`ComputePass::set_bind_group`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":23600,"byte_end":23657,"line_start":708,"line_end":708,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1602},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":24224,"byte_end":24236,"line_start":729,"line_end":729,"column_start":12,"column_end":24},"name":"ShaderModule","qualname":"::ShaderModule","value":"ShaderModule {  }","parent":null,"children":[{"krate":0,"index":1603},{"krate":0,"index":1604}],"decl_id":null,"docs":" Handle to a compiled shader module.","sig":null,"attributes":[{"value":"/ Handle to a compiled shader module.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":23915,"byte_end":23954,"line_start":723,"line_end":723,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":23955,"byte_end":23958,"line_start":724,"line_end":724,"column_start":1,"column_end":4}},{"value":"/ A `ShaderModule` represents a compiled shader module on the GPU. It can be created by passing","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":23959,"byte_end":24056,"line_start":725,"line_end":725,"column_start":1,"column_end":98}},{"value":"/ valid SPIR-V source code to [`Device::create_shader_module`]. Shader modules are used to define","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":24057,"byte_end":24156,"line_start":726,"line_end":726,"column_start":1,"column_end":100}},{"value":"/ programmable stages of a pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":24157,"byte_end":24195,"line_start":727,"line_end":727,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1138},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25031,"byte_end":25035,"line_start":756,"line_end":756,"column_start":5,"column_end":9},"name":"Wgsl","qualname":"::ShaderSource::Wgsl","value":"ShaderSource::Wgsl(Cow)","parent":{"krate":0,"index":1136},"children":[],"decl_id":null,"docs":" WGSL module as a string slice.","sig":null,"attributes":[{"value":"/ WGSL module as a string slice.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":24789,"byte_end":24823,"line_start":750,"line_end":750,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":24828,"byte_end":24831,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ wgpu-rs will parse it and use for validation. It will attempt","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":24836,"byte_end":24901,"line_start":752,"line_end":752,"column_start":5,"column_end":70}},{"value":"/ to build a SPIR-V module internally and panic otherwise.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":24906,"byte_end":24966,"line_start":753,"line_end":753,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":24971,"byte_end":24974,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ Note: WGSL is not yet supported on the Web.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":24979,"byte_end":25026,"line_start":755,"line_end":755,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":1136},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":24505,"byte_end":24517,"line_start":743,"line_end":743,"column_start":10,"column_end":22},"name":"ShaderSource","qualname":"::ShaderSource","value":"pub enum ShaderSource<'a> { Wgsl(Cow), }","parent":null,"children":[{"krate":0,"index":1138}],"decl_id":null,"docs":" Source of a shader module.\n","sig":null,"attributes":[{"value":"/ Source of a shader module.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":24465,"byte_end":24495,"line_start":742,"line_end":742,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":1141},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25101,"byte_end":25123,"line_start":760,"line_end":760,"column_start":12,"column_end":34},"name":"ShaderModuleDescriptor","qualname":"::ShaderModuleDescriptor","value":"ShaderModuleDescriptor { label, source }","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1144}],"decl_id":null,"docs":" Descriptor for a shader module.\n","sig":null,"attributes":[{"value":"/ Descriptor for a shader module.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25054,"byte_end":25089,"line_start":759,"line_end":759,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":1143},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25245,"byte_end":25250,"line_start":762,"line_end":762,"column_start":9,"column_end":14},"name":"label","qualname":"::ShaderModuleDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1141},"children":[],"decl_id":null,"docs":" Debug label of the shader module. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the shader module. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25134,"byte_end":25236,"line_start":761,"line_end":761,"column_start":5,"column_end":107}}]},{"kind":"Field","id":{"krate":0,"index":1144},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25307,"byte_end":25313,"line_start":764,"line_end":764,"column_start":9,"column_end":15},"name":"source","qualname":"::ShaderModuleDescriptor::source","value":"ShaderSource<'a>","parent":{"krate":0,"index":1141},"children":[],"decl_id":null,"docs":" Source code for the shader.\n","sig":null,"attributes":[{"value":"/ Source code for the shader.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25267,"byte_end":25298,"line_start":763,"line_end":763,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1145},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25406,"byte_end":25433,"line_start":768,"line_end":768,"column_start":12,"column_end":39},"name":"ShaderModuleDescriptorSpirV","qualname":"::ShaderModuleDescriptorSpirV","value":"ShaderModuleDescriptorSpirV { label, source }","parent":null,"children":[{"krate":0,"index":1147},{"krate":0,"index":1148}],"decl_id":null,"docs":" Descriptor for a shader module given by SPIR-V binary.\n","sig":null,"attributes":[{"value":"/ Descriptor for a shader module given by SPIR-V binary.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25336,"byte_end":25394,"line_start":767,"line_end":767,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":1147},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25555,"byte_end":25560,"line_start":770,"line_end":770,"column_start":9,"column_end":14},"name":"label","qualname":"::ShaderModuleDescriptorSpirV::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1145},"children":[],"decl_id":null,"docs":" Debug label of the shader module. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the shader module. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25444,"byte_end":25546,"line_start":769,"line_end":769,"column_start":5,"column_end":107}}]},{"kind":"Field","id":{"krate":0,"index":1148},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25626,"byte_end":25632,"line_start":772,"line_end":772,"column_start":9,"column_end":15},"name":"source","qualname":"::ShaderModuleDescriptorSpirV::source","value":"std::borrow::Cow<'a, [u32]>","parent":{"krate":0,"index":1145},"children":[],"decl_id":null,"docs":" Binary SPIR-V data, in 4-byte words.\n","sig":null,"attributes":[{"value":"/ Binary SPIR-V data, in 4-byte words.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25577,"byte_end":25617,"line_start":771,"line_end":771,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1607},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25802,"byte_end":25816,"line_start":779,"line_end":779,"column_start":12,"column_end":26},"name":"PipelineLayout","qualname":"::PipelineLayout","value":"PipelineLayout {  }","parent":null,"children":[{"krate":0,"index":1608},{"krate":0,"index":1609}],"decl_id":null,"docs":" Handle to a pipeline layout.","sig":null,"attributes":[{"value":"/ Handle to a pipeline layout.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25653,"byte_end":25685,"line_start":775,"line_end":775,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25686,"byte_end":25689,"line_start":776,"line_end":776,"column_start":1,"column_end":4}},{"value":"/ A `PipelineLayout` object describes the available binding groups of a pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25690,"byte_end":25773,"line_start":777,"line_end":777,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":1612},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":26324,"byte_end":26338,"line_start":797,"line_end":797,"column_start":12,"column_end":26},"name":"RenderPipeline","qualname":"::RenderPipeline","value":"RenderPipeline {  }","parent":null,"children":[{"krate":0,"index":1613},{"krate":0,"index":1614}],"decl_id":null,"docs":" Handle to a rendering (graphics) pipeline.","sig":null,"attributes":[{"value":"/ Handle to a rendering (graphics) pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":26051,"byte_end":26097,"line_start":792,"line_end":792,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":26098,"byte_end":26101,"line_start":793,"line_end":793,"column_start":1,"column_end":4}},{"value":"/ A `RenderPipeline` object represents a graphics pipeline and its stages, bindings, vertex","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":26102,"byte_end":26195,"line_start":794,"line_end":794,"column_start":1,"column_end":94}},{"value":"/ buffers and targets. A `RenderPipeline` may be created with [`Device::create_render_pipeline`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":26196,"byte_end":26295,"line_start":795,"line_end":795,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":26681,"byte_end":26702,"line_start":812,"line_end":812,"column_start":12,"column_end":33},"name":"get_bind_group_layout","qualname":"<RenderPipeline>::get_bind_group_layout","value":"pub fn get_bind_group_layout(&Self, u32) -> BindGroupLayout","parent":null,"children":[],"decl_id":null,"docs":" Get an object representing the bind group layout at a given index.\n","sig":null,"attributes":[{"value":"/ Get an object representing the bind group layout at a given index.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":26599,"byte_end":26669,"line_start":811,"line_end":811,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1617},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":27214,"byte_end":27229,"line_start":828,"line_end":828,"column_start":12,"column_end":27},"name":"ComputePipeline","qualname":"::ComputePipeline","value":"ComputePipeline {  }","parent":null,"children":[{"krate":0,"index":1618},{"krate":0,"index":1619}],"decl_id":null,"docs":" Handle to a compute pipeline.","sig":null,"attributes":[{"value":"/ Handle to a compute pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":26977,"byte_end":27010,"line_start":823,"line_end":823,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":27011,"byte_end":27014,"line_start":824,"line_end":824,"column_start":1,"column_end":4}},{"value":"/ A `ComputePipeline` object represents a compute pipeline and its single shader stage.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":27015,"byte_end":27104,"line_start":825,"line_end":825,"column_start":1,"column_end":90}},{"value":"/ A `ComputePipeline` may be created with [`Device::create_compute_pipeline`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":27105,"byte_end":27185,"line_start":826,"line_end":826,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":27576,"byte_end":27597,"line_start":843,"line_end":843,"column_start":12,"column_end":33},"name":"get_bind_group_layout","qualname":"<ComputePipeline>::get_bind_group_layout","value":"pub fn get_bind_group_layout(&Self, u32) -> BindGroupLayout","parent":null,"children":[],"decl_id":null,"docs":" Get an object representing the bind group layout at a given index.\n","sig":null,"attributes":[{"value":"/ Get an object representing the bind group layout at a given index.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":27494,"byte_end":27564,"line_start":842,"line_end":842,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1622},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":28219,"byte_end":28232,"line_start":860,"line_end":860,"column_start":12,"column_end":25},"name":"CommandBuffer","qualname":"::CommandBuffer","value":"CommandBuffer {  }","parent":null,"children":[{"krate":0,"index":1623},{"krate":0,"index":1624}],"decl_id":null,"docs":" Handle to a command buffer on the GPU.","sig":null,"attributes":[{"value":"/ Handle to a command buffer on the GPU.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":27873,"byte_end":27915,"line_start":854,"line_end":854,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":27916,"byte_end":27919,"line_start":855,"line_end":855,"column_start":1,"column_end":4}},{"value":"/ A `CommandBuffer` represents a complete sequence of commands that may be submitted to a command","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":27920,"byte_end":28019,"line_start":856,"line_end":856,"column_start":1,"column_end":100}},{"value":"/ queue with [`Queue::submit`]. A `CommandBuffer` is obtained by recording a series of commands to","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":28020,"byte_end":28120,"line_start":857,"line_end":857,"column_start":1,"column_end":101}},{"value":"/ a [`CommandEncoder`] and then calling [`CommandEncoder::finish`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":28121,"byte_end":28190,"line_start":858,"line_end":858,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":1627},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":28903,"byte_end":28917,"line_start":883,"line_end":883,"column_start":12,"column_end":26},"name":"CommandEncoder","qualname":"::CommandEncoder","value":"CommandEncoder {  }","parent":null,"children":[{"krate":0,"index":1628},{"krate":0,"index":1629}],"decl_id":null,"docs":" Encodes a series of GPU operations.","sig":null,"attributes":[{"value":"/ Encodes a series of GPU operations.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":28528,"byte_end":28567,"line_start":875,"line_end":875,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":28568,"byte_end":28571,"line_start":876,"line_end":876,"column_start":1,"column_end":4}},{"value":"/ A command encoder can record [`RenderPass`]es, [`ComputePass`]es,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":28572,"byte_end":28641,"line_start":877,"line_end":877,"column_start":1,"column_end":70}},{"value":"/ and transfer operations between driver-managed resources like [`Buffer`]s and [`Texture`]s.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":28642,"byte_end":28737,"line_start":878,"line_end":878,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":28738,"byte_end":28741,"line_start":879,"line_end":879,"column_start":1,"column_end":4}},{"value":"/ When finished recording, call [`CommandEncoder::finish`] to obtain a [`CommandBuffer`] which may","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":28742,"byte_end":28842,"line_start":880,"line_end":880,"column_start":1,"column_end":101}},{"value":"/ be submitted for execution.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":28843,"byte_end":28874,"line_start":881,"line_end":881,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1632},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":29292,"byte_end":29302,"line_start":900,"line_end":900,"column_start":12,"column_end":22},"name":"RenderPass","qualname":"::RenderPass","value":"RenderPass {  }","parent":null,"children":[{"krate":0,"index":1634},{"krate":0,"index":1635}],"decl_id":null,"docs":" In-progress recording of a render pass.\n","sig":null,"attributes":[{"value":"/ In-progress recording of a render pass.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":29220,"byte_end":29263,"line_start":898,"line_end":898,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1639},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":29459,"byte_end":29470,"line_start":907,"line_end":907,"column_start":12,"column_end":23},"name":"ComputePass","qualname":"::ComputePass","value":"ComputePass {  }","parent":null,"children":[{"krate":0,"index":1641},{"krate":0,"index":1642}],"decl_id":null,"docs":" In-progress recording of a compute pass.\n","sig":null,"attributes":[{"value":"/ In-progress recording of a compute pass.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":29386,"byte_end":29430,"line_start":905,"line_end":905,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1646},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":29949,"byte_end":29968,"line_start":919,"line_end":919,"column_start":12,"column_end":31},"name":"RenderBundleEncoder","qualname":"::RenderBundleEncoder","value":"RenderBundleEncoder {  }","parent":null,"children":[{"krate":0,"index":1648},{"krate":0,"index":1649},{"krate":0,"index":1650},{"krate":0,"index":1651}],"decl_id":null,"docs":" Encodes a series of GPU operations into a reusable \"render bundle\".","sig":null,"attributes":[{"value":"/ Encodes a series of GPU operations into a reusable \"render bundle\".","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":29555,"byte_end":29626,"line_start":912,"line_end":912,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":29627,"byte_end":29630,"line_start":913,"line_end":913,"column_start":1,"column_end":4}},{"value":"/ It only supports a handful of render commands, but it makes them reusable. [`RenderBundle`]s","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":29631,"byte_end":29727,"line_start":914,"line_end":914,"column_start":1,"column_end":97}},{"value":"/ can be executed onto a [`CommandEncoder`] using [`RenderPass::execute_bundles`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":29728,"byte_end":29812,"line_start":915,"line_end":915,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":29813,"byte_end":29816,"line_start":916,"line_end":916,"column_start":1,"column_end":4}},{"value":"/ Executing a [`RenderBundle`] is often more efficient then issuing the underlying commands manually.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":29817,"byte_end":29920,"line_start":917,"line_end":917,"column_start":1,"column_end":104}}]},{"kind":"Struct","id":{"krate":0,"index":1655},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":30595,"byte_end":30607,"line_start":935,"line_end":935,"column_start":12,"column_end":24},"name":"RenderBundle","qualname":"::RenderBundle","value":"RenderBundle {  }","parent":null,"children":[{"krate":0,"index":1656},{"krate":0,"index":1657}],"decl_id":null,"docs":" Pre-prepared reusable bundle of GPU operations.","sig":null,"attributes":[{"value":"/ Pre-prepared reusable bundle of GPU operations.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":30221,"byte_end":30272,"line_start":928,"line_end":928,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":30273,"byte_end":30276,"line_start":929,"line_end":929,"column_start":1,"column_end":4}},{"value":"/ It only supports a handful of render commands, but it makes them reusable. [`RenderBundle`]s","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":30277,"byte_end":30373,"line_start":930,"line_end":930,"column_start":1,"column_end":97}},{"value":"/ can be executed onto a [`CommandEncoder`] using [`RenderPass::execute_bundles`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":30374,"byte_end":30458,"line_start":931,"line_end":931,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":30459,"byte_end":30462,"line_start":932,"line_end":932,"column_start":1,"column_end":4}},{"value":"/ Executing a [`RenderBundle`] is often more efficient then issuing the underlying commands manually.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":30463,"byte_end":30566,"line_start":933,"line_end":933,"column_start":1,"column_end":104}}]},{"kind":"Struct","id":{"krate":0,"index":1165},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":30874,"byte_end":30882,"line_start":949,"line_end":949,"column_start":12,"column_end":20},"name":"QuerySet","qualname":"::QuerySet","value":"QuerySet {  }","parent":null,"children":[{"krate":0,"index":1166},{"krate":0,"index":1167}],"decl_id":null,"docs":" Handle to a query set.\n","sig":null,"attributes":[{"value":"/ Handle to a query set.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":30836,"byte_end":30862,"line_start":948,"line_end":948,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1660},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31353,"byte_end":31358,"line_start":967,"line_end":967,"column_start":12,"column_end":17},"name":"Queue","qualname":"::Queue","value":"Queue {  }","parent":null,"children":[{"krate":0,"index":1661},{"krate":0,"index":1662}],"decl_id":null,"docs":" Handle to a command queue on a device.","sig":null,"attributes":[{"value":"/ Handle to a command queue on a device.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31099,"byte_end":31141,"line_start":962,"line_end":962,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31142,"byte_end":31145,"line_start":963,"line_end":963,"column_start":1,"column_end":4}},{"value":"/ A `Queue` executes recorded [`CommandBuffer`] objects and provides convenience methods","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31146,"byte_end":31236,"line_start":964,"line_end":964,"column_start":1,"column_end":91}},{"value":"/ for writing to [buffers](Queue::write_buffer) and [textures](Queue::write_texture).","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31237,"byte_end":31324,"line_start":965,"line_end":965,"column_start":1,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1667},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31745,"byte_end":31751,"line_start":980,"line_end":980,"column_start":5,"column_end":11},"name":"Buffer","qualname":"::BindingResource::Buffer","value":"BindingResource::Buffer(BufferBinding)","parent":{"krate":0,"index":1665},"children":[],"decl_id":null,"docs":" Binding is backed by a buffer.","sig":null,"attributes":[{"value":"/ Binding is backed by a buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31541,"byte_end":31575,"line_start":976,"line_end":976,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31580,"byte_end":31583,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ Corresponds to [`wgt::BufferBindingType::Uniform`] and [`wgt::BufferBindingType::Storage`]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31588,"byte_end":31682,"line_start":978,"line_end":978,"column_start":5,"column_end":99}},{"value":"/ with [`BindGroupLayoutEntry::count`] set to None.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31687,"byte_end":31740,"line_start":979,"line_end":979,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1670},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32081,"byte_end":32092,"line_start":987,"line_end":987,"column_start":5,"column_end":16},"name":"BufferArray","qualname":"::BindingResource::BufferArray","value":"BindingResource::BufferArray(&'a [BufferBinding])","parent":{"krate":0,"index":1665},"children":[],"decl_id":null,"docs":" Binding is backed by an array of buffers.","sig":null,"attributes":[{"value":"/ Binding is backed by an array of buffers.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31776,"byte_end":31821,"line_start":981,"line_end":981,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31826,"byte_end":31829,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ [`Features::BUFFER_BINDING_ARRAY`] must be supported to use this feature.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31834,"byte_end":31911,"line_start":983,"line_end":983,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31916,"byte_end":31919,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ Corresponds to [`wgt::BufferBindingType::Uniform`] and [`wgt::BufferBindingType::Storage`]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31924,"byte_end":32018,"line_start":985,"line_end":985,"column_start":5,"column_end":99}},{"value":"/ with [`BindGroupLayoutEntry::count`] set to Some.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32023,"byte_end":32076,"line_start":986,"line_end":986,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1673},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32264,"byte_end":32271,"line_start":991,"line_end":991,"column_start":5,"column_end":12},"name":"Sampler","qualname":"::BindingResource::Sampler","value":"BindingResource::Sampler(&'a Sampler)","parent":{"krate":0,"index":1665},"children":[],"decl_id":null,"docs":" Binding is a sampler.","sig":null,"attributes":[{"value":"/ Binding is a sampler.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32123,"byte_end":32148,"line_start":988,"line_end":988,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32153,"byte_end":32156,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ Corresponds to [`wgt::BindingType::Sampler`] with [`BindGroupLayoutEntry::count`] set to None.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32161,"byte_end":32259,"line_start":990,"line_end":990,"column_start":5,"column_end":103}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1676},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32490,"byte_end":32501,"line_start":996,"line_end":996,"column_start":5,"column_end":16},"name":"TextureView","qualname":"::BindingResource::TextureView","value":"BindingResource::TextureView(&'a TextureView)","parent":{"krate":0,"index":1665},"children":[],"decl_id":null,"docs":" Binding is backed by a texture.","sig":null,"attributes":[{"value":"/ Binding is backed by a texture.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32290,"byte_end":32325,"line_start":992,"line_end":992,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32330,"byte_end":32333,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ Corresponds to [`wgt::BindingType::Texture`] and [`wgt::BindingType::StorageTexture`] with","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32338,"byte_end":32432,"line_start":994,"line_end":994,"column_start":5,"column_end":99}},{"value":"/ [`BindGroupLayoutEntry::count`] set to None.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32437,"byte_end":32485,"line_start":995,"line_end":995,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1679},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32826,"byte_end":32842,"line_start":1003,"line_end":1003,"column_start":5,"column_end":21},"name":"TextureViewArray","qualname":"::BindingResource::TextureViewArray","value":"BindingResource::TextureViewArray(&'a [&'a TextureView])","parent":{"krate":0,"index":1665},"children":[],"decl_id":null,"docs":" Binding is backed by an array of textures.","sig":null,"attributes":[{"value":"/ Binding is backed by an array of textures.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32524,"byte_end":32570,"line_start":997,"line_end":997,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32575,"byte_end":32578,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_BINDING_ARRAY`] must be supported to use this feature.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32583,"byte_end":32661,"line_start":999,"line_end":999,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32666,"byte_end":32669,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ Corresponds to [`wgt::BindingType::Texture`] and [`wgt::BindingType::StorageTexture`] with","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32674,"byte_end":32768,"line_start":1001,"line_end":1001,"column_start":5,"column_end":99}},{"value":"/ [`BindGroupLayoutEntry::count`] set to Some.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32773,"byte_end":32821,"line_start":1002,"line_end":1002,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":1665},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31515,"byte_end":31530,"line_start":975,"line_end":975,"column_start":10,"column_end":25},"name":"BindingResource","qualname":"::BindingResource","value":"pub enum BindingResource<'a> {\n    Buffer(BufferBinding),\n    BufferArray(&'a [BufferBinding]),\n    Sampler(&'a Sampler),\n    TextureView(&'a TextureView),\n    TextureViewArray(&'a [&'a TextureView]),\n}","parent":null,"children":[{"krate":0,"index":1667},{"krate":0,"index":1670},{"krate":0,"index":1673},{"krate":0,"index":1676},{"krate":0,"index":1679}],"decl_id":null,"docs":" Resource that can be bound to a pipeline.\n","sig":null,"attributes":[{"value":"/ Resource that can be bound to a pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31418,"byte_end":31463,"line_start":972,"line_end":972,"column_start":1,"column_end":46}},{"value":"non_exhaustive","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":31464,"byte_end":31481,"line_start":973,"line_end":973,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1688},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32952,"byte_end":32965,"line_start":1008,"line_end":1008,"column_start":12,"column_end":25},"name":"BufferBinding","qualname":"::BufferBinding","value":"BufferBinding { buffer, offset, size }","parent":null,"children":[{"krate":0,"index":1690},{"krate":0,"index":1691},{"krate":0,"index":1692}],"decl_id":null,"docs":" Describes the segment of a buffer to bind.\n","sig":null,"attributes":[{"value":"/ Describes the segment of a buffer to bind.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32870,"byte_end":32916,"line_start":1006,"line_end":1006,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1690},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33008,"byte_end":33014,"line_start":1010,"line_end":1010,"column_start":9,"column_end":15},"name":"buffer","qualname":"::BufferBinding::buffer","value":"&'a Buffer","parent":{"krate":0,"index":1688},"children":[],"decl_id":null,"docs":" The buffer to bind.\n","sig":null,"attributes":[{"value":"/ The buffer to bind.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":32976,"byte_end":32999,"line_start":1009,"line_end":1009,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":1691},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33378,"byte_end":33384,"line_start":1016,"line_end":1016,"column_start":9,"column_end":15},"name":"offset","qualname":"::BufferBinding::offset","value":"u64","parent":{"krate":0,"index":1688},"children":[],"decl_id":null,"docs":" Base offset of the buffer. For bindings with `dynamic == true`, this offset\n will be added to the dynamic offset provided in [`RenderPass::set_bind_group`].","sig":null,"attributes":[{"value":"/ Base offset of the buffer. For bindings with `dynamic == true`, this offset","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33032,"byte_end":33111,"line_start":1011,"line_end":1011,"column_start":5,"column_end":84}},{"value":"/ will be added to the dynamic offset provided in [`RenderPass::set_bind_group`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33116,"byte_end":33199,"line_start":1012,"line_end":1012,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33204,"byte_end":33207,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ The offset has to be aligned to [`Limits::min_uniform_buffer_offset_alignment`]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33212,"byte_end":33295,"line_start":1014,"line_end":1014,"column_start":5,"column_end":88}},{"value":"/ or [`Limits::min_storage_buffer_offset_alignment`] appropriately.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33300,"byte_end":33369,"line_start":1015,"line_end":1015,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":1692},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33482,"byte_end":33486,"line_start":1018,"line_end":1018,"column_start":9,"column_end":13},"name":"size","qualname":"::BufferBinding::size","value":"std::option::Option<std::num::NonZeroU64>","parent":{"krate":0,"index":1688},"children":[],"decl_id":null,"docs":" Size of the binding, or `None` for using the rest of the buffer.\n","sig":null,"attributes":[{"value":"/ Size of the binding, or `None` for using the rest of the buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33405,"byte_end":33473,"line_start":1017,"line_end":1017,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1701},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33908,"byte_end":33913,"line_start":1029,"line_end":1029,"column_start":5,"column_end":10},"name":"Clear","qualname":"::LoadOp::Clear","value":"LoadOp::Clear(V)","parent":{"krate":0,"index":1699},"children":[],"decl_id":null,"docs":" Clear with a specified value.\n","sig":null,"attributes":[{"value":"/ Clear with a specified value.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33870,"byte_end":33903,"line_start":1028,"line_end":1028,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1704},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33948,"byte_end":33952,"line_start":1031,"line_end":1031,"column_start":5,"column_end":9},"name":"Load","qualname":"::LoadOp::Load","value":"LoadOp::Load","parent":{"krate":0,"index":1699},"children":[],"decl_id":null,"docs":" Load from memory.\n","sig":null,"attributes":[{"value":"/ Load from memory.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33922,"byte_end":33943,"line_start":1030,"line_end":1030,"column_start":5,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":1699},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33854,"byte_end":33860,"line_start":1027,"line_end":1027,"column_start":10,"column_end":16},"name":"LoadOp","qualname":"::LoadOp","value":"pub enum LoadOp<V> { Clear(V), Load, }","parent":null,"children":[{"krate":0,"index":1701},{"krate":0,"index":1704}],"decl_id":null,"docs":" Operation to perform to the output attachment at the start of a renderpass.","sig":null,"attributes":[{"value":"/ Operation to perform to the output attachment at the start of a renderpass.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33511,"byte_end":33590,"line_start":1021,"line_end":1021,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33591,"byte_end":33594,"line_start":1022,"line_end":1022,"column_start":1,"column_end":4}},{"value":"/ The render target must be cleared at least once before its content is loaded.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33595,"byte_end":33676,"line_start":1023,"line_end":1023,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":1729},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":34317,"byte_end":34327,"line_start":1044,"line_end":1044,"column_start":12,"column_end":22},"name":"Operations","qualname":"::Operations","value":"Operations { load, store }","parent":null,"children":[{"krate":0,"index":1731},{"krate":0,"index":1732}],"decl_id":null,"docs":" Pair of load and store operations for an attachment aspect.\n","sig":null,"attributes":[{"value":"/ Pair of load and store operations for an attachment aspect.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":34074,"byte_end":34137,"line_start":1040,"line_end":1040,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":1731},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":34398,"byte_end":34402,"line_start":1046,"line_end":1046,"column_start":9,"column_end":13},"name":"load","qualname":"::Operations::load","value":"LoadOp<V>","parent":{"krate":0,"index":1729},"children":[],"decl_id":null,"docs":" How data should be read through this attachment.\n","sig":null,"attributes":[{"value":"/ How data should be read through this attachment.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":34337,"byte_end":34389,"line_start":1045,"line_end":1045,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":1732},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":34488,"byte_end":34493,"line_start":1048,"line_end":1048,"column_start":9,"column_end":14},"name":"store","qualname":"::Operations::store","value":"bool","parent":{"krate":0,"index":1729},"children":[],"decl_id":null,"docs":" Whether data will be written to through this attachment.\n","sig":null,"attributes":[{"value":"/ Whether data will be written to through this attachment.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":34419,"byte_end":34479,"line_start":1047,"line_end":1047,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1756},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":34762,"byte_end":34787,"line_start":1062,"line_end":1062,"column_start":12,"column_end":37},"name":"RenderPassColorAttachment","qualname":"::RenderPassColorAttachment","value":"RenderPassColorAttachment { view, resolve_target, ops }","parent":null,"children":[{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760}],"decl_id":null,"docs":" Describes a color attachment to a [`RenderPass`].\n","sig":null,"attributes":[{"value":"/ Describes a color attachment to a [`RenderPass`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":34673,"byte_end":34726,"line_start":1060,"line_end":1060,"column_start":1,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1758},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":34844,"byte_end":34848,"line_start":1064,"line_end":1064,"column_start":9,"column_end":13},"name":"view","qualname":"::RenderPassColorAttachment::view","value":"&'a TextureView","parent":{"krate":0,"index":1756},"children":[],"decl_id":null,"docs":" The view to use as an attachment.\n","sig":null,"attributes":[{"value":"/ The view to use as an attachment.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":34798,"byte_end":34835,"line_start":1063,"line_end":1063,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1759},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":34956,"byte_end":34970,"line_start":1066,"line_end":1066,"column_start":9,"column_end":23},"name":"resolve_target","qualname":"::RenderPassColorAttachment::resolve_target","value":"std::option::Option<&'a TextureView>","parent":{"krate":0,"index":1756},"children":[],"decl_id":null,"docs":" The view that will receive the resolved output if multisampling is used.\n","sig":null,"attributes":[{"value":"/ The view that will receive the resolved output if multisampling is used.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":34871,"byte_end":34947,"line_start":1065,"line_end":1065,"column_start":5,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":1760},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35073,"byte_end":35076,"line_start":1068,"line_end":1068,"column_start":9,"column_end":12},"name":"ops","qualname":"::RenderPassColorAttachment::ops","value":"Operations<wgpu_types::Color>","parent":{"krate":0,"index":1756},"children":[],"decl_id":null,"docs":" What operations will be performed on this color attachment.\n","sig":null,"attributes":[{"value":"/ What operations will be performed on this color attachment.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35001,"byte_end":35064,"line_start":1067,"line_end":1067,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":1767},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35197,"byte_end":35229,"line_start":1073,"line_end":1073,"column_start":12,"column_end":44},"name":"RenderPassDepthStencilAttachment","qualname":"::RenderPassDepthStencilAttachment","value":"RenderPassDepthStencilAttachment { view, depth_ops, stencil_ops }","parent":null,"children":[{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771}],"decl_id":null,"docs":" Describes a depth/stencil attachment to a [`RenderPass`].\n","sig":null,"attributes":[{"value":"/ Describes a depth/stencil attachment to a [`RenderPass`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35100,"byte_end":35161,"line_start":1071,"line_end":1071,"column_start":1,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":1769},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35286,"byte_end":35290,"line_start":1075,"line_end":1075,"column_start":9,"column_end":13},"name":"view","qualname":"::RenderPassDepthStencilAttachment::view","value":"&'a TextureView","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":" The view to use as an attachment.\n","sig":null,"attributes":[{"value":"/ The view to use as an attachment.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35240,"byte_end":35277,"line_start":1074,"line_end":1074,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1770},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35396,"byte_end":35405,"line_start":1077,"line_end":1077,"column_start":9,"column_end":18},"name":"depth_ops","qualname":"::RenderPassDepthStencilAttachment::depth_ops","value":"std::option::Option<Operations<f32>>","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":" What operations will be performed on the depth part of the attachment.\n","sig":null,"attributes":[{"value":"/ What operations will be performed on the depth part of the attachment.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35313,"byte_end":35387,"line_start":1076,"line_end":1076,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":1771},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35521,"byte_end":35532,"line_start":1079,"line_end":1079,"column_start":9,"column_end":20},"name":"stencil_ops","qualname":"::RenderPassDepthStencilAttachment::stencil_ops","value":"std::option::Option<Operations<u32>>","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":" What operations will be performed on the stencil part of the attachment.\n","sig":null,"attributes":[{"value":"/ What operations will be performed on the stencil part of the attachment.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35436,"byte_end":35512,"line_start":1078,"line_end":1078,"column_start":5,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":1176},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35672,"byte_end":35677,"line_start":1085,"line_end":1085,"column_start":10,"column_end":15},"name":"Label","qualname":"::Label","value":"Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" Object label.\n","sig":null,"attributes":[{"value":"/ Object label.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35645,"byte_end":35662,"line_start":1084,"line_end":1084,"column_start":1,"column_end":18}}]},{"kind":"Type","id":{"krate":0,"index":1181},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35839,"byte_end":35860,"line_start":1088,"line_end":1088,"column_start":10,"column_end":31},"name":"RequestAdapterOptions","qualname":"::RequestAdapterOptions","value":"RequestAdapterOptionsBase<&'a Surface>","parent":null,"children":[],"decl_id":null,"docs":" Additional information required when requesting an adapter.\n","sig":null,"attributes":[{"value":"/ Additional information required when requesting an adapter.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35766,"byte_end":35829,"line_start":1087,"line_end":1087,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":1183},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35944,"byte_end":35960,"line_start":1090,"line_end":1090,"column_start":10,"column_end":26},"name":"DeviceDescriptor","qualname":"::DeviceDescriptor","value":"wgt::DeviceDescriptor<Label>","parent":null,"children":[],"decl_id":null,"docs":" Describes a [`Device`].\n","sig":null,"attributes":[{"value":"/ Describes a [`Device`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":35907,"byte_end":35934,"line_start":1089,"line_end":1089,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":1185},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36038,"byte_end":36054,"line_start":1092,"line_end":1092,"column_start":10,"column_end":26},"name":"BufferDescriptor","qualname":"::BufferDescriptor","value":"wgt::BufferDescriptor<Label>","parent":null,"children":[],"decl_id":null,"docs":" Describes a [`Buffer`].\n","sig":null,"attributes":[{"value":"/ Describes a [`Buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36001,"byte_end":36028,"line_start":1091,"line_end":1091,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":1187},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36140,"byte_end":36164,"line_start":1094,"line_end":1094,"column_start":10,"column_end":34},"name":"CommandEncoderDescriptor","qualname":"::CommandEncoderDescriptor","value":"wgt::CommandEncoderDescriptor<Label>","parent":null,"children":[],"decl_id":null,"docs":" Describes a [`CommandEncoder`].\n","sig":null,"attributes":[{"value":"/ Describes a [`CommandEncoder`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36095,"byte_end":36130,"line_start":1093,"line_end":1093,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":1189},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36256,"byte_end":36278,"line_start":1096,"line_end":1096,"column_start":10,"column_end":32},"name":"RenderBundleDescriptor","qualname":"::RenderBundleDescriptor","value":"wgt::RenderBundleDescriptor<Label>","parent":null,"children":[],"decl_id":null,"docs":" Describes a [`RenderBundle`].\n","sig":null,"attributes":[{"value":"/ Describes a [`RenderBundle`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36213,"byte_end":36246,"line_start":1095,"line_end":1095,"column_start":1,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":1191},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36363,"byte_end":36380,"line_start":1098,"line_end":1098,"column_start":10,"column_end":27},"name":"TextureDescriptor","qualname":"::TextureDescriptor","value":"wgt::TextureDescriptor<Label>","parent":null,"children":[],"decl_id":null,"docs":" Describes a [`Texture`].\n","sig":null,"attributes":[{"value":"/ Describes a [`Texture`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36325,"byte_end":36353,"line_start":1097,"line_end":1097,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":1193},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36461,"byte_end":36479,"line_start":1100,"line_end":1100,"column_start":10,"column_end":28},"name":"QuerySetDescriptor","qualname":"::QuerySetDescriptor","value":"wgt::QuerySetDescriptor<Label>","parent":null,"children":[],"decl_id":null,"docs":" Describes a [`QuerySet`].\n","sig":null,"attributes":[{"value":"/ Describes a [`QuerySet`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36422,"byte_end":36451,"line_start":1099,"line_end":1099,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":1778},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36611,"byte_end":36632,"line_start":1104,"line_end":1104,"column_start":12,"column_end":33},"name":"TextureViewDescriptor","qualname":"::TextureViewDescriptor","value":"TextureViewDescriptor { label, format, dimension, aspect, base_mip_level, mip_level_count, base_array_layer, array_layer_count }","parent":null,"children":[{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787}],"decl_id":null,"docs":" Describes a [`TextureView`].\n","sig":null,"attributes":[{"value":"/ Describes a [`TextureView`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36523,"byte_end":36555,"line_start":1102,"line_end":1102,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":1780},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36753,"byte_end":36758,"line_start":1106,"line_end":1106,"column_start":9,"column_end":14},"name":"label","qualname":"::TextureViewDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1778},"children":[],"decl_id":null,"docs":" Debug label of the texture view. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the texture view. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36643,"byte_end":36744,"line_start":1105,"line_end":1105,"column_start":5,"column_end":106}}]},{"kind":"Field","id":{"krate":0,"index":1781},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36890,"byte_end":36896,"line_start":1108,"line_end":1108,"column_start":9,"column_end":15},"name":"format","qualname":"::TextureViewDescriptor::format","value":"std::option::Option<wgpu_types::TextureFormat>","parent":{"krate":0,"index":1778},"children":[],"decl_id":null,"docs":" Format of the texture view. At this time, it must be the same as the underlying format of the texture.\n","sig":null,"attributes":[{"value":"/ Format of the texture view. At this time, it must be the same as the underlying format of the texture.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36775,"byte_end":36881,"line_start":1107,"line_end":1107,"column_start":5,"column_end":111}}]},{"kind":"Field","id":{"krate":0,"index":1782},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37124,"byte_end":37133,"line_start":1111,"line_end":1111,"column_start":9,"column_end":18},"name":"dimension","qualname":"::TextureViewDescriptor::dimension","value":"std::option::Option<wgpu_types::TextureViewDimension>","parent":{"krate":0,"index":1778},"children":[],"decl_id":null,"docs":" The dimension of the texture view. For 1D textures, this must be `1D`. For 2D textures it must be one of\n `D2`, `D2Array`, `Cube`, and `CubeArray`. For 3D textures it must be `3D`\n","sig":null,"attributes":[{"value":"/ The dimension of the texture view. For 1D textures, this must be `1D`. For 2D textures it must be one of","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":36925,"byte_end":37033,"line_start":1109,"line_end":1109,"column_start":5,"column_end":113}},{"value":"/ `D2`, `D2Array`, `Cube`, and `CubeArray`. For 3D textures it must be `3D`","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37038,"byte_end":37115,"line_start":1110,"line_end":1110,"column_start":5,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":1783},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37251,"byte_end":37257,"line_start":1113,"line_end":1113,"column_start":9,"column_end":15},"name":"aspect","qualname":"::TextureViewDescriptor::aspect","value":"wgpu_types::TextureAspect","parent":{"krate":0,"index":1778},"children":[],"decl_id":null,"docs":" Aspect of the texture. Color textures must be [`TextureAspect::All`].\n","sig":null,"attributes":[{"value":"/ Aspect of the texture. Color textures must be [`TextureAspect::All`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37169,"byte_end":37242,"line_start":1112,"line_end":1112,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":1784},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37306,"byte_end":37320,"line_start":1115,"line_end":1115,"column_start":9,"column_end":23},"name":"base_mip_level","qualname":"::TextureViewDescriptor::base_mip_level","value":"u32","parent":{"krate":0,"index":1778},"children":[],"decl_id":null,"docs":" Base mip level.\n","sig":null,"attributes":[{"value":"/ Base mip level.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37278,"byte_end":37297,"line_start":1114,"line_end":1114,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":1785},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37563,"byte_end":37578,"line_start":1119,"line_end":1119,"column_start":9,"column_end":24},"name":"mip_level_count","qualname":"::TextureViewDescriptor::mip_level_count","value":"std::option::Option<std::num::NonZeroU32>","parent":{"krate":0,"index":1778},"children":[],"decl_id":null,"docs":" Mip level count.\n If `Some(count)`, `base_mip_level + count` must be less or equal to underlying texture mip count.\n If `None`, considered to include the rest of the mipmap levels, but at least 1 in total.\n","sig":null,"attributes":[{"value":"/ Mip level count.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37331,"byte_end":37351,"line_start":1116,"line_end":1116,"column_start":5,"column_end":25}},{"value":"/ If `Some(count)`, `base_mip_level + count` must be less or equal to underlying texture mip count.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37356,"byte_end":37457,"line_start":1117,"line_end":1117,"column_start":5,"column_end":106}},{"value":"/ If `None`, considered to include the rest of the mipmap levels, but at least 1 in total.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37462,"byte_end":37554,"line_start":1118,"line_end":1118,"column_start":5,"column_end":97}}]},{"kind":"Field","id":{"krate":0,"index":1786},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37634,"byte_end":37650,"line_start":1121,"line_end":1121,"column_start":9,"column_end":25},"name":"base_array_layer","qualname":"::TextureViewDescriptor::base_array_layer","value":"u32","parent":{"krate":0,"index":1778},"children":[],"decl_id":null,"docs":" Base array layer.\n","sig":null,"attributes":[{"value":"/ Base array layer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37604,"byte_end":37625,"line_start":1120,"line_end":1120,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":1787},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37888,"byte_end":37905,"line_start":1125,"line_end":1125,"column_start":9,"column_end":26},"name":"array_layer_count","qualname":"::TextureViewDescriptor::array_layer_count","value":"std::option::Option<std::num::NonZeroU32>","parent":{"krate":0,"index":1778},"children":[],"decl_id":null,"docs":" Layer count.\n If `Some(count)`, `base_array_layer + count` must be less or equal to the underlying array count.\n If `None`, considered to include the rest of the array layers, but at least 1 in total.\n","sig":null,"attributes":[{"value":"/ Layer count.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37661,"byte_end":37677,"line_start":1122,"line_end":1122,"column_start":5,"column_end":21}},{"value":"/ If `Some(count)`, `base_array_layer + count` must be less or equal to the underlying array count.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37682,"byte_end":37783,"line_start":1123,"line_end":1123,"column_start":5,"column_end":106}},{"value":"/ If `None`, considered to include the rest of the array layers, but at least 1 in total.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37788,"byte_end":37879,"line_start":1124,"line_end":1124,"column_start":5,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":1803},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":38085,"byte_end":38109,"line_start":1132,"line_end":1132,"column_start":12,"column_end":36},"name":"PipelineLayoutDescriptor","qualname":"::PipelineLayoutDescriptor","value":"PipelineLayoutDescriptor { label, bind_group_layouts, push_constant_ranges }","parent":null,"children":[{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807}],"decl_id":null,"docs":" Describes a pipeline layout.","sig":null,"attributes":[{"value":"/ Describes a pipeline layout.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37930,"byte_end":37962,"line_start":1128,"line_end":1128,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37963,"byte_end":37966,"line_start":1129,"line_end":1129,"column_start":1,"column_end":4}},{"value":"/ A `PipelineLayoutDescriptor` can be used to create a pipeline layout.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":37967,"byte_end":38040,"line_start":1130,"line_end":1130,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":1805},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":38233,"byte_end":38238,"line_start":1134,"line_end":1134,"column_start":9,"column_end":14},"name":"label","qualname":"::PipelineLayoutDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Debug label of the pipeline layout. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the pipeline layout. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":38120,"byte_end":38224,"line_start":1133,"line_end":1133,"column_start":5,"column_end":109}}]},{"kind":"Field","id":{"krate":0,"index":1806},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":38435,"byte_end":38453,"line_start":1137,"line_end":1137,"column_start":9,"column_end":27},"name":"bind_group_layouts","qualname":"::PipelineLayoutDescriptor::bind_group_layouts","value":"&'a [&'a BindGroupLayout]","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Bind groups that this pipeline uses. The first entry will provide all the bindings for\n \"set = 0\", second entry will provide all the bindings for \"set = 1\" etc.\n","sig":null,"attributes":[{"value":"/ Bind groups that this pipeline uses. The first entry will provide all the bindings for","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":38255,"byte_end":38345,"line_start":1135,"line_end":1135,"column_start":5,"column_end":95}},{"value":"/ \"set = 0\", second entry will provide all the bindings for \"set = 1\" etc.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":38350,"byte_end":38426,"line_start":1136,"line_end":1136,"column_start":5,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":1807},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":38815,"byte_end":38835,"line_start":1143,"line_end":1143,"column_start":9,"column_end":29},"name":"push_constant_ranges","qualname":"::PipelineLayoutDescriptor::push_constant_ranges","value":"&'a [wgpu_types::PushConstantRange]","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Set of push constant ranges this pipeline uses. Each shader stage that uses push constants\n must define the range in push constant memory that corresponds to its single `layout(push_constant)`\n uniform block.","sig":null,"attributes":[{"value":"/ Set of push constant ranges this pipeline uses. Each shader stage that uses push constants","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":38486,"byte_end":38580,"line_start":1138,"line_end":1138,"column_start":5,"column_end":99}},{"value":"/ must define the range in push constant memory that corresponds to its single `layout(push_constant)`","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":38585,"byte_end":38689,"line_start":1139,"line_end":1139,"column_start":5,"column_end":109}},{"value":"/ uniform block.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":38694,"byte_end":38712,"line_start":1140,"line_end":1140,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":38717,"byte_end":38720,"line_start":1141,"line_end":1141,"column_start":5,"column_end":8}},{"value":"/ If this array is non-empty, the [`Features::PUSH_CONSTANTS`] must be enabled.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":38725,"byte_end":38806,"line_start":1142,"line_end":1142,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":1817},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":38939,"byte_end":38956,"line_start":1148,"line_end":1148,"column_start":12,"column_end":29},"name":"SamplerDescriptor","qualname":"::SamplerDescriptor","value":"SamplerDescriptor { label, address_mode_u, address_mode_v, address_mode_w, mag_filter, min_filter, mipmap_filter, lod_min_clamp, lod_max_clamp, compare, anisotropy_clamp, border_color }","parent":null,"children":[{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1821},{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1825},{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1830}],"decl_id":null,"docs":" Describes a [`Sampler`]\n","sig":null,"attributes":[{"value":"/ Describes a [`Sampler`]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":38865,"byte_end":38892,"line_start":1146,"line_end":1146,"column_start":1,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":1819},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39072,"byte_end":39077,"line_start":1150,"line_end":1150,"column_start":9,"column_end":14},"name":"label","qualname":"::SamplerDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" Debug label of the sampler. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the sampler. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":38967,"byte_end":39063,"line_start":1149,"line_end":1149,"column_start":5,"column_end":101}}]},{"kind":"Field","id":{"krate":0,"index":1820},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39174,"byte_end":39188,"line_start":1152,"line_end":1152,"column_start":9,"column_end":23},"name":"address_mode_u","qualname":"::SamplerDescriptor::address_mode_u","value":"wgpu_types::AddressMode","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" How to deal with out of bounds accesses in the u (i.e. x) direction\n","sig":null,"attributes":[{"value":"/ How to deal with out of bounds accesses in the u (i.e. x) direction","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39094,"byte_end":39165,"line_start":1151,"line_end":1151,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1821},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39287,"byte_end":39301,"line_start":1154,"line_end":1154,"column_start":9,"column_end":23},"name":"address_mode_v","qualname":"::SamplerDescriptor::address_mode_v","value":"wgpu_types::AddressMode","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" How to deal with out of bounds accesses in the v (i.e. y) direction\n","sig":null,"attributes":[{"value":"/ How to deal with out of bounds accesses in the v (i.e. y) direction","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39207,"byte_end":39278,"line_start":1153,"line_end":1153,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1822},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39400,"byte_end":39414,"line_start":1156,"line_end":1156,"column_start":9,"column_end":23},"name":"address_mode_w","qualname":"::SamplerDescriptor::address_mode_w","value":"wgpu_types::AddressMode","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" How to deal with out of bounds accesses in the w (i.e. z) direction\n","sig":null,"attributes":[{"value":"/ How to deal with out of bounds accesses in the w (i.e. z) direction","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39320,"byte_end":39391,"line_start":1155,"line_end":1155,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1823},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39515,"byte_end":39525,"line_start":1158,"line_end":1158,"column_start":9,"column_end":19},"name":"mag_filter","qualname":"::SamplerDescriptor::mag_filter","value":"wgpu_types::FilterMode","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" How to filter the texture when it needs to be magnified (made larger)\n","sig":null,"attributes":[{"value":"/ How to filter the texture when it needs to be magnified (made larger)","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39433,"byte_end":39506,"line_start":1157,"line_end":1157,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":1824},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39625,"byte_end":39635,"line_start":1160,"line_end":1160,"column_start":9,"column_end":19},"name":"min_filter","qualname":"::SamplerDescriptor::min_filter","value":"wgpu_types::FilterMode","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" How to filter the texture when it needs to be minified (made smaller)\n","sig":null,"attributes":[{"value":"/ How to filter the texture when it needs to be minified (made smaller)","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39543,"byte_end":39616,"line_start":1159,"line_end":1159,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":1825},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39702,"byte_end":39715,"line_start":1162,"line_end":1162,"column_start":9,"column_end":22},"name":"mipmap_filter","qualname":"::SamplerDescriptor::mipmap_filter","value":"wgpu_types::FilterMode","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" How to filter between mip map levels\n","sig":null,"attributes":[{"value":"/ How to filter between mip map levels","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39653,"byte_end":39693,"line_start":1161,"line_end":1161,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":1826},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39793,"byte_end":39806,"line_start":1164,"line_end":1164,"column_start":9,"column_end":22},"name":"lod_min_clamp","qualname":"::SamplerDescriptor::lod_min_clamp","value":"f32","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" Minimum level of detail (i.e. mip level) to use\n","sig":null,"attributes":[{"value":"/ Minimum level of detail (i.e. mip level) to use","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39733,"byte_end":39784,"line_start":1163,"line_end":1163,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1827},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39877,"byte_end":39890,"line_start":1166,"line_end":1166,"column_start":9,"column_end":22},"name":"lod_max_clamp","qualname":"::SamplerDescriptor::lod_max_clamp","value":"f32","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" Maximum level of detail (i.e. mip level) to use\n","sig":null,"attributes":[{"value":"/ Maximum level of detail (i.e. mip level) to use","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39817,"byte_end":39868,"line_start":1165,"line_end":1165,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1828},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39999,"byte_end":40006,"line_start":1168,"line_end":1168,"column_start":9,"column_end":16},"name":"compare","qualname":"::SamplerDescriptor::compare","value":"std::option::Option<wgpu_types::CompareFunction>","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" If this is enabled, this is a comparison sampler using the given comparison function.\n","sig":null,"attributes":[{"value":"/ If this is enabled, this is a comparison sampler using the given comparison function.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":39901,"byte_end":39990,"line_start":1167,"line_end":1167,"column_start":5,"column_end":94}}]},{"kind":"Field","id":{"krate":0,"index":1829},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":40083,"byte_end":40099,"line_start":1170,"line_end":1170,"column_start":9,"column_end":25},"name":"anisotropy_clamp","qualname":"::SamplerDescriptor::anisotropy_clamp","value":"std::option::Option<std::num::NonZeroU8>","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" Valid values: 1, 2, 4, 8, and 16.\n","sig":null,"attributes":[{"value":"/ Valid values: 1, 2, 4, 8, and 16.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":40037,"byte_end":40074,"line_start":1169,"line_end":1169,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1830},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":40208,"byte_end":40220,"line_start":1172,"line_end":1172,"column_start":9,"column_end":21},"name":"border_color","qualname":"::SamplerDescriptor::border_color","value":"std::option::Option<wgpu_types::SamplerBorderColor>","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" Border color to use when address_mode is [`AddressMode::ClampToBorder`]\n","sig":null,"attributes":[{"value":"/ Border color to use when address_mode is [`AddressMode::ClampToBorder`]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":40124,"byte_end":40199,"line_start":1171,"line_end":1171,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":1843},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":40913,"byte_end":40927,"line_start":1196,"line_end":1196,"column_start":12,"column_end":26},"name":"BindGroupEntry","qualname":"::BindGroupEntry","value":"BindGroupEntry { binding, resource }","parent":null,"children":[{"krate":0,"index":1845},{"krate":0,"index":1846}],"decl_id":null,"docs":" Bindable resource and the slot to bind it to.\n","sig":null,"attributes":[{"value":"/ Bindable resource and the slot to bind it to.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":40828,"byte_end":40877,"line_start":1194,"line_end":1194,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":1845},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41088,"byte_end":41095,"line_start":1199,"line_end":1199,"column_start":9,"column_end":16},"name":"binding","qualname":"::BindGroupEntry::binding","value":"u32","parent":{"krate":0,"index":1843},"children":[],"decl_id":null,"docs":" Slot for which binding provides resource. Corresponds to an entry of the same\n binding index in the [`BindGroupLayoutDescriptor`].\n","sig":null,"attributes":[{"value":"/ Slot for which binding provides resource. Corresponds to an entry of the same","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":40938,"byte_end":41019,"line_start":1197,"line_end":1197,"column_start":5,"column_end":86}},{"value":"/ binding index in the [`BindGroupLayoutDescriptor`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41024,"byte_end":41079,"line_start":1198,"line_end":1198,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1846},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41152,"byte_end":41160,"line_start":1201,"line_end":1201,"column_start":9,"column_end":17},"name":"resource","qualname":"::BindGroupEntry::resource","value":"BindingResource<'a>","parent":{"krate":0,"index":1843},"children":[],"decl_id":null,"docs":" Resource to attach to the binding\n","sig":null,"attributes":[{"value":"/ Resource to attach to the binding","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41106,"byte_end":41143,"line_start":1200,"line_end":1200,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1853},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41286,"byte_end":41305,"line_start":1206,"line_end":1206,"column_start":12,"column_end":31},"name":"BindGroupDescriptor","qualname":"::BindGroupDescriptor","value":"BindGroupDescriptor { label, layout, entries }","parent":null,"children":[{"krate":0,"index":1855},{"krate":0,"index":1856},{"krate":0,"index":1857}],"decl_id":null,"docs":" Describes a group of bindings and the resources to be bound.\n","sig":null,"attributes":[{"value":"/ Describes a group of bindings and the resources to be bound.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41186,"byte_end":41250,"line_start":1204,"line_end":1204,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":1855},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41424,"byte_end":41429,"line_start":1208,"line_end":1208,"column_start":9,"column_end":14},"name":"label","qualname":"::BindGroupDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1853},"children":[],"decl_id":null,"docs":" Debug label of the bind group. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the bind group. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41316,"byte_end":41415,"line_start":1207,"line_end":1207,"column_start":5,"column_end":104}}]},{"kind":"Field","id":{"krate":0,"index":1856},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41519,"byte_end":41525,"line_start":1210,"line_end":1210,"column_start":9,"column_end":15},"name":"layout","qualname":"::BindGroupDescriptor::layout","value":"&'a BindGroupLayout","parent":{"krate":0,"index":1853},"children":[],"decl_id":null,"docs":" The [`BindGroupLayout`] that corresponds to this bind group.\n","sig":null,"attributes":[{"value":"/ The [`BindGroupLayout`] that corresponds to this bind group.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41446,"byte_end":41510,"line_start":1209,"line_end":1209,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":1857},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41606,"byte_end":41613,"line_start":1212,"line_end":1212,"column_start":9,"column_end":16},"name":"entries","qualname":"::BindGroupDescriptor::entries","value":"&'a [BindGroupEntry<'a>]","parent":{"krate":0,"index":1853},"children":[],"decl_id":null,"docs":" The resources to bind to this bind group.\n","sig":null,"attributes":[{"value":"/ The resources to bind to this bind group.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41552,"byte_end":41597,"line_start":1211,"line_end":1211,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1864},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41887,"byte_end":41907,"line_start":1220,"line_end":1220,"column_start":12,"column_end":32},"name":"RenderPassDescriptor","qualname":"::RenderPassDescriptor","value":"RenderPassDescriptor { label, color_attachments, depth_stencil_attachment }","parent":null,"children":[{"krate":0,"index":1867},{"krate":0,"index":1868},{"krate":0,"index":1869}],"decl_id":null,"docs":" Describes the attachments of a render pass.","sig":null,"attributes":[{"value":"/ Describes the attachments of a render pass.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41644,"byte_end":41691,"line_start":1215,"line_end":1215,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41692,"byte_end":41695,"line_start":1216,"line_end":1216,"column_start":1,"column_end":4}},{"value":"/ Note: separate lifetimes are needed because the texture views","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41696,"byte_end":41761,"line_start":1217,"line_end":1217,"column_start":1,"column_end":66}},{"value":"/ have to live as long as the pass is recorded, while everything else doesn't.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41762,"byte_end":41842,"line_start":1218,"line_end":1218,"column_start":1,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":1867},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42031,"byte_end":42036,"line_start":1222,"line_end":1222,"column_start":9,"column_end":14},"name":"label","qualname":"::RenderPassDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1864},"children":[],"decl_id":null,"docs":" Debug label of the render pass. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the render pass. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":41922,"byte_end":42022,"line_start":1221,"line_end":1221,"column_start":5,"column_end":105}}]},{"kind":"Field","id":{"krate":0,"index":1868},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42107,"byte_end":42124,"line_start":1224,"line_end":1224,"column_start":9,"column_end":26},"name":"color_attachments","qualname":"::RenderPassDescriptor::color_attachments","value":"&'b [RenderPassColorAttachment<'a>]","parent":{"krate":0,"index":1864},"children":[],"decl_id":null,"docs":" The color attachments of the render pass.\n","sig":null,"attributes":[{"value":"/ The color attachments of the render pass.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42053,"byte_end":42098,"line_start":1223,"line_end":1223,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":1869},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42240,"byte_end":42264,"line_start":1226,"line_end":1226,"column_start":9,"column_end":33},"name":"depth_stencil_attachment","qualname":"::RenderPassDescriptor::depth_stencil_attachment","value":"std::option::Option<RenderPassDepthStencilAttachment<'a>>","parent":{"krate":0,"index":1864},"children":[],"decl_id":null,"docs":" The depth and stencil attachment of the render pass, if any.\n","sig":null,"attributes":[{"value":"/ The depth and stencil attachment of the render pass, if any.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42167,"byte_end":42231,"line_start":1225,"line_end":1225,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1882},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42423,"byte_end":42441,"line_start":1231,"line_end":1231,"column_start":12,"column_end":30},"name":"VertexBufferLayout","qualname":"::VertexBufferLayout","value":"VertexBufferLayout { array_stride, step_mode, attributes }","parent":null,"children":[{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1886}],"decl_id":null,"docs":" Describes how the vertex buffer is interpreted.\n","sig":null,"attributes":[{"value":"/ Describes how the vertex buffer is interpreted.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42315,"byte_end":42366,"line_start":1229,"line_end":1229,"column_start":1,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1884},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42519,"byte_end":42531,"line_start":1233,"line_end":1233,"column_start":9,"column_end":21},"name":"array_stride","qualname":"::VertexBufferLayout::array_stride","value":"u64","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":" The stride, in bytes, between elements of this buffer.\n","sig":null,"attributes":[{"value":"/ The stride, in bytes, between elements of this buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42452,"byte_end":42510,"line_start":1232,"line_end":1232,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":1885},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42615,"byte_end":42624,"line_start":1235,"line_end":1235,"column_start":9,"column_end":18},"name":"step_mode","qualname":"::VertexBufferLayout::step_mode","value":"wgpu_types::VertexStepMode","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":" How often this vertex buffer is \"stepped\" forward.\n","sig":null,"attributes":[{"value":"/ How often this vertex buffer is \"stepped\" forward.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42552,"byte_end":42606,"line_start":1234,"line_end":1234,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":1886},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42713,"byte_end":42723,"line_start":1237,"line_end":1237,"column_start":9,"column_end":19},"name":"attributes","qualname":"::VertexBufferLayout::attributes","value":"&'a [wgpu_types::VertexAttribute]","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":" The list of attributes which comprise a single vertex.\n","sig":null,"attributes":[{"value":"/ The list of attributes which comprise a single vertex.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42646,"byte_end":42704,"line_start":1236,"line_end":1236,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1908},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42841,"byte_end":42852,"line_start":1242,"line_end":1242,"column_start":12,"column_end":23},"name":"VertexState","qualname":"::VertexState","value":"VertexState { module, entry_point, buffers }","parent":null,"children":[{"krate":0,"index":1910},{"krate":0,"index":1911},{"krate":0,"index":1912}],"decl_id":null,"docs":" Describes the vertex process in a render pipeline.\n","sig":null,"attributes":[{"value":"/ Describes the vertex process in a render pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42751,"byte_end":42805,"line_start":1240,"line_end":1240,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1910},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42918,"byte_end":42924,"line_start":1244,"line_end":1244,"column_start":9,"column_end":15},"name":"module","qualname":"::VertexState::module","value":"&'a ShaderModule","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" The compiled shader module for this stage.\n","sig":null,"attributes":[{"value":"/ The compiled shader module for this stage.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42863,"byte_end":42909,"line_start":1243,"line_end":1243,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":1911},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43093,"byte_end":43104,"line_start":1247,"line_end":1247,"column_start":9,"column_end":20},"name":"entry_point","qualname":"::VertexState::entry_point","value":"&'a str","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" The name of the entry point in the compiled shader. There must be a function that returns\n void with this name in the shader.\n","sig":null,"attributes":[{"value":"/ The name of the entry point in the compiled shader. There must be a function that returns","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":42948,"byte_end":43041,"line_start":1245,"line_end":1245,"column_start":5,"column_end":98}},{"value":"/ void with this name in the shader.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43046,"byte_end":43084,"line_start":1246,"line_end":1246,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":1912},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43189,"byte_end":43196,"line_start":1249,"line_end":1249,"column_start":9,"column_end":16},"name":"buffers","qualname":"::VertexState::buffers","value":"&'a [VertexBufferLayout<'a>]","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" The format of any vertex buffers used with this pipeline.\n","sig":null,"attributes":[{"value":"/ The format of any vertex buffers used with this pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43119,"byte_end":43180,"line_start":1248,"line_end":1248,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1919},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43323,"byte_end":43336,"line_start":1254,"line_end":1254,"column_start":12,"column_end":25},"name":"FragmentState","qualname":"::FragmentState","value":"FragmentState { module, entry_point, targets }","parent":null,"children":[{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1923}],"decl_id":null,"docs":" Describes the fragment process in a render pipeline.\n","sig":null,"attributes":[{"value":"/ Describes the fragment process in a render pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43231,"byte_end":43287,"line_start":1252,"line_end":1252,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":1921},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43402,"byte_end":43408,"line_start":1256,"line_end":1256,"column_start":9,"column_end":15},"name":"module","qualname":"::FragmentState::module","value":"&'a ShaderModule","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" The compiled shader module for this stage.\n","sig":null,"attributes":[{"value":"/ The compiled shader module for this stage.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43347,"byte_end":43393,"line_start":1255,"line_end":1255,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":1922},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43577,"byte_end":43588,"line_start":1259,"line_end":1259,"column_start":9,"column_end":20},"name":"entry_point","qualname":"::FragmentState::entry_point","value":"&'a str","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" The name of the entry point in the compiled shader. There must be a function that returns\n void with this name in the shader.\n","sig":null,"attributes":[{"value":"/ The name of the entry point in the compiled shader. There must be a function that returns","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43432,"byte_end":43525,"line_start":1257,"line_end":1257,"column_start":5,"column_end":98}},{"value":"/ void with this name in the shader.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43530,"byte_end":43568,"line_start":1258,"line_end":1258,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":1923},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43654,"byte_end":43661,"line_start":1261,"line_end":1261,"column_start":9,"column_end":16},"name":"targets","qualname":"::FragmentState::targets","value":"&'a [wgpu_types::ColorTargetState]","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" The color state of the render targets.\n","sig":null,"attributes":[{"value":"/ The color state of the render targets.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43603,"byte_end":43645,"line_start":1260,"line_end":1260,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1930},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43769,"byte_end":43793,"line_start":1266,"line_end":1266,"column_start":12,"column_end":36},"name":"RenderPipelineDescriptor","qualname":"::RenderPipelineDescriptor","value":"RenderPipelineDescriptor { label, layout, vertex, primitive, depth_stencil, multisample, fragment }","parent":null,"children":[{"krate":0,"index":1932},{"krate":0,"index":1933},{"krate":0,"index":1934},{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1938}],"decl_id":null,"docs":" Describes a render (graphics) pipeline.\n","sig":null,"attributes":[{"value":"/ Describes a render (graphics) pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43690,"byte_end":43733,"line_start":1264,"line_end":1264,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1932},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43910,"byte_end":43915,"line_start":1268,"line_end":1268,"column_start":9,"column_end":14},"name":"label","qualname":"::RenderPipelineDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1930},"children":[],"decl_id":null,"docs":" Debug label of the pipeline. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the pipeline. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43804,"byte_end":43901,"line_start":1267,"line_end":1267,"column_start":5,"column_end":102}}]},{"kind":"Field","id":{"krate":0,"index":1933},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43989,"byte_end":43995,"line_start":1270,"line_end":1270,"column_start":9,"column_end":15},"name":"layout","qualname":"::RenderPipelineDescriptor::layout","value":"std::option::Option<&'a PipelineLayout>","parent":{"krate":0,"index":1930},"children":[],"decl_id":null,"docs":" The layout of bind groups for this pipeline.\n","sig":null,"attributes":[{"value":"/ The layout of bind groups for this pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":43932,"byte_end":43980,"line_start":1269,"line_end":1269,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":1934},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44115,"byte_end":44121,"line_start":1272,"line_end":1272,"column_start":9,"column_end":15},"name":"vertex","qualname":"::RenderPipelineDescriptor::vertex","value":"VertexState<'a>","parent":{"krate":0,"index":1930},"children":[],"decl_id":null,"docs":" The compiled vertex stage, its entry point, and the input buffers layout.\n","sig":null,"attributes":[{"value":"/ The compiled vertex stage, its entry point, and the input buffers layout.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44029,"byte_end":44106,"line_start":1271,"line_end":1271,"column_start":5,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":1935},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44238,"byte_end":44247,"line_start":1274,"line_end":1274,"column_start":9,"column_end":18},"name":"primitive","qualname":"::RenderPipelineDescriptor::primitive","value":"wgpu_types::PrimitiveState","parent":{"krate":0,"index":1930},"children":[],"decl_id":null,"docs":" The properties of the pipeline at the primitive assembly and rasterization level.\n","sig":null,"attributes":[{"value":"/ The properties of the pipeline at the primitive assembly and rasterization level.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44144,"byte_end":44229,"line_start":1273,"line_end":1273,"column_start":5,"column_end":90}}]},{"kind":"Field","id":{"krate":0,"index":1936},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44369,"byte_end":44382,"line_start":1276,"line_end":1276,"column_start":9,"column_end":22},"name":"depth_stencil","qualname":"::RenderPipelineDescriptor::depth_stencil","value":"std::option::Option<wgpu_types::DepthStencilState>","parent":{"krate":0,"index":1930},"children":[],"decl_id":null,"docs":" The effect of draw calls on the depth and stencil aspects of the output target, if any.\n","sig":null,"attributes":[{"value":"/ The effect of draw calls on the depth and stencil aspects of the output target, if any.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44269,"byte_end":44360,"line_start":1275,"line_end":1275,"column_start":5,"column_end":96}}]},{"kind":"Field","id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44474,"byte_end":44485,"line_start":1278,"line_end":1278,"column_start":9,"column_end":20},"name":"multisample","qualname":"::RenderPipelineDescriptor::multisample","value":"wgpu_types::MultisampleState","parent":{"krate":0,"index":1930},"children":[],"decl_id":null,"docs":" The multi-sampling properties of the pipeline.\n","sig":null,"attributes":[{"value":"/ The multi-sampling properties of the pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44415,"byte_end":44465,"line_start":1277,"line_end":1277,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1938},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44590,"byte_end":44598,"line_start":1280,"line_end":1280,"column_start":9,"column_end":17},"name":"fragment","qualname":"::RenderPipelineDescriptor::fragment","value":"std::option::Option<FragmentState<'a>>","parent":{"krate":0,"index":1930},"children":[],"decl_id":null,"docs":" The compiled fragment stage, its entry point, and the color targets.\n","sig":null,"attributes":[{"value":"/ The compiled fragment stage, its entry point, and the color targets.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44509,"byte_end":44581,"line_start":1279,"line_end":1279,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1945},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44723,"byte_end":44744,"line_start":1285,"line_end":1285,"column_start":12,"column_end":33},"name":"ComputePassDescriptor","qualname":"::ComputePassDescriptor","value":"ComputePassDescriptor { label }","parent":null,"children":[{"krate":0,"index":1947}],"decl_id":null,"docs":" Describes the attachments of a compute pass.\n","sig":null,"attributes":[{"value":"/ Describes the attachments of a compute pass.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44630,"byte_end":44678,"line_start":1283,"line_end":1283,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":1947},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44865,"byte_end":44870,"line_start":1287,"line_end":1287,"column_start":9,"column_end":14},"name":"label","qualname":"::ComputePassDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1945},"children":[],"decl_id":null,"docs":" Debug label of the compute pass. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the compute pass. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44755,"byte_end":44856,"line_start":1286,"line_end":1286,"column_start":5,"column_end":106}}]},{"kind":"Struct","id":{"krate":0,"index":1957},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44955,"byte_end":44980,"line_start":1292,"line_end":1292,"column_start":12,"column_end":37},"name":"ComputePipelineDescriptor","qualname":"::ComputePipelineDescriptor","value":"ComputePipelineDescriptor { label, layout, module, entry_point }","parent":null,"children":[{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962}],"decl_id":null,"docs":" Describes a compute pipeline.\n","sig":null,"attributes":[{"value":"/ Describes a compute pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44886,"byte_end":44919,"line_start":1290,"line_end":1290,"column_start":1,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":1959},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45097,"byte_end":45102,"line_start":1294,"line_end":1294,"column_start":9,"column_end":14},"name":"label","qualname":"::ComputePipelineDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1957},"children":[],"decl_id":null,"docs":" Debug label of the pipeline. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the pipeline. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":44991,"byte_end":45088,"line_start":1293,"line_end":1293,"column_start":5,"column_end":102}}]},{"kind":"Field","id":{"krate":0,"index":1960},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45176,"byte_end":45182,"line_start":1296,"line_end":1296,"column_start":9,"column_end":15},"name":"layout","qualname":"::ComputePipelineDescriptor::layout","value":"std::option::Option<&'a PipelineLayout>","parent":{"krate":0,"index":1957},"children":[],"decl_id":null,"docs":" The layout of bind groups for this pipeline.\n","sig":null,"attributes":[{"value":"/ The layout of bind groups for this pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45119,"byte_end":45167,"line_start":1295,"line_end":1295,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":1961},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45271,"byte_end":45277,"line_start":1298,"line_end":1298,"column_start":9,"column_end":15},"name":"module","qualname":"::ComputePipelineDescriptor::module","value":"&'a ShaderModule","parent":{"krate":0,"index":1957},"children":[],"decl_id":null,"docs":" The compiled shader module for this stage.\n","sig":null,"attributes":[{"value":"/ The compiled shader module for this stage.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45216,"byte_end":45262,"line_start":1297,"line_end":1297,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":1962},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45446,"byte_end":45457,"line_start":1301,"line_end":1301,"column_start":9,"column_end":20},"name":"entry_point","qualname":"::ComputePipelineDescriptor::entry_point","value":"&'a str","parent":{"krate":0,"index":1957},"children":[],"decl_id":null,"docs":" The name of the entry point in the compiled shader. There must be a function that returns\n void with this name in the shader.\n","sig":null,"attributes":[{"value":"/ The name of the entry point in the compiled shader. There must be a function that returns","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45301,"byte_end":45394,"line_start":1299,"line_end":1299,"column_start":5,"column_end":98}},{"value":"/ void with this name in the shader.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45399,"byte_end":45437,"line_start":1300,"line_end":1300,"column_start":5,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":1200},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45599,"byte_end":45614,"line_start":1306,"line_end":1306,"column_start":10,"column_end":25},"name":"ImageCopyBuffer","qualname":"::ImageCopyBuffer","value":"ImageCopyBufferBase<&'a Buffer>","parent":null,"children":[],"decl_id":null,"docs":" View of a buffer which can be used to copy to/from a texture.\n","sig":null,"attributes":[{"value":"/ View of a buffer which can be used to copy to/from a texture.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45524,"byte_end":45589,"line_start":1305,"line_end":1305,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":1205},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45793,"byte_end":45809,"line_start":1310,"line_end":1310,"column_start":10,"column_end":26},"name":"ImageCopyTexture","qualname":"::ImageCopyTexture","value":"ImageCopyTextureBase<&'a Texture>","parent":null,"children":[],"decl_id":null,"docs":" View of a texture which can be used to copy to/from a buffer/texture.\n","sig":null,"attributes":[{"value":"/ View of a texture which can be used to copy to/from a buffer/texture.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45710,"byte_end":45783,"line_start":1309,"line_end":1309,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1969},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45924,"byte_end":45949,"line_start":1314,"line_end":1314,"column_start":12,"column_end":37},"name":"BindGroupLayoutDescriptor","qualname":"::BindGroupLayoutDescriptor","value":"BindGroupLayoutDescriptor { label, entries }","parent":null,"children":[{"krate":0,"index":1971},{"krate":0,"index":1972}],"decl_id":null,"docs":" Describes a [`BindGroupLayout`].\n","sig":null,"attributes":[{"value":"/ Describes a [`BindGroupLayout`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45852,"byte_end":45888,"line_start":1312,"line_end":1312,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":1971},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":46075,"byte_end":46080,"line_start":1316,"line_end":1316,"column_start":9,"column_end":14},"name":"label","qualname":"::BindGroupLayoutDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1969},"children":[],"decl_id":null,"docs":" Debug label of the bind group layout. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the bind group layout. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":45960,"byte_end":46066,"line_start":1315,"line_end":1315,"column_start":5,"column_end":111}}]},{"kind":"Field","id":{"krate":0,"index":1972},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":46151,"byte_end":46158,"line_start":1319,"line_end":1319,"column_start":9,"column_end":16},"name":"entries","qualname":"::BindGroupLayoutDescriptor::entries","value":"&'a [wgpu_types::BindGroupLayoutEntry]","parent":{"krate":0,"index":1969},"children":[],"decl_id":null,"docs":" Array of entries in this BindGroupLayout\n","sig":null,"attributes":[{"value":"/ Array of entries in this BindGroupLayout","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":46098,"byte_end":46142,"line_start":1318,"line_end":1318,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1979},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":46297,"byte_end":46326,"line_start":1324,"line_end":1324,"column_start":12,"column_end":41},"name":"RenderBundleEncoderDescriptor","qualname":"::RenderBundleEncoderDescriptor","value":"RenderBundleEncoderDescriptor { label, color_formats, depth_stencil, sample_count }","parent":null,"children":[{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984}],"decl_id":null,"docs":" Describes a [`RenderBundleEncoder`].\n","sig":null,"attributes":[{"value":"/ Describes a [`RenderBundleEncoder`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":46191,"byte_end":46231,"line_start":1322,"line_end":1322,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":1981},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":46456,"byte_end":46461,"line_start":1326,"line_end":1326,"column_start":9,"column_end":14},"name":"label","qualname":"::RenderBundleEncoderDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1979},"children":[],"decl_id":null,"docs":" Debug label of the render bundle encoder. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the render bundle encoder. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":46337,"byte_end":46447,"line_start":1325,"line_end":1325,"column_start":5,"column_end":115}}]},{"kind":"Field","id":{"krate":0,"index":1982},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":46693,"byte_end":46706,"line_start":1329,"line_end":1329,"column_start":9,"column_end":22},"name":"color_formats","qualname":"::RenderBundleEncoderDescriptor::color_formats","value":"&'a [wgpu_types::TextureFormat]","parent":{"krate":0,"index":1979},"children":[],"decl_id":null,"docs":" The formats of the color attachments that this render bundle is capable to rendering to. This\n must match the formats of the color attachments in the renderpass this render bundle is executed in.\n","sig":null,"attributes":[{"value":"/ The formats of the color attachments that this render bundle is capable to rendering to. This","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":46478,"byte_end":46575,"line_start":1327,"line_end":1327,"column_start":5,"column_end":102}},{"value":"/ must match the formats of the color attachments in the renderpass this render bundle is executed in.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":46580,"byte_end":46684,"line_start":1328,"line_end":1328,"column_start":5,"column_end":109}}]},{"kind":"Field","id":{"krate":0,"index":1983},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":46949,"byte_end":46962,"line_start":1332,"line_end":1332,"column_start":9,"column_end":22},"name":"depth_stencil","qualname":"::RenderBundleEncoderDescriptor::depth_stencil","value":"std::option::Option<wgpu_types::RenderBundleDepthStencil>","parent":{"krate":0,"index":1979},"children":[],"decl_id":null,"docs":" Information about the depth attachment that this render bundle is capable to rendering to. This\n must match the format of the depth attachments in the renderpass this render bundle is executed in.\n","sig":null,"attributes":[{"value":"/ Information about the depth attachment that this render bundle is capable to rendering to. This","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":46733,"byte_end":46832,"line_start":1330,"line_end":1330,"column_start":5,"column_end":104}},{"value":"/ must match the format of the depth attachments in the renderpass this render bundle is executed in.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":46837,"byte_end":46940,"line_start":1331,"line_end":1331,"column_start":5,"column_end":108}}]},{"kind":"Field","id":{"krate":0,"index":1984},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47148,"byte_end":47160,"line_start":1335,"line_end":1335,"column_start":9,"column_end":21},"name":"sample_count","qualname":"::RenderBundleEncoderDescriptor::sample_count","value":"u32","parent":{"krate":0,"index":1979},"children":[],"decl_id":null,"docs":" Sample count this render bundle is capable of rendering to. This must match the pipelines and\n the renderpasses it is used in.\n","sig":null,"attributes":[{"value":"/ Sample count this render bundle is capable of rendering to. This must match the pipelines and","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47002,"byte_end":47099,"line_start":1333,"line_end":1333,"column_start":5,"column_end":102}},{"value":"/ the renderpasses it is used in.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47104,"byte_end":47139,"line_start":1334,"line_end":1334,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2009},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47312,"byte_end":47326,"line_start":1341,"line_end":1341,"column_start":12,"column_end":26},"name":"SurfaceTexture","qualname":"::SurfaceTexture","value":"SurfaceTexture { texture, suboptimal }","parent":null,"children":[{"krate":0,"index":2010},{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":2013}],"decl_id":null,"docs":" Surface texture that can be rendered to.\n Result of a successful call to [`Surface::get_current_texture`].\n","sig":null,"attributes":[{"value":"/ Surface texture that can be rendered to.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47170,"byte_end":47214,"line_start":1338,"line_end":1338,"column_start":1,"column_end":45}},{"value":"/ Result of a successful call to [`Surface::get_current_texture`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47215,"byte_end":47283,"line_start":1339,"line_end":1339,"column_start":1,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":2010},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47375,"byte_end":47382,"line_start":1343,"line_end":1343,"column_start":9,"column_end":16},"name":"texture","qualname":"::SurfaceTexture::texture","value":"Texture","parent":{"krate":0,"index":2009},"children":[],"decl_id":null,"docs":" Accessible view of the frame.\n","sig":null,"attributes":[{"value":"/ Accessible view of the frame.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47333,"byte_end":47366,"line_start":1342,"line_end":1342,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":2011},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47529,"byte_end":47539,"line_start":1346,"line_end":1346,"column_start":9,"column_end":19},"name":"suboptimal","qualname":"::SurfaceTexture::suboptimal","value":"bool","parent":{"krate":0,"index":2009},"children":[],"decl_id":null,"docs":" `true` if the acquired buffer can still be used for rendering,\n but should be recreated for maximum performance.\n","sig":null,"attributes":[{"value":"/ `true` if the acquired buffer can still be used for rendering,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47397,"byte_end":47463,"line_start":1344,"line_end":1344,"column_start":5,"column_end":71}},{"value":"/ but should be recreated for maximum performance.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47468,"byte_end":47520,"line_start":1345,"line_end":1345,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2017},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47833,"byte_end":47840,"line_start":1355,"line_end":1355,"column_start":5,"column_end":12},"name":"Timeout","qualname":"::SurfaceError::Timeout","value":"SurfaceError::Timeout","parent":{"krate":0,"index":2016},"children":[],"decl_id":null,"docs":" A timeout was encountered while trying to acquire the next frame.\n","sig":null,"attributes":[{"value":"/ A timeout was encountered while trying to acquire the next frame.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47759,"byte_end":47828,"line_start":1354,"line_end":1354,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2019},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47936,"byte_end":47944,"line_start":1357,"line_end":1357,"column_start":5,"column_end":13},"name":"Outdated","qualname":"::SurfaceError::Outdated","value":"SurfaceError::Outdated","parent":{"krate":0,"index":2016},"children":[],"decl_id":null,"docs":" The underlying surface has changed, and therefore the swap chain must be updated.\n","sig":null,"attributes":[{"value":"/ The underlying surface has changed, and therefore the swap chain must be updated.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47846,"byte_end":47931,"line_start":1356,"line_end":1356,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2021},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48014,"byte_end":48018,"line_start":1359,"line_end":1359,"column_start":5,"column_end":9},"name":"Lost","qualname":"::SurfaceError::Lost","value":"SurfaceError::Lost","parent":{"krate":0,"index":2016},"children":[],"decl_id":null,"docs":" The swap chain has been lost and needs to be recreated.\n","sig":null,"attributes":[{"value":"/ The swap chain has been lost and needs to be recreated.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47950,"byte_end":48009,"line_start":1358,"line_end":1358,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2023},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48086,"byte_end":48097,"line_start":1361,"line_end":1361,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::SurfaceError::OutOfMemory","value":"SurfaceError::OutOfMemory","parent":{"krate":0,"index":2016},"children":[],"decl_id":null,"docs":" There is no more memory left to allocate a new frame.\n","sig":null,"attributes":[{"value":"/ There is no more memory left to allocate a new frame.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48024,"byte_end":48081,"line_start":1360,"line_end":1360,"column_start":5,"column_end":62}}]},{"kind":"Enum","id":{"krate":0,"index":2016},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47740,"byte_end":47752,"line_start":1353,"line_end":1353,"column_start":10,"column_end":22},"name":"SurfaceError","qualname":"::SurfaceError","value":"pub enum SurfaceError { Timeout, Outdated, Lost, OutOfMemory, }","parent":null,"children":[{"krate":0,"index":2017},{"krate":0,"index":2019},{"krate":0,"index":2021},{"krate":0,"index":2023}],"decl_id":null,"docs":" Result of an unsuccessful call to [`Surface::get_current_texture`].\n","sig":null,"attributes":[{"value":"/ Result of an unsuccessful call to [`Surface::get_current_texture`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":47620,"byte_end":47691,"line_start":1351,"line_end":1351,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1211},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48904,"byte_end":48907,"line_start":1384,"line_end":1384,"column_start":12,"column_end":15},"name":"new","qualname":"<Instance>::new","value":"pub fn new(Backends) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an new instance of wgpu.","sig":null,"attributes":[{"value":"/ Create an new instance of wgpu.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48708,"byte_end":48743,"line_start":1378,"line_end":1378,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48748,"byte_end":48751,"line_start":1379,"line_end":1379,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48756,"byte_end":48771,"line_start":1380,"line_end":1380,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48776,"byte_end":48779,"line_start":1381,"line_end":1381,"column_start":5,"column_end":8}},{"value":"/ - `backends` - Controls from which [backends][Backends] wgpu will choose","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48784,"byte_end":48860,"line_start":1382,"line_end":1382,"column_start":5,"column_end":81}},{"value":"/   during instantiation.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48865,"byte_end":48892,"line_start":1383,"line_end":1383,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49328,"byte_end":49336,"line_start":1400,"line_end":1400,"column_start":19,"column_end":27},"name":"from_hal","qualname":"<Instance>::from_hal","value":"pub unsafe fn from_hal<A: wgc::hub::HalApi>(A::Instance) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an new instance of wgpu from a wgpu-hal instance.","sig":null,"attributes":[{"value":"/ Create an new instance of wgpu from a wgpu-hal instance.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49024,"byte_end":49084,"line_start":1390,"line_end":1390,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49089,"byte_end":49092,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49097,"byte_end":49112,"line_start":1392,"line_end":1392,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49117,"byte_end":49120,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ - `hal_instance` - wgpu-hal instance.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49125,"byte_end":49166,"line_start":1394,"line_end":1394,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49171,"byte_end":49174,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49179,"byte_end":49191,"line_start":1396,"line_end":1396,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49196,"byte_end":49199,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ Refer to the creation of wgpu-hal Instance for every backend.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49204,"byte_end":49269,"line_start":1398,"line_end":1398,"column_start":5,"column_end":70}},{"value":"cfg(not(target_arch = \"wasm32\"))","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49274,"byte_end":49309,"line_start":1399,"line_end":1399,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49732,"byte_end":49750,"line_start":1412,"line_end":1412,"column_start":12,"column_end":30},"name":"enumerate_adapters","qualname":"<Instance>::enumerate_adapters","value":"pub fn enumerate_adapters(&Self, Backends) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Retrieves all available [`Adapter`]s that match the given [`Backends`].","sig":null,"attributes":[{"value":"/ Retrieves all available [`Adapter`]s that match the given [`Backends`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49503,"byte_end":49578,"line_start":1406,"line_end":1406,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49583,"byte_end":49586,"line_start":1407,"line_end":1407,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49591,"byte_end":49606,"line_start":1408,"line_end":1408,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49611,"byte_end":49614,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ - `backends` - Backends from which to enumerate adapters.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49619,"byte_end":49680,"line_start":1410,"line_end":1410,"column_start":5,"column_end":66}},{"value":"cfg(not(target_arch = \"wasm32\"))","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":49685,"byte_end":49720,"line_start":1411,"line_end":1411,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":50365,"byte_end":50380,"line_start":1428,"line_end":1428,"column_start":12,"column_end":27},"name":"request_adapter","qualname":"<Instance>::request_adapter","value":"pub fn request_adapter(&Self, &RequestAdapterOptions) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an [`Adapter`] which matches the given [`RequestAdapterOptions`].","sig":null,"attributes":[{"value":"/ Retrieves an [`Adapter`] which matches the given [`RequestAdapterOptions`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":50087,"byte_end":50166,"line_start":1423,"line_end":1423,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":50171,"byte_end":50174,"line_start":1424,"line_end":1424,"column_start":5,"column_end":8}},{"value":"/ Some options are \"soft\", so treated as non-mandatory. Others are \"hard\".","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":50179,"byte_end":50255,"line_start":1425,"line_end":1425,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":50260,"byte_end":50263,"line_start":1426,"line_end":1426,"column_start":5,"column_end":8}},{"value":"/ If no adapters are found that suffice all the \"hard\" options, `None` is returned.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":50268,"byte_end":50353,"line_start":1427,"line_end":1427,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1221},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":50924,"byte_end":50947,"line_start":1443,"line_end":1443,"column_start":19,"column_end":42},"name":"create_adapter_from_hal","qualname":"<Instance>::create_adapter_from_hal","value":"pub unsafe fn create_adapter_from_hal<A: wgc::hub::HalApi>(&Self,\n                                                           hal::ExposedAdapter<A>)\n-> Adapter","parent":null,"children":[],"decl_id":null,"docs":" Converts a wgpu-hal `ExposedAdapter` to a wgpu [`Adapter`].","sig":null,"attributes":[{"value":"/ Converts a wgpu-hal `ExposedAdapter` to a wgpu [`Adapter`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":50695,"byte_end":50758,"line_start":1437,"line_end":1437,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":50763,"byte_end":50766,"line_start":1438,"line_end":1438,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":50771,"byte_end":50783,"line_start":1439,"line_end":1439,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":50788,"byte_end":50791,"line_start":1440,"line_end":1440,"column_start":5,"column_end":8}},{"value":"/ `hal_adapter` must be created from this instance internal handle.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":50796,"byte_end":50865,"line_start":1441,"line_end":1441,"column_start":5,"column_end":74}},{"value":"cfg(not(target_arch = \"wasm32\"))","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":50870,"byte_end":50905,"line_start":1442,"line_end":1442,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1223},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":51453,"byte_end":51467,"line_start":1458,"line_end":1458,"column_start":19,"column_end":33},"name":"create_surface","qualname":"<Instance>::create_surface","value":"pub unsafe fn create_surface<W: raw_window_handle::HasRawWindowHandle>(&Self,\n                                                                       &W)\n-> Surface","parent":null,"children":[],"decl_id":null,"docs":" Creates a surface from a raw window handle.","sig":null,"attributes":[{"value":"/ Creates a surface from a raw window handle.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":51204,"byte_end":51251,"line_start":1452,"line_end":1452,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":51256,"byte_end":51259,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":51264,"byte_end":51276,"line_start":1454,"line_end":1454,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":51281,"byte_end":51284,"line_start":1455,"line_end":1455,"column_start":5,"column_end":8}},{"value":"/ - Raw Window Handle must be a valid object to create a surface upon and","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":51289,"byte_end":51364,"line_start":1456,"line_end":1456,"column_start":5,"column_end":80}},{"value":"/   must remain valid for the lifetime of the returned surface.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":51369,"byte_end":51434,"line_start":1457,"line_end":1457,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53412,"byte_end":53420,"line_start":1518,"line_end":1518,"column_start":12,"column_end":20},"name":"poll_all","qualname":"<Instance>::poll_all","value":"pub fn poll_all(&Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Polls all devices.\n If `force_wait` is true and this is not running on the web,\n then this function will block until all in-flight buffers have been mapped.\n","sig":null,"attributes":[{"value":"/ Polls all devices.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53226,"byte_end":53248,"line_start":1515,"line_end":1515,"column_start":5,"column_end":27}},{"value":"/ If `force_wait` is true and this is not running on the web,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53253,"byte_end":53316,"line_start":1516,"line_end":1516,"column_start":5,"column_end":68}},{"value":"/ then this function will block until all in-flight buffers have been mapped.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53321,"byte_end":53400,"line_start":1517,"line_end":1517,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53599,"byte_end":53614,"line_start":1524,"line_end":1524,"column_start":12,"column_end":27},"name":"generate_report","qualname":"<Instance>::generate_report","value":"pub fn generate_report(&Self) -> wgc::hub::GlobalReport","parent":null,"children":[],"decl_id":null,"docs":" Generates memory report.\n","sig":null,"attributes":[{"value":"/ Generates memory report.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53519,"byte_end":53547,"line_start":1522,"line_end":1522,"column_start":5,"column_end":33}},{"value":"cfg(not(target_arch = \"wasm32\"))","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53552,"byte_end":53587,"line_start":1523,"line_end":1523,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":54482,"byte_end":54496,"line_start":1546,"line_end":1546,"column_start":12,"column_end":26},"name":"request_device","qualname":"<Adapter>::request_device","value":"pub fn request_device(&Self, &DeviceDescriptor, Option<&std::path::Path>)\n-> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Requests a connection to a physical device, creating a logical device.","sig":null,"attributes":[{"value":"/ Requests a connection to a physical device, creating a logical device.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53717,"byte_end":53791,"line_start":1530,"line_end":1530,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53796,"byte_end":53799,"line_start":1531,"line_end":1531,"column_start":5,"column_end":8}},{"value":"/ Returns the [`Device`] together with a [`Queue`] that executes command buffers.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53804,"byte_end":53887,"line_start":1532,"line_end":1532,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53892,"byte_end":53895,"line_start":1533,"line_end":1533,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53900,"byte_end":53915,"line_start":1534,"line_end":1534,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53920,"byte_end":53923,"line_start":1535,"line_end":1535,"column_start":5,"column_end":8}},{"value":"/ - `desc` - Description of the features and limits requested from the given device.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53928,"byte_end":54014,"line_start":1536,"line_end":1536,"column_start":5,"column_end":91}},{"value":"/ - `trace_path` - Can be used for API call tracing, if that feature is","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":54019,"byte_end":54092,"line_start":1537,"line_end":1537,"column_start":5,"column_end":78}},{"value":"/   enabled in `wgpu-core`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":54097,"byte_end":54126,"line_start":1538,"line_end":1538,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":54131,"byte_end":54134,"line_start":1539,"line_end":1539,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":54139,"byte_end":54151,"line_start":1540,"line_end":1540,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":54156,"byte_end":54159,"line_start":1541,"line_end":1541,"column_start":5,"column_end":8}},{"value":"/ - Features specified by `desc` are not supported by this adapter.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":54164,"byte_end":54233,"line_start":1542,"line_end":1542,"column_start":5,"column_end":74}},{"value":"/ - Unsafe features were requested but not enabled when requesting the adapter.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":54238,"byte_end":54319,"line_start":1543,"line_end":1543,"column_start":5,"column_end":86}},{"value":"/ - Limits requested exceed the values provided by the adapter.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":54324,"byte_end":54389,"line_start":1544,"line_end":1544,"column_start":5,"column_end":70}},{"value":"/ - Adapter does not support all features wgpu requires to safely operate.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":54394,"byte_end":54470,"line_start":1545,"line_end":1545,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":55545,"byte_end":55567,"line_start":1576,"line_end":1576,"column_start":19,"column_end":41},"name":"create_device_from_hal","qualname":"<Adapter>::create_device_from_hal","value":"pub unsafe fn create_device_from_hal<A: wgc::hub::HalApi>(&Self,\n                                                          hal::OpenDevice<A>,\n                                                          &DeviceDescriptor,\n                                                          Option<&std::path::Path>)\n-> Result<(Device, Queue), RequestDeviceError>","parent":null,"children":[],"decl_id":null,"docs":" Create a wgpu [`Device`] and [`Queue`] from a wgpu-hal `OpenDevice`","sig":null,"attributes":[{"value":"/ Create a wgpu [`Device`] and [`Queue`] from a wgpu-hal `OpenDevice`","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":55239,"byte_end":55310,"line_start":1569,"line_end":1569,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":55315,"byte_end":55318,"line_start":1570,"line_end":1570,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":55323,"byte_end":55335,"line_start":1571,"line_end":1571,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":55340,"byte_end":55343,"line_start":1572,"line_end":1572,"column_start":5,"column_end":8}},{"value":"/ - `hal_device` must be created from this adapter internal handle.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":55348,"byte_end":55417,"line_start":1573,"line_end":1573,"column_start":5,"column_end":74}},{"value":"/ - `desc.features` must be a subset of `hal_device` features.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":55422,"byte_end":55486,"line_start":1574,"line_end":1574,"column_start":5,"column_end":69}},{"value":"cfg(not(target_arch = \"wasm32\"))","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":55491,"byte_end":55526,"line_start":1575,"line_end":1575,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":56377,"byte_end":56397,"line_start":1600,"line_end":1600,"column_start":12,"column_end":32},"name":"is_surface_supported","qualname":"<Adapter>::is_surface_supported","value":"pub fn is_surface_supported(&Self, &Surface) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this adapter may present to the passed surface.\n","sig":null,"attributes":[{"value":"/ Returns whether this adapter may present to the passed surface.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":56298,"byte_end":56365,"line_start":1599,"line_end":1599,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":56716,"byte_end":56724,"line_start":1608,"line_end":1608,"column_start":12,"column_end":20},"name":"features","qualname":"<Adapter>::features","value":"pub fn features(&Self) -> Features","parent":null,"children":[],"decl_id":null,"docs":" List all features that are supported with this adapter.","sig":null,"attributes":[{"value":"/ List all features that are supported with this adapter.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":56530,"byte_end":56589,"line_start":1604,"line_end":1604,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":56594,"byte_end":56597,"line_start":1605,"line_end":1605,"column_start":5,"column_end":8}},{"value":"/ Features must be explicitly requested in [`Adapter::request_device`] in order","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":56602,"byte_end":56683,"line_start":1606,"line_end":1606,"column_start":5,"column_end":86}},{"value":"/ to use them.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":56688,"byte_end":56704,"line_start":1607,"line_end":1607,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":57029,"byte_end":57035,"line_start":1616,"line_end":1616,"column_start":12,"column_end":18},"name":"limits","qualname":"<Adapter>::limits","value":"pub fn limits(&Self) -> Limits","parent":null,"children":[],"decl_id":null,"docs":" List the \"best\" limits that are supported by this adapter.","sig":null,"attributes":[{"value":"/ List the \"best\" limits that are supported by this adapter.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":56817,"byte_end":56879,"line_start":1612,"line_end":1612,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":56884,"byte_end":56887,"line_start":1613,"line_end":1613,"column_start":5,"column_end":8}},{"value":"/ Limits must be explicitly requested in [`Adapter::request_device`] to set","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":56892,"byte_end":56969,"line_start":1614,"line_end":1614,"column_start":5,"column_end":82}},{"value":"/ the values that you are allowed to use.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":56974,"byte_end":57017,"line_start":1615,"line_end":1615,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1238},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":57174,"byte_end":57182,"line_start":1621,"line_end":1621,"column_start":12,"column_end":20},"name":"get_info","qualname":"<Adapter>::get_info","value":"pub fn get_info(&Self) -> AdapterInfo","parent":null,"children":[],"decl_id":null,"docs":" Get info about the adapter itself.\n","sig":null,"attributes":[{"value":"/ Get info about the adapter itself.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":57124,"byte_end":57162,"line_start":1620,"line_end":1620,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":57328,"byte_end":57352,"line_start":1626,"line_end":1626,"column_start":12,"column_end":36},"name":"get_downlevel_properties","qualname":"<Adapter>::get_downlevel_properties","value":"pub fn get_downlevel_properties(&Self) -> DownlevelCapabilities","parent":null,"children":[],"decl_id":null,"docs":" Get info about the adapter itself.\n","sig":null,"attributes":[{"value":"/ Get info about the adapter itself.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":57278,"byte_end":57316,"line_start":1625,"line_end":1625,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":57778,"byte_end":57805,"line_start":1634,"line_end":1634,"column_start":12,"column_end":39},"name":"get_texture_format_features","qualname":"<Adapter>::get_texture_format_features","value":"pub fn get_texture_format_features(&Self, TextureFormat)\n-> TextureFormatFeatures","parent":null,"children":[],"decl_id":null,"docs":" Returns the features supported for a given texture format by this adapter.","sig":null,"attributes":[{"value":"/ Returns the features supported for a given texture format by this adapter.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":57470,"byte_end":57548,"line_start":1630,"line_end":1630,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":57553,"byte_end":57556,"line_start":1631,"line_end":1631,"column_start":5,"column_end":8}},{"value":"/ Note that the WebGPU spec further restricts the available usages/features.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":57561,"byte_end":57639,"line_start":1632,"line_end":1632,"column_start":5,"column_end":83}},{"value":"/ To disable these restrictions on a device, request the [`Features::TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES`] feature.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":57644,"byte_end":57766,"line_start":1633,"line_end":1633,"column_start":5,"column_end":127}}]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":58109,"byte_end":58113,"line_start":1643,"line_end":1643,"column_start":12,"column_end":16},"name":"poll","qualname":"<Device>::poll","value":"pub fn poll(&Self, Maintain)","parent":null,"children":[],"decl_id":null,"docs":" Check for resource cleanups and mapping callbacks.","sig":null,"attributes":[{"value":"/ Check for resource cleanups and mapping callbacks.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":57977,"byte_end":58031,"line_start":1640,"line_end":1640,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":58036,"byte_end":58039,"line_start":1641,"line_end":1641,"column_start":5,"column_end":8}},{"value":"/ no-op on the web, device is automatically polled.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":58044,"byte_end":58097,"line_start":1642,"line_end":1642,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":58357,"byte_end":58365,"line_start":1650,"line_end":1650,"column_start":12,"column_end":20},"name":"features","qualname":"<Device>::features","value":"pub fn features(&Self) -> Features","parent":null,"children":[],"decl_id":null,"docs":" List all features that may be used with this device.","sig":null,"attributes":[{"value":"/ List all features that may be used with this device.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":58220,"byte_end":58276,"line_start":1647,"line_end":1647,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":58281,"byte_end":58284,"line_start":1648,"line_end":1648,"column_start":5,"column_end":8}},{"value":"/ Functions may panic if you use unsupported features.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":58289,"byte_end":58345,"line_start":1649,"line_end":1649,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":58598,"byte_end":58604,"line_start":1657,"line_end":1657,"column_start":12,"column_end":18},"name":"limits","qualname":"<Device>::limits","value":"pub fn limits(&Self) -> Limits","parent":null,"children":[],"decl_id":null,"docs":" List all limits that were requested of this device.","sig":null,"attributes":[{"value":"/ List all limits that were requested of this device.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":58457,"byte_end":58512,"line_start":1654,"line_end":1654,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":58517,"byte_end":58520,"line_start":1655,"line_end":1655,"column_start":5,"column_end":8}},{"value":"/ If any of these limits are exceeded, functions may panic.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":58525,"byte_end":58586,"line_start":1656,"line_end":1656,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":58771,"byte_end":58791,"line_start":1662,"line_end":1662,"column_start":12,"column_end":32},"name":"create_shader_module","qualname":"<Device>::create_shader_module","value":"pub fn create_shader_module(&Self, &ShaderModuleDescriptor) -> ShaderModule","parent":null,"children":[],"decl_id":null,"docs":" Creates a shader module from either SPIR-V or WGSL source code.\n","sig":null,"attributes":[{"value":"/ Creates a shader module from either SPIR-V or WGSL source code.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":58692,"byte_end":58759,"line_start":1661,"line_end":1661,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":59692,"byte_end":59722,"line_start":1684,"line_end":1684,"column_start":19,"column_end":49},"name":"create_shader_module_unchecked","qualname":"<Device>::create_shader_module_unchecked","value":"pub unsafe fn create_shader_module_unchecked(&Self, &ShaderModuleDescriptor)\n-> ShaderModule","parent":null,"children":[],"decl_id":null,"docs":" Creates a shader module from either SPIR-V or WGSL source code without runtime checks.","sig":null,"attributes":[{"value":"/ Creates a shader module from either SPIR-V or WGSL source code without runtime checks.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":59136,"byte_end":59226,"line_start":1674,"line_end":1674,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":59231,"byte_end":59234,"line_start":1675,"line_end":1675,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":59239,"byte_end":59251,"line_start":1676,"line_end":1676,"column_start":5,"column_end":17}},{"value":"/ In contrast with [`create_shader_module`](Self::create_shader_module) this function","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":59256,"byte_end":59343,"line_start":1677,"line_end":1677,"column_start":5,"column_end":92}},{"value":"/ creates a shader module without runtime checks which allows shaders to perform","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":59348,"byte_end":59430,"line_start":1678,"line_end":1678,"column_start":5,"column_end":87}},{"value":"/ operations which can lead to undefined behavior like indexing out of bounds, thus it's","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":59435,"byte_end":59525,"line_start":1679,"line_end":1679,"column_start":5,"column_end":95}},{"value":"/ the caller responsibility to pass a shader which doesn't perform any of this","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":59530,"byte_end":59610,"line_start":1680,"line_end":1680,"column_start":5,"column_end":85}},{"value":"/ operations.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":59615,"byte_end":59630,"line_start":1681,"line_end":1681,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":59635,"byte_end":59638,"line_start":1682,"line_end":1682,"column_start":5,"column_end":8}},{"value":"/ This has no effect on web.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":59643,"byte_end":59673,"line_start":1683,"line_end":1683,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1247},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":60473,"byte_end":60499,"line_start":1707,"line_end":1707,"column_start":19,"column_end":45},"name":"create_shader_module_spirv","qualname":"<Device>::create_shader_module_spirv","value":"pub unsafe fn create_shader_module_spirv(&Self, &ShaderModuleDescriptorSpirV)\n-> ShaderModule","parent":null,"children":[],"decl_id":null,"docs":" Creates a shader module from SPIR-V binary directly.","sig":null,"attributes":[{"value":"/ Creates a shader module from SPIR-V binary directly.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":60096,"byte_end":60152,"line_start":1699,"line_end":1699,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":60157,"byte_end":60160,"line_start":1700,"line_end":1700,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":60165,"byte_end":60177,"line_start":1701,"line_end":1701,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":60182,"byte_end":60185,"line_start":1702,"line_end":1702,"column_start":5,"column_end":8}},{"value":"/ This function passes binary data to the backend as-is and can potentially result in a","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":60190,"byte_end":60279,"line_start":1703,"line_end":1703,"column_start":5,"column_end":94}},{"value":"/ driver crash or bogus behaviour. No attempt is made to ensure that data is valid SPIR-V.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":60284,"byte_end":60376,"line_start":1704,"line_end":1704,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":60381,"byte_end":60384,"line_start":1705,"line_end":1705,"column_start":5,"column_end":8}},{"value":"/ See also [`include_spirv_raw!`] and [`util::make_spirv_raw`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":60389,"byte_end":60454,"line_start":1706,"line_end":1706,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":60820,"byte_end":60842,"line_start":1718,"line_end":1718,"column_start":12,"column_end":34},"name":"create_command_encoder","qualname":"<Device>::create_command_encoder","value":"pub fn create_command_encoder(&Self, &CommandEncoderDescriptor)\n-> CommandEncoder","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty [`CommandEncoder`].\n","sig":null,"attributes":[{"value":"/ Creates an empty [`CommandEncoder`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":60768,"byte_end":60808,"line_start":1717,"line_end":1717,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":61211,"byte_end":61239,"line_start":1730,"line_end":1730,"column_start":12,"column_end":40},"name":"create_render_bundle_encoder","qualname":"<Device>::create_render_bundle_encoder","value":"pub fn create_render_bundle_encoder(&Self, &RenderBundleEncoderDescriptor)\n-> RenderBundleEncoder","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty [`RenderBundleEncoder`].\n","sig":null,"attributes":[{"value":"/ Creates an empty [`RenderBundleEncoder`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":61154,"byte_end":61199,"line_start":1729,"line_end":1729,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":61633,"byte_end":61650,"line_start":1743,"line_end":1743,"column_start":12,"column_end":29},"name":"create_bind_group","qualname":"<Device>::create_bind_group","value":"pub fn create_bind_group(&Self, &BindGroupDescriptor) -> BindGroup","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`BindGroup`].\n","sig":null,"attributes":[{"value":"/ Creates a new [`BindGroup`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":61589,"byte_end":61621,"line_start":1742,"line_end":1742,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":61919,"byte_end":61943,"line_start":1751,"line_end":1751,"column_start":12,"column_end":36},"name":"create_bind_group_layout","qualname":"<Device>::create_bind_group_layout","value":"pub fn create_bind_group_layout(&Self, &BindGroupLayoutDescriptor)\n-> BindGroupLayout","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`BindGroupLayout`].\n","sig":null,"attributes":[{"value":"/ Creates a [`BindGroupLayout`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":61873,"byte_end":61907,"line_start":1750,"line_end":1750,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":62236,"byte_end":62258,"line_start":1759,"line_end":1759,"column_start":12,"column_end":34},"name":"create_pipeline_layout","qualname":"<Device>::create_pipeline_layout","value":"pub fn create_pipeline_layout(&Self, &PipelineLayoutDescriptor)\n-> PipelineLayout","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`PipelineLayout`].\n","sig":null,"attributes":[{"value":"/ Creates a [`PipelineLayout`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":62191,"byte_end":62224,"line_start":1758,"line_end":1758,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":62546,"byte_end":62568,"line_start":1767,"line_end":1767,"column_start":12,"column_end":34},"name":"create_render_pipeline","qualname":"<Device>::create_render_pipeline","value":"pub fn create_render_pipeline(&Self, &RenderPipelineDescriptor)\n-> RenderPipeline","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`RenderPipeline`].\n","sig":null,"attributes":[{"value":"/ Creates a [`RenderPipeline`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":62501,"byte_end":62534,"line_start":1766,"line_end":1766,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":62857,"byte_end":62880,"line_start":1775,"line_end":1775,"column_start":12,"column_end":35},"name":"create_compute_pipeline","qualname":"<Device>::create_compute_pipeline","value":"pub fn create_compute_pipeline(&Self, &ComputePipelineDescriptor)\n-> ComputePipeline","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`ComputePipeline`].\n","sig":null,"attributes":[{"value":"/ Creates a [`ComputePipeline`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":62811,"byte_end":62845,"line_start":1774,"line_end":1774,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":63164,"byte_end":63177,"line_start":1783,"line_end":1783,"column_start":12,"column_end":25},"name":"create_buffer","qualname":"<Device>::create_buffer","value":"pub fn create_buffer(&Self, &BufferDescriptor) -> Buffer","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`Buffer`].\n","sig":null,"attributes":[{"value":"/ Creates a [`Buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":63127,"byte_end":63152,"line_start":1782,"line_end":1782,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1256},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":63737,"byte_end":63751,"line_start":1799,"line_end":1799,"column_start":12,"column_end":26},"name":"create_texture","qualname":"<Device>::create_texture","value":"pub fn create_texture(&Self, &TextureDescriptor) -> Texture","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Texture`].","sig":null,"attributes":[{"value":"/ Creates a new [`Texture`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":63627,"byte_end":63657,"line_start":1796,"line_end":1796,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":63662,"byte_end":63665,"line_start":1797,"line_end":1797,"column_start":5,"column_end":8}},{"value":"/ `desc` specifies the general format of the texture.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":63670,"byte_end":63725,"line_start":1798,"line_end":1798,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":64263,"byte_end":64286,"line_start":1814,"line_end":1814,"column_start":19,"column_end":42},"name":"create_texture_from_hal","qualname":"<Device>::create_texture_from_hal","value":"pub unsafe fn create_texture_from_hal<A: wgc::hub::HalApi>(&Self, A::Texture,\n                                                           &TextureDescriptor)\n-> Texture","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`Texture`] from a wgpu-hal Texture.","sig":null,"attributes":[{"value":"/ Creates a [`Texture`] from a wgpu-hal Texture.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":63990,"byte_end":64040,"line_start":1807,"line_end":1807,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":64045,"byte_end":64048,"line_start":1808,"line_end":1808,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":64053,"byte_end":64065,"line_start":1809,"line_end":1809,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":64070,"byte_end":64073,"line_start":1810,"line_end":1810,"column_start":5,"column_end":8}},{"value":"/ - `hal_texture` must be created from this device internal handle","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":64078,"byte_end":64146,"line_start":1811,"line_end":1811,"column_start":5,"column_end":73}},{"value":"/ - `hal_texture` must be created respecting `desc`","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":64151,"byte_end":64204,"line_start":1812,"line_end":1812,"column_start":5,"column_end":58}},{"value":"cfg(not(target_arch = \"wasm32\"))","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":64209,"byte_end":64244,"line_start":1813,"line_end":1813,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":64748,"byte_end":64762,"line_start":1831,"line_end":1831,"column_start":12,"column_end":26},"name":"create_sampler","qualname":"<Device>::create_sampler","value":"pub fn create_sampler(&Self, &SamplerDescriptor) -> Sampler","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Sampler`].","sig":null,"attributes":[{"value":"/ Creates a new [`Sampler`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":64644,"byte_end":64674,"line_start":1828,"line_end":1828,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":64679,"byte_end":64682,"line_start":1829,"line_end":1829,"column_start":5,"column_end":8}},{"value":"/ `desc` specifies the behavior of the sampler.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":64687,"byte_end":64736,"line_start":1830,"line_end":1830,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1260},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":65019,"byte_end":65035,"line_start":1839,"line_end":1839,"column_start":12,"column_end":28},"name":"create_query_set","qualname":"<Device>::create_query_set","value":"pub fn create_query_set(&Self, &QuerySetDescriptor) -> QuerySet","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`QuerySet`].\n","sig":null,"attributes":[{"value":"/ Creates a new [`QuerySet`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":64976,"byte_end":65007,"line_start":1838,"line_end":1838,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":65333,"byte_end":65352,"line_start":1847,"line_end":1847,"column_start":12,"column_end":31},"name":"on_uncaptured_error","qualname":"<Device>::on_uncaptured_error","value":"pub fn on_uncaptured_error<impl UncapturedErrorHandler: UncapturedErrorHandler>(&Self,\n                                                                                impl UncapturedErrorHandler)","parent":null,"children":[],"decl_id":null,"docs":" Set a callback for errors that are not handled in error scopes.\n","sig":null,"attributes":[{"value":"/ Set a callback for errors that are not handled in error scopes.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":65254,"byte_end":65321,"line_start":1846,"line_end":1846,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":65516,"byte_end":65529,"line_start":1852,"line_end":1852,"column_start":12,"column_end":25},"name":"start_capture","qualname":"<Device>::start_capture","value":"pub fn start_capture(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Starts frame capture.\n","sig":null,"attributes":[{"value":"/ Starts frame capture.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":65479,"byte_end":65504,"line_start":1851,"line_end":1851,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":65650,"byte_end":65662,"line_start":1857,"line_end":1857,"column_start":12,"column_end":24},"name":"stop_capture","qualname":"<Device>::stop_capture","value":"pub fn stop_capture(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Stops frame capture.\n","sig":null,"attributes":[{"value":"/ Stops frame capture.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":65614,"byte_end":65638,"line_start":1856,"line_end":1856,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":2035},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":65975,"byte_end":65993,"line_start":1872,"line_end":1872,"column_start":12,"column_end":30},"name":"RequestDeviceError","qualname":"::RequestDeviceError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Requesting a device failed.\n","sig":null,"attributes":[{"value":"/ Requesting a device failed.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":65893,"byte_end":65924,"line_start":1870,"line_end":1870,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2047},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66313,"byte_end":66329,"line_start":1884,"line_end":1884,"column_start":12,"column_end":28},"name":"BufferAsyncError","qualname":"::BufferAsyncError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error occurred when trying to async map a buffer.\n","sig":null,"attributes":[{"value":"/ Error occurred when trying to async map a buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66209,"byte_end":66262,"line_start":1882,"line_end":1882,"column_start":1,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2060},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66684,"byte_end":66688,"line_start":1898,"line_end":1898,"column_start":5,"column_end":9},"name":"Read","qualname":"::MapMode::Read","value":"MapMode::Read","parent":{"krate":0,"index":2059},"children":[],"decl_id":null,"docs":" Map only for reading\n","sig":null,"attributes":[{"value":"/ Map only for reading","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66655,"byte_end":66679,"line_start":1897,"line_end":1897,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2062},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66723,"byte_end":66728,"line_start":1900,"line_end":1900,"column_start":5,"column_end":10},"name":"Write","qualname":"::MapMode::Write","value":"MapMode::Write","parent":{"krate":0,"index":2059},"children":[],"decl_id":null,"docs":" Map only for writing\n","sig":null,"attributes":[{"value":"/ Map only for writing","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66694,"byte_end":66718,"line_start":1899,"line_end":1899,"column_start":5,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":2059},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66641,"byte_end":66648,"line_start":1896,"line_end":1896,"column_start":10,"column_end":17},"name":"MapMode","qualname":"::MapMode","value":"pub enum MapMode { Read, Write, }","parent":null,"children":[{"krate":0,"index":2060},{"krate":0,"index":2062}],"decl_id":null,"docs":" Type of buffer mapping.\n","sig":null,"attributes":[{"value":"/ Type of buffer mapping.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66563,"byte_end":66590,"line_start":1894,"line_end":1894,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":2072},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":68334,"byte_end":68344,"line_start":1955,"line_end":1955,"column_start":12,"column_end":22},"name":"BufferView","qualname":"::BufferView","value":"BufferView {  }","parent":null,"children":[{"krate":0,"index":2074},{"krate":0,"index":2075}],"decl_id":null,"docs":" Read only view into a mapped buffer.\n","sig":null,"attributes":[{"value":"/ Read only view into a mapped buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":68265,"byte_end":68305,"line_start":1953,"line_end":1953,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":2079},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":68479,"byte_end":68492,"line_start":1962,"line_end":1962,"column_start":12,"column_end":25},"name":"BufferViewMut","qualname":"::BufferViewMut","value":"BufferViewMut {  }","parent":null,"children":[{"krate":0,"index":2081},{"krate":0,"index":2082},{"krate":0,"index":2083}],"decl_id":null,"docs":" Write only view into mapped buffer.\n","sig":null,"attributes":[{"value":"/ Write only view into mapped buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":68411,"byte_end":68450,"line_start":1960,"line_end":1960,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":69864,"byte_end":69881,"line_start":2029,"line_end":2029,"column_start":12,"column_end":29},"name":"as_entire_binding","qualname":"<Buffer>::as_entire_binding","value":"pub fn as_entire_binding(&Self) -> BindingResource","parent":null,"children":[],"decl_id":null,"docs":" Return the binding view of the entire buffer.\n","sig":null,"attributes":[{"value":"/ Return the binding view of the entire buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":69803,"byte_end":69852,"line_start":2028,"line_end":2028,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":70047,"byte_end":70071,"line_start":2034,"line_end":2034,"column_start":12,"column_end":36},"name":"as_entire_buffer_binding","qualname":"<Buffer>::as_entire_buffer_binding","value":"pub fn as_entire_buffer_binding(&Self) -> BufferBinding","parent":null,"children":[],"decl_id":null,"docs":" Return the binding view of the entire buffer.\n","sig":null,"attributes":[{"value":"/ Return the binding view of the entire buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":69986,"byte_end":70035,"line_start":2033,"line_end":2033,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":70418,"byte_end":70423,"line_start":2044,"line_end":2044,"column_start":12,"column_end":17},"name":"slice","qualname":"<Buffer>::slice","value":"pub fn slice<S: RangeBounds<BufferAddress>>(&Self, S) -> BufferSlice","parent":null,"children":[],"decl_id":null,"docs":" Use only a portion of this Buffer for a given operation. Choosing a range with no end\n will use the rest of the buffer. Using a totally unbounded range will use the entire buffer.\n","sig":null,"attributes":[{"value":"/ Use only a portion of this Buffer for a given operation. Choosing a range with no end","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":70216,"byte_end":70305,"line_start":2042,"line_end":2042,"column_start":5,"column_end":94}},{"value":"/ will use the rest of the buffer. Using a totally unbounded range will use the entire buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":70310,"byte_end":70406,"line_start":2043,"line_end":2043,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":70748,"byte_end":70753,"line_start":2054,"line_end":2054,"column_start":12,"column_end":17},"name":"unmap","qualname":"<Buffer>::unmap","value":"pub fn unmap(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Flushes any pending write operations and unmaps the buffer from host memory.\n","sig":null,"attributes":[{"value":"/ Flushes any pending write operations and unmaps the buffer from host memory.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":70656,"byte_end":70736,"line_start":2053,"line_end":2053,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":70948,"byte_end":70955,"line_start":2060,"line_end":2060,"column_start":12,"column_end":19},"name":"destroy","qualname":"<Buffer>::destroy","value":"pub fn destroy(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Destroy the associated native resources as soon as possible.\n","sig":null,"attributes":[{"value":"/ Destroy the associated native resources as soon as possible.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":70872,"byte_end":70936,"line_start":2059,"line_end":2059,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":71624,"byte_end":71633,"line_start":2076,"line_end":2076,"column_start":12,"column_end":21},"name":"map_async","qualname":"<BufferSlice>::map_async","value":"pub fn map_async(&Self, MapMode) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Map the buffer. Buffer is ready to map once the future is resolved.","sig":null,"attributes":[{"value":"/ Map the buffer. Buffer is ready to map once the future is resolved.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":71101,"byte_end":71172,"line_start":2068,"line_end":2068,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":71177,"byte_end":71180,"line_start":2069,"line_end":2069,"column_start":5,"column_end":8}},{"value":"/ For the future to complete, `device.poll(...)` must be called elsewhere in the runtime, possibly integrated","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":71185,"byte_end":71296,"line_start":2070,"line_end":2070,"column_start":5,"column_end":116}},{"value":"/ into an event loop, run on a separate thread, or continually polled in the same task runtime that this","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":71301,"byte_end":71407,"line_start":2071,"line_end":2071,"column_start":5,"column_end":111}},{"value":"/ future will be run on.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":71412,"byte_end":71438,"line_start":2072,"line_end":2072,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":71443,"byte_end":71446,"line_start":2073,"line_end":2073,"column_start":5,"column_end":8}},{"value":"/ It's expected that wgpu will eventually supply its own event loop infrastructure that will be easy to integrate","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":71451,"byte_end":71566,"line_start":2074,"line_end":2074,"column_start":5,"column_end":120}},{"value":"/ into other event loops, like winit's.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":71571,"byte_end":71612,"line_start":2075,"line_end":2075,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":72501,"byte_end":72517,"line_start":2103,"line_end":2103,"column_start":12,"column_end":28},"name":"get_mapped_range","qualname":"<BufferSlice>::get_mapped_range","value":"pub fn get_mapped_range(&Self) -> BufferView","parent":null,"children":[],"decl_id":null,"docs":" Synchronously and immediately map a buffer for reading. If the buffer is not immediately mappable\n through [`BufferDescriptor::mapped_at_creation`] or [`BufferSlice::map_async`], will panic.\n","sig":null,"attributes":[{"value":"/ Synchronously and immediately map a buffer for reading. If the buffer is not immediately mappable","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":72288,"byte_end":72389,"line_start":2101,"line_end":2101,"column_start":5,"column_end":106}},{"value":"/ through [`BufferDescriptor::mapped_at_creation`] or [`BufferSlice::map_async`], will panic.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":72394,"byte_end":72489,"line_start":2102,"line_end":2102,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":73047,"byte_end":73067,"line_start":2115,"line_end":2115,"column_start":12,"column_end":32},"name":"get_mapped_range_mut","qualname":"<BufferSlice>::get_mapped_range_mut","value":"pub fn get_mapped_range_mut(&Self) -> BufferViewMut","parent":null,"children":[],"decl_id":null,"docs":" Synchronously and immediately map a buffer for writing. If the buffer is not immediately mappable\n through [`BufferDescriptor::mapped_at_creation`] or [`BufferSlice::map_async`], will panic.\n","sig":null,"attributes":[{"value":"/ Synchronously and immediately map a buffer for writing. If the buffer is not immediately mappable","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":72834,"byte_end":72935,"line_start":2113,"line_end":2113,"column_start":5,"column_end":106}},{"value":"/ through [`BufferDescriptor::mapped_at_creation`] or [`BufferSlice::map_async`], will panic.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":72940,"byte_end":73035,"line_start":2114,"line_end":2114,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":73998,"byte_end":74004,"line_start":2146,"line_end":2146,"column_start":19,"column_end":25},"name":"as_hal","qualname":"<Texture>::as_hal","value":"pub unsafe fn as_hal<A: wgc::hub::HalApi,\n                     impl FnOnce(Option<&A::Texture>): FnOnce(Option<&A::Texture>)\n                     -> ()>(&Self, impl FnOnce(Option<&A::Texture>))","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner hal Texture using a callback. The hal texture will be `None` if the\n backend type argument does not match with this wgpu Texture","sig":null,"attributes":[{"value":"/ Returns the inner hal Texture using a callback. The hal texture will be `None` if the","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":73663,"byte_end":73752,"line_start":2139,"line_end":2139,"column_start":5,"column_end":94}},{"value":"/ backend type argument does not match with this wgpu Texture","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":73757,"byte_end":73820,"line_start":2140,"line_end":2140,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":73825,"byte_end":73828,"line_start":2141,"line_end":2141,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":73833,"byte_end":73845,"line_start":2142,"line_end":2142,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":73850,"byte_end":73853,"line_start":2143,"line_end":2143,"column_start":5,"column_end":8}},{"value":"/ - The raw handle obtained from the hal Texture must not be manually destroyed","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":73858,"byte_end":73939,"line_start":2144,"line_end":2144,"column_start":5,"column_end":86}},{"value":"cfg(not(target_arch = \"wasm32\"))","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":73944,"byte_end":73979,"line_start":2145,"line_end":2145,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1314},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":74261,"byte_end":74272,"line_start":2155,"line_end":2155,"column_start":12,"column_end":23},"name":"create_view","qualname":"<Texture>::create_view","value":"pub fn create_view(&Self, &TextureViewDescriptor) -> TextureView","parent":null,"children":[],"decl_id":null,"docs":" Creates a view of this texture.\n","sig":null,"attributes":[{"value":"/ Creates a view of this texture.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":74214,"byte_end":74249,"line_start":2154,"line_end":2154,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1315},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":74572,"byte_end":74579,"line_start":2163,"line_end":2163,"column_start":12,"column_end":19},"name":"destroy","qualname":"<Texture>::destroy","value":"pub fn destroy(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Destroy the associated native resources as soon as possible.\n","sig":null,"attributes":[{"value":"/ Destroy the associated native resources as soon as possible.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":74496,"byte_end":74560,"line_start":2162,"line_end":2162,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":74734,"byte_end":74747,"line_start":2168,"line_end":2168,"column_start":12,"column_end":25},"name":"as_image_copy","qualname":"<Texture>::as_image_copy","value":"pub fn as_image_copy(&Self) -> ImageCopyTexture","parent":null,"children":[],"decl_id":null,"docs":" Make an `ImageCopyTexture` representing the whole texture.\n","sig":null,"attributes":[{"value":"/ Make an `ImageCopyTexture` representing the whole texture.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":74660,"byte_end":74722,"line_start":2167,"line_end":2167,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":75406,"byte_end":75412,"line_start":2196,"line_end":2196,"column_start":12,"column_end":18},"name":"finish","qualname":"<CommandEncoder>::finish","value":"pub fn finish(Self) -> CommandBuffer","parent":null,"children":[],"decl_id":null,"docs":" Finishes recording and returns a [`CommandBuffer`] that can be submitted for execution.\n","sig":null,"attributes":[{"value":"/ Finishes recording and returns a [`CommandBuffer`] that can be submitted for execution.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":75303,"byte_end":75394,"line_start":2195,"line_end":2195,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":75826,"byte_end":75843,"line_start":2209,"line_end":2209,"column_start":12,"column_end":29},"name":"begin_render_pass","qualname":"<CommandEncoder>::begin_render_pass","value":"pub fn begin_render_pass<'a>(&'a mut Self, &RenderPassDescriptor)\n-> RenderPass","parent":null,"children":[],"decl_id":null,"docs":" Begins recording of a render pass.","sig":null,"attributes":[{"value":"/ Begins recording of a render pass.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":75678,"byte_end":75716,"line_start":2206,"line_end":2206,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":75721,"byte_end":75724,"line_start":2207,"line_end":2207,"column_start":5,"column_end":8}},{"value":"/ This function returns a [`RenderPass`] object which records a single render pass.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":75729,"byte_end":75814,"line_start":2208,"line_end":2208,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1325},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":76291,"byte_end":76309,"line_start":2223,"line_end":2223,"column_start":12,"column_end":30},"name":"begin_compute_pass","qualname":"<CommandEncoder>::begin_compute_pass","value":"pub fn begin_compute_pass(&mut Self, &ComputePassDescriptor) -> ComputePass","parent":null,"children":[],"decl_id":null,"docs":" Begins recording of a compute pass.","sig":null,"attributes":[{"value":"/ Begins recording of a compute pass.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":76140,"byte_end":76179,"line_start":2220,"line_end":2220,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":76184,"byte_end":76187,"line_start":2221,"line_end":2221,"column_start":5,"column_end":8}},{"value":"/ This function returns a [`ComputePass`] object which records a single compute pass.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":76192,"byte_end":76279,"line_start":2222,"line_end":2222,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":76813,"byte_end":76834,"line_start":2238,"line_end":2238,"column_start":12,"column_end":33},"name":"copy_buffer_to_buffer","qualname":"<CommandEncoder>::copy_buffer_to_buffer","value":"pub fn copy_buffer_to_buffer(&mut Self, &Buffer, BufferAddress, &Buffer,\n                             BufferAddress, BufferAddress)","parent":null,"children":[],"decl_id":null,"docs":" Copy data from one buffer to another.","sig":null,"attributes":[{"value":"/ Copy data from one buffer to another.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":76568,"byte_end":76609,"line_start":2231,"line_end":2231,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":76614,"byte_end":76617,"line_start":2232,"line_end":2232,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":76622,"byte_end":76634,"line_start":2233,"line_end":2233,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":76639,"byte_end":76642,"line_start":2234,"line_end":2234,"column_start":5,"column_end":8}},{"value":"/ - Buffer offsets or copy size not a multiple of [`COPY_BUFFER_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":76647,"byte_end":76725,"line_start":2235,"line_end":2235,"column_start":5,"column_end":83}},{"value":"/ - Copy would overrun buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":76730,"byte_end":76762,"line_start":2236,"line_end":2236,"column_start":5,"column_end":37}},{"value":"/ - Copy within the same buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":76767,"byte_end":76801,"line_start":2237,"line_end":2237,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":77567,"byte_end":77589,"line_start":2264,"line_end":2264,"column_start":12,"column_end":34},"name":"copy_buffer_to_texture","qualname":"<CommandEncoder>::copy_buffer_to_texture","value":"pub fn copy_buffer_to_texture(&mut Self, ImageCopyBuffer, ImageCopyTexture,\n                              Extent3d)","parent":null,"children":[],"decl_id":null,"docs":" Copy data from a buffer to a texture.","sig":null,"attributes":[{"value":"/ Copy data from a buffer to a texture.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":77313,"byte_end":77354,"line_start":2257,"line_end":2257,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":77359,"byte_end":77362,"line_start":2258,"line_end":2258,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":77367,"byte_end":77379,"line_start":2259,"line_end":2259,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":77384,"byte_end":77387,"line_start":2260,"line_end":2260,"column_start":5,"column_end":8}},{"value":"/ - Copy would overrun buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":77392,"byte_end":77424,"line_start":2261,"line_end":2261,"column_start":5,"column_end":37}},{"value":"/ - Copy would overrun texture.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":77429,"byte_end":77462,"line_start":2262,"line_end":2262,"column_start":5,"column_end":38}},{"value":"/ - `source.layout.bytes_per_row` isn't divisible by [`COPY_BYTES_PER_ROW_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":77467,"byte_end":77555,"line_start":2263,"line_end":2263,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":78187,"byte_end":78209,"line_start":2286,"line_end":2286,"column_start":12,"column_end":34},"name":"copy_texture_to_buffer","qualname":"<CommandEncoder>::copy_texture_to_buffer","value":"pub fn copy_texture_to_buffer(&mut Self, ImageCopyTexture, ImageCopyBuffer,\n                              Extent3d)","parent":null,"children":[],"decl_id":null,"docs":" Copy data from a texture to a buffer.","sig":null,"attributes":[{"value":"/ Copy data from a texture to a buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":77933,"byte_end":77974,"line_start":2279,"line_end":2279,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":77979,"byte_end":77982,"line_start":2280,"line_end":2280,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":77987,"byte_end":77999,"line_start":2281,"line_end":2281,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":78004,"byte_end":78007,"line_start":2282,"line_end":2282,"column_start":5,"column_end":8}},{"value":"/ - Copy would overrun buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":78012,"byte_end":78044,"line_start":2283,"line_end":2283,"column_start":5,"column_end":37}},{"value":"/ - Copy would overrun texture.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":78049,"byte_end":78082,"line_start":2284,"line_end":2284,"column_start":5,"column_end":38}},{"value":"/ - `source.layout.bytes_per_row` isn't divisible by [`COPY_BYTES_PER_ROW_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":78087,"byte_end":78175,"line_start":2285,"line_end":2285,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1329},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":78816,"byte_end":78839,"line_start":2308,"line_end":2308,"column_start":12,"column_end":35},"name":"copy_texture_to_texture","qualname":"<CommandEncoder>::copy_texture_to_texture","value":"pub fn copy_texture_to_texture(&mut Self, ImageCopyTexture, ImageCopyTexture,\n                               Extent3d)","parent":null,"children":[],"decl_id":null,"docs":" Copy data from one texture to another.","sig":null,"attributes":[{"value":"/ Copy data from one texture to another.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":78553,"byte_end":78595,"line_start":2301,"line_end":2301,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":78600,"byte_end":78603,"line_start":2302,"line_end":2302,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":78608,"byte_end":78620,"line_start":2303,"line_end":2303,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":78625,"byte_end":78628,"line_start":2304,"line_end":2304,"column_start":5,"column_end":8}},{"value":"/ - Textures are not the same type","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":78633,"byte_end":78669,"line_start":2305,"line_end":2305,"column_start":5,"column_end":41}},{"value":"/ - If a depth texture, or a multisampled texture, the entire texture must be copied","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":78674,"byte_end":78760,"line_start":2306,"line_end":2306,"column_start":5,"column_end":91}},{"value":"/ - Copy would overrun either texture","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":78765,"byte_end":78804,"line_start":2307,"line_end":2307,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79496,"byte_end":79509,"line_start":2332,"line_end":2332,"column_start":12,"column_end":25},"name":"clear_texture","qualname":"<CommandEncoder>::clear_texture","value":"pub fn clear_texture(&mut Self, &Texture, &ImageSubresourceRange)","parent":null,"children":[],"decl_id":null,"docs":" Clears texture to zero.","sig":null,"attributes":[{"value":"/ Clears texture to zero.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79185,"byte_end":79212,"line_start":2323,"line_end":2323,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79217,"byte_end":79220,"line_start":2324,"line_end":2324,"column_start":5,"column_end":8}},{"value":"/ Where possible it may be significantly more efficient to perform clears via render passes!","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79225,"byte_end":79319,"line_start":2325,"line_end":2325,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79324,"byte_end":79327,"line_start":2326,"line_end":2326,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79332,"byte_end":79344,"line_start":2327,"line_end":2327,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79349,"byte_end":79352,"line_start":2328,"line_end":2328,"column_start":5,"column_end":8}},{"value":"/ - `CLEAR_COMMANDS` extension not enabled","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79357,"byte_end":79401,"line_start":2329,"line_end":2329,"column_start":5,"column_end":49}},{"value":"/ - Texture does not have `COPY_DST` usage.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79406,"byte_end":79451,"line_start":2330,"line_end":2330,"column_start":5,"column_end":50}},{"value":"/ - Range is out of bounds","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79456,"byte_end":79484,"line_start":2331,"line_end":2331,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1331},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79976,"byte_end":79988,"line_start":2348,"line_end":2348,"column_start":12,"column_end":24},"name":"clear_buffer","qualname":"<CommandEncoder>::clear_buffer","value":"pub fn clear_buffer(&mut Self, &Buffer, BufferAddress, Option<BufferSize>)","parent":null,"children":[],"decl_id":null,"docs":" Clears buffer to zero.","sig":null,"attributes":[{"value":"/ Clears buffer to zero.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79774,"byte_end":79800,"line_start":2341,"line_end":2341,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79805,"byte_end":79808,"line_start":2342,"line_end":2342,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79813,"byte_end":79825,"line_start":2343,"line_end":2343,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79830,"byte_end":79833,"line_start":2344,"line_end":2344,"column_start":5,"column_end":8}},{"value":"/ - `CLEAR_COMMANDS` extension not enabled","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79838,"byte_end":79882,"line_start":2345,"line_end":2345,"column_start":5,"column_end":49}},{"value":"/ - Buffer does not have `COPY_DST` usage.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79887,"byte_end":79931,"line_start":2346,"line_end":2346,"column_start":5,"column_end":49}},{"value":"/ - Range it out of bounds","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":79936,"byte_end":79964,"line_start":2347,"line_end":2347,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":80338,"byte_end":80357,"line_start":2364,"line_end":2364,"column_start":12,"column_end":31},"name":"insert_debug_marker","qualname":"<CommandEncoder>::insert_debug_marker","value":"pub fn insert_debug_marker(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Inserts debug marker.\n","sig":null,"attributes":[{"value":"/ Inserts debug marker.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":80301,"byte_end":80326,"line_start":2363,"line_end":2363,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1333},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":80595,"byte_end":80611,"line_start":2370,"line_end":2370,"column_start":12,"column_end":28},"name":"push_debug_group","qualname":"<CommandEncoder>::push_debug_group","value":"pub fn push_debug_group(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Start record commands and group it into debug marker group.\n","sig":null,"attributes":[{"value":"/ Start record commands and group it into debug marker group.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":80520,"byte_end":80583,"line_start":2369,"line_end":2369,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":80835,"byte_end":80850,"line_start":2376,"line_end":2376,"column_start":12,"column_end":27},"name":"pop_debug_group","qualname":"<CommandEncoder>::pop_debug_group","value":"pub fn pop_debug_group(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Stops command recording and creates debug group.\n","sig":null,"attributes":[{"value":"/ Stops command recording and creates debug group.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":80771,"byte_end":80823,"line_start":2375,"line_end":2375,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":81528,"byte_end":81543,"line_start":2391,"line_end":2391,"column_start":12,"column_end":27},"name":"write_timestamp","qualname":"<CommandEncoder>::write_timestamp","value":"pub fn write_timestamp(&mut Self, &QuerySet, u32)","parent":null,"children":[],"decl_id":null,"docs":" Issue a timestamp command at this point in the queue.\n The timestamp will be written to the specified query set, at the specified index.","sig":null,"attributes":[{"value":"/ Issue a timestamp command at this point in the queue.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":81111,"byte_end":81168,"line_start":2384,"line_end":2384,"column_start":5,"column_end":62}},{"value":"/ The timestamp will be written to the specified query set, at the specified index.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":81173,"byte_end":81258,"line_start":2385,"line_end":2385,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":81263,"byte_end":81266,"line_start":2386,"line_end":2386,"column_start":5,"column_end":8}},{"value":"/ Must be multiplied by [`Queue::get_timestamp_period`] to get","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":81271,"byte_end":81335,"line_start":2387,"line_end":2387,"column_start":5,"column_end":69}},{"value":"/ the value in nanoseconds. Absolute values have no meaning,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":81340,"byte_end":81402,"line_start":2388,"line_end":2388,"column_start":5,"column_end":67}},{"value":"/ but timestamps can be subtracted to get the time it takes","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":81407,"byte_end":81468,"line_start":2389,"line_end":2389,"column_start":5,"column_end":66}},{"value":"/ for a string of operations to complete.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":81473,"byte_end":81516,"line_start":2390,"line_end":2390,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":82160,"byte_end":82177,"line_start":2406,"line_end":2406,"column_start":12,"column_end":29},"name":"resolve_query_set","qualname":"<CommandEncoder>::resolve_query_set","value":"pub fn resolve_query_set(&mut Self, &QuerySet, Range<u32>, &Buffer,\n                         BufferAddress)","parent":null,"children":[],"decl_id":null,"docs":" Resolve a query set, writing the results into the supplied destination buffer.","sig":null,"attributes":[{"value":"/ Resolve a query set, writing the results into the supplied destination buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":81952,"byte_end":82034,"line_start":2403,"line_end":2403,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":82039,"byte_end":82042,"line_start":2404,"line_end":2404,"column_start":5,"column_end":8}},{"value":"/ Queries may be between 8 and 40 bytes each. See [`PipelineStatisticsTypes`] for more information.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":82047,"byte_end":82148,"line_start":2405,"line_end":2405,"column_start":5,"column_end":106}}]},{"kind":"Method","id":{"krate":0,"index":1341},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":83148,"byte_end":83162,"line_start":2432,"line_end":2432,"column_start":12,"column_end":26},"name":"set_bind_group","qualname":"<RenderPass>::set_bind_group","value":"pub fn set_bind_group(&mut Self, u32, &'a BindGroup, &[DynamicOffset])","parent":null,"children":[],"decl_id":null,"docs":" Sets the active bind group for a given bind group index. The bind group layout\n in the active pipeline when any `draw()` function is called must match the layout of this bind group.","sig":null,"attributes":[{"value":"/ Sets the active bind group for a given bind group index. The bind group layout","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":82678,"byte_end":82760,"line_start":2426,"line_end":2426,"column_start":5,"column_end":87}},{"value":"/ in the active pipeline when any `draw()` function is called must match the layout of this bind group.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":82765,"byte_end":82870,"line_start":2427,"line_end":2427,"column_start":5,"column_end":110}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":82875,"byte_end":82878,"line_start":2428,"line_end":2428,"column_start":5,"column_end":8}},{"value":"/ If the bind group have dynamic offsets, provide them in order of their declaration.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":82883,"byte_end":82970,"line_start":2429,"line_end":2429,"column_start":5,"column_end":92}},{"value":"/ These offsets have to be aligned to [`Limits::min_uniform_buffer_offset_alignment`]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":82975,"byte_end":83062,"line_start":2430,"line_end":2430,"column_start":5,"column_end":92}},{"value":"/ or [`Limits::min_storage_buffer_offset_alignment`] appropriately.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":83067,"byte_end":83136,"line_start":2431,"line_end":2431,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":83509,"byte_end":83521,"line_start":2444,"line_end":2444,"column_start":12,"column_end":24},"name":"set_pipeline","qualname":"<RenderPass>::set_pipeline","value":"pub fn set_pipeline(&mut Self, &'a RenderPipeline)","parent":null,"children":[],"decl_id":null,"docs":" Sets the active render pipeline.","sig":null,"attributes":[{"value":"/ Sets the active render pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":83374,"byte_end":83410,"line_start":2441,"line_end":2441,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":83415,"byte_end":83418,"line_start":2442,"line_end":2442,"column_start":5,"column_end":8}},{"value":"/ Subsequent draw calls will exhibit the behavior defined by `pipeline`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":83423,"byte_end":83497,"line_start":2443,"line_end":2443,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":83785,"byte_end":83803,"line_start":2451,"line_end":2451,"column_start":12,"column_end":30},"name":"set_blend_constant","qualname":"<RenderPass>::set_blend_constant","value":"pub fn set_blend_constant(&mut Self, Color)","parent":null,"children":[],"decl_id":null,"docs":" Sets the blend color as used by some of the blending modes.","sig":null,"attributes":[{"value":"/ Sets the blend color as used by some of the blending modes.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":83638,"byte_end":83701,"line_start":2448,"line_end":2448,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":83706,"byte_end":83709,"line_start":2449,"line_end":2449,"column_start":5,"column_end":8}},{"value":"/ Subsequent blending tests will test against this value.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":83714,"byte_end":83773,"line_start":2450,"line_end":2450,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":84085,"byte_end":84101,"line_start":2459,"line_end":2459,"column_start":12,"column_end":28},"name":"set_index_buffer","qualname":"<RenderPass>::set_index_buffer","value":"pub fn set_index_buffer(&mut Self, BufferSlice, IndexFormat)","parent":null,"children":[],"decl_id":null,"docs":" Sets the active index buffer.","sig":null,"attributes":[{"value":"/ Sets the active index buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":83884,"byte_end":83917,"line_start":2455,"line_end":2455,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":83922,"byte_end":83925,"line_start":2456,"line_end":2456,"column_start":5,"column_end":8}},{"value":"/ Subsequent calls to [`draw_indexed`](RenderPass::draw_indexed) on this [`RenderPass`] will","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":83930,"byte_end":84024,"line_start":2457,"line_end":2457,"column_start":5,"column_end":99}},{"value":"/ use `buffer` as the source index buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":84029,"byte_end":84073,"line_start":2458,"line_end":2458,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1345},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":84792,"byte_end":84809,"line_start":2479,"line_end":2479,"column_start":12,"column_end":29},"name":"set_vertex_buffer","qualname":"<RenderPass>::set_vertex_buffer","value":"pub fn set_vertex_buffer(&mut Self, u32, BufferSlice)","parent":null,"children":[],"decl_id":null,"docs":" Assign a vertex buffer to a slot.","sig":null,"attributes":[{"value":"/ Assign a vertex buffer to a slot.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":84386,"byte_end":84423,"line_start":2469,"line_end":2469,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":84428,"byte_end":84431,"line_start":2470,"line_end":2470,"column_start":5,"column_end":8}},{"value":"/ Subsequent calls to [`draw`] and [`draw_indexed`] on this","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":84436,"byte_end":84497,"line_start":2471,"line_end":2471,"column_start":5,"column_end":66}},{"value":"/ [`RenderPass`] will use `buffer` as one of the source vertex buffers.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":84502,"byte_end":84575,"line_start":2472,"line_end":2472,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":84580,"byte_end":84583,"line_start":2473,"line_end":2473,"column_start":5,"column_end":8}},{"value":"/ The `slot` refers to the index of the matching descriptor in","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":84588,"byte_end":84652,"line_start":2474,"line_end":2474,"column_start":5,"column_end":69}},{"value":"/ [`VertexState::buffers`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":84657,"byte_end":84686,"line_start":2475,"line_end":2475,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":84691,"byte_end":84694,"line_start":2476,"line_end":2476,"column_start":5,"column_end":8}},{"value":"/ [`draw`]: RenderPass::draw","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":84699,"byte_end":84729,"line_start":2477,"line_end":2477,"column_start":5,"column_end":35}},{"value":"/ [`draw_indexed`]: RenderPass::draw_indexed","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":84734,"byte_end":84780,"line_start":2478,"line_end":2478,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":85207,"byte_end":85223,"line_start":2492,"line_end":2492,"column_start":12,"column_end":28},"name":"set_scissor_rect","qualname":"<RenderPass>::set_scissor_rect","value":"pub fn set_scissor_rect(&mut Self, u32, u32, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Sets the scissor region.","sig":null,"attributes":[{"value":"/ Sets the scissor region.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":85071,"byte_end":85099,"line_start":2489,"line_end":2489,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":85104,"byte_end":85107,"line_start":2490,"line_end":2490,"column_start":5,"column_end":8}},{"value":"/ Subsequent draw calls will discard any fragments that fall outside this region.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":85112,"byte_end":85195,"line_start":2491,"line_end":2491,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":85463,"byte_end":85475,"line_start":2499,"line_end":2499,"column_start":12,"column_end":24},"name":"set_viewport","qualname":"<RenderPass>::set_viewport","value":"pub fn set_viewport(&mut Self, f32, f32, f32, f32, f32, f32)","parent":null,"children":[],"decl_id":null,"docs":" Sets the viewport region.","sig":null,"attributes":[{"value":"/ Sets the viewport region.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":85344,"byte_end":85373,"line_start":2496,"line_end":2496,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":85378,"byte_end":85381,"line_start":2497,"line_end":2497,"column_start":5,"column_end":8}},{"value":"/ Subsequent draw calls will draw any fragments in this region.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":85386,"byte_end":85451,"line_start":2498,"line_end":2498,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":85742,"byte_end":85763,"line_start":2506,"line_end":2506,"column_start":12,"column_end":33},"name":"set_stencil_reference","qualname":"<RenderPass>::set_stencil_reference","value":"pub fn set_stencil_reference(&mut Self, u32)","parent":null,"children":[],"decl_id":null,"docs":" Sets the stencil reference.","sig":null,"attributes":[{"value":"/ Sets the stencil reference.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":85628,"byte_end":85659,"line_start":2503,"line_end":2503,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":85664,"byte_end":85667,"line_start":2504,"line_end":2504,"column_start":5,"column_end":8}},{"value":"/ Subsequent stencil tests will test against this value.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":85672,"byte_end":85730,"line_start":2505,"line_end":2505,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":86013,"byte_end":86017,"line_start":2513,"line_end":2513,"column_start":12,"column_end":16},"name":"draw","qualname":"<RenderPass>::draw","value":"pub fn draw(&mut Self, Range<u32>, Range<u32>)","parent":null,"children":[],"decl_id":null,"docs":" Draws primitives from the active vertex buffer(s).","sig":null,"attributes":[{"value":"/ Draws primitives from the active vertex buffer(s).","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":85854,"byte_end":85908,"line_start":2510,"line_end":2510,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":85913,"byte_end":85916,"line_start":2511,"line_end":2511,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":85921,"byte_end":86001,"line_start":2512,"line_end":2512,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":86185,"byte_end":86204,"line_start":2518,"line_end":2518,"column_start":12,"column_end":31},"name":"insert_debug_marker","qualname":"<RenderPass>::insert_debug_marker","value":"pub fn insert_debug_marker(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Inserts debug marker.\n","sig":null,"attributes":[{"value":"/ Inserts debug marker.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":86148,"byte_end":86173,"line_start":2517,"line_end":2517,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":86361,"byte_end":86377,"line_start":2523,"line_end":2523,"column_start":12,"column_end":28},"name":"push_debug_group","qualname":"<RenderPass>::push_debug_group","value":"pub fn push_debug_group(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Start record commands and group it into debug marker group.\n","sig":null,"attributes":[{"value":"/ Start record commands and group it into debug marker group.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":86286,"byte_end":86349,"line_start":2522,"line_end":2522,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":86520,"byte_end":86535,"line_start":2528,"line_end":2528,"column_start":12,"column_end":27},"name":"pop_debug_group","qualname":"<RenderPass>::pop_debug_group","value":"pub fn pop_debug_group(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Stops command recording and creates debug group.\n","sig":null,"attributes":[{"value":"/ Stops command recording and creates debug group.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":86456,"byte_end":86508,"line_start":2527,"line_end":2527,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":86877,"byte_end":86889,"line_start":2536,"line_end":2536,"column_start":12,"column_end":24},"name":"draw_indexed","qualname":"<RenderPass>::draw_indexed","value":"pub fn draw_indexed(&mut Self, Range<u32>, i32, Range<u32>)","parent":null,"children":[],"decl_id":null,"docs":" Draws indexed primitives using the active index buffer and the active vertex buffers.","sig":null,"attributes":[{"value":"/ Draws indexed primitives using the active index buffer and the active vertex buffers.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":86595,"byte_end":86684,"line_start":2532,"line_end":2532,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":86689,"byte_end":86692,"line_start":2533,"line_end":2533,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderPass::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":86697,"byte_end":86791,"line_start":2534,"line_end":2534,"column_start":5,"column_end":99}},{"value":"/ vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":86796,"byte_end":86865,"line_start":2535,"line_end":2535,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87726,"byte_end":87739,"line_start":2555,"line_end":2555,"column_start":12,"column_end":25},"name":"draw_indirect","qualname":"<RenderPass>::draw_indirect","value":"pub fn draw_indirect(&mut Self, &'a Buffer, BufferAddress)","parent":null,"children":[],"decl_id":null,"docs":" Draws primitives from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","sig":null,"attributes":[{"value":"/ Draws primitives from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87058,"byte_end":87159,"line_start":2540,"line_end":2540,"column_start":5,"column_end":106}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87164,"byte_end":87167,"line_start":2541,"line_end":2541,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87172,"byte_end":87252,"line_start":2542,"line_end":2542,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87257,"byte_end":87260,"line_start":2543,"line_end":2543,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87265,"byte_end":87330,"line_start":2544,"line_end":2544,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87335,"byte_end":87338,"line_start":2545,"line_end":2545,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87343,"byte_end":87354,"line_start":2546,"line_end":2546,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87359,"byte_end":87373,"line_start":2547,"line_end":2547,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndirect {","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87378,"byte_end":87403,"line_start":2548,"line_end":2548,"column_start":5,"column_end":30}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87408,"byte_end":87469,"line_start":2549,"line_end":2549,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87474,"byte_end":87538,"line_start":2550,"line_end":2550,"column_start":5,"column_end":69}},{"value":"/     base_vertex: u32, // The Index of the first vertex to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87543,"byte_end":87610,"line_start":2551,"line_end":2551,"column_start":5,"column_end":72}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87615,"byte_end":87692,"line_start":2552,"line_end":2552,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87697,"byte_end":87702,"line_start":2553,"line_end":2553,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87707,"byte_end":87714,"line_start":2554,"line_end":2554,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88812,"byte_end":88833,"line_start":2577,"line_end":2577,"column_start":12,"column_end":33},"name":"draw_indexed_indirect","qualname":"<RenderPass>::draw_indexed_indirect","value":"pub fn draw_indexed_indirect(&mut Self, &'a Buffer, BufferAddress)","parent":null,"children":[],"decl_id":null,"docs":" Draws indexed primitives using the active index buffer and the active vertex buffers,\n based on the contents of the `indirect_buffer`.","sig":null,"attributes":[{"value":"/ Draws indexed primitives using the active index buffer and the active vertex buffers,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87894,"byte_end":87983,"line_start":2559,"line_end":2559,"column_start":5,"column_end":94}},{"value":"/ based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":87988,"byte_end":88039,"line_start":2560,"line_end":2560,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88044,"byte_end":88047,"line_start":2561,"line_end":2561,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderPass::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88052,"byte_end":88146,"line_start":2562,"line_end":2562,"column_start":5,"column_end":99}},{"value":"/ vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88151,"byte_end":88220,"line_start":2563,"line_end":2563,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88225,"byte_end":88228,"line_start":2564,"line_end":2564,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88233,"byte_end":88298,"line_start":2565,"line_end":2565,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88303,"byte_end":88306,"line_start":2566,"line_end":2566,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88311,"byte_end":88322,"line_start":2567,"line_end":2567,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88327,"byte_end":88341,"line_start":2568,"line_end":2568,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndexedIndirect {","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88346,"byte_end":88378,"line_start":2569,"line_end":2569,"column_start":5,"column_end":37}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88383,"byte_end":88444,"line_start":2570,"line_end":2570,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88449,"byte_end":88513,"line_start":2571,"line_end":2571,"column_start":5,"column_end":69}},{"value":"/     base_index: u32, // The base index within the index buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88518,"byte_end":88585,"line_start":2572,"line_end":2572,"column_start":5,"column_end":72}},{"value":"/     vertex_offset: i32, // The value added to the vertex index before indexing into the vertex buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88590,"byte_end":88696,"line_start":2573,"line_end":2573,"column_start":5,"column_end":111}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88701,"byte_end":88778,"line_start":2574,"line_end":2574,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88783,"byte_end":88788,"line_start":2575,"line_end":2575,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":88793,"byte_end":88800,"line_start":2576,"line_end":2576,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89170,"byte_end":89185,"line_start":2588,"line_end":2588,"column_start":12,"column_end":27},"name":"execute_bundles","qualname":"<RenderPass>::execute_bundles","value":"pub fn execute_bundles<I: Iterator<Item = &'a RenderBundle>>(&mut Self, I)","parent":null,"children":[],"decl_id":null,"docs":" Execute a [render bundle][RenderBundle], which is a set of pre-recorded commands\n that can be run together.\n","sig":null,"attributes":[{"value":"/ Execute a [render bundle][RenderBundle], which is a set of pre-recorded commands","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89040,"byte_end":89124,"line_start":2586,"line_end":2586,"column_start":5,"column_end":89}},{"value":"/ that can be run together.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89129,"byte_end":89158,"line_start":2587,"line_end":2587,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90281,"byte_end":90300,"line_start":2614,"line_end":2614,"column_start":12,"column_end":31},"name":"multi_draw_indirect","qualname":"<RenderPass>::multi_draw_indirect","value":"pub fn multi_draw_indirect(&mut Self, &'a Buffer, BufferAddress, u32)","parent":null,"children":[],"decl_id":null,"docs":" Dispatches multiple draw calls from the active vertex buffer(s) based on the contents of the `indirect_buffer`.\n `count` draw calls are issued.","sig":null,"attributes":[{"value":"/ Dispatches multiple draw calls from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89487,"byte_end":89602,"line_start":2596,"line_end":2596,"column_start":5,"column_end":120}},{"value":"/ `count` draw calls are issued.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89607,"byte_end":89641,"line_start":2597,"line_end":2597,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89646,"byte_end":89649,"line_start":2598,"line_end":2598,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89654,"byte_end":89734,"line_start":2599,"line_end":2599,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89739,"byte_end":89742,"line_start":2600,"line_end":2600,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89747,"byte_end":89812,"line_start":2601,"line_end":2601,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89817,"byte_end":89820,"line_start":2602,"line_end":2602,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89825,"byte_end":89836,"line_start":2603,"line_end":2603,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89841,"byte_end":89855,"line_start":2604,"line_end":2604,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndirect {","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89860,"byte_end":89885,"line_start":2605,"line_end":2605,"column_start":5,"column_end":30}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89890,"byte_end":89951,"line_start":2606,"line_end":2606,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89956,"byte_end":90020,"line_start":2607,"line_end":2607,"column_start":5,"column_end":69}},{"value":"/     base_vertex: u32, // The Index of the first vertex to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90025,"byte_end":90092,"line_start":2608,"line_end":2608,"column_start":5,"column_end":72}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90097,"byte_end":90174,"line_start":2609,"line_end":2609,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90179,"byte_end":90184,"line_start":2610,"line_end":2610,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90189,"byte_end":90196,"line_start":2611,"line_end":2611,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90201,"byte_end":90204,"line_start":2612,"line_end":2612,"column_start":5,"column_end":8}},{"value":"/ These draw structures are expected to be tightly packed.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90209,"byte_end":90269,"line_start":2613,"line_end":2613,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":91559,"byte_end":91586,"line_start":2644,"line_end":2644,"column_start":12,"column_end":39},"name":"multi_draw_indexed_indirect","qualname":"<RenderPass>::multi_draw_indexed_indirect","value":"pub fn multi_draw_indexed_indirect(&mut Self, &'a Buffer, BufferAddress, u32)","parent":null,"children":[],"decl_id":null,"docs":" Dispatches multiple draw calls from the active index buffer and the active vertex buffers,\n based on the contents of the `indirect_buffer`. `count` draw calls are issued.","sig":null,"attributes":[{"value":"/ Dispatches multiple draw calls from the active index buffer and the active vertex buffers,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90532,"byte_end":90626,"line_start":2624,"line_end":2624,"column_start":5,"column_end":99}},{"value":"/ based on the contents of the `indirect_buffer`. `count` draw calls are issued.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90631,"byte_end":90713,"line_start":2625,"line_end":2625,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90718,"byte_end":90721,"line_start":2626,"line_end":2626,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderPass::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90726,"byte_end":90820,"line_start":2627,"line_end":2627,"column_start":5,"column_end":99}},{"value":"/ vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90825,"byte_end":90894,"line_start":2628,"line_end":2628,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90899,"byte_end":90902,"line_start":2629,"line_end":2629,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90907,"byte_end":90972,"line_start":2630,"line_end":2630,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90977,"byte_end":90980,"line_start":2631,"line_end":2631,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":90985,"byte_end":90996,"line_start":2632,"line_end":2632,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":91001,"byte_end":91015,"line_start":2633,"line_end":2633,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndexedIndirect {","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":91020,"byte_end":91052,"line_start":2634,"line_end":2634,"column_start":5,"column_end":37}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":91057,"byte_end":91118,"line_start":2635,"line_end":2635,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":91123,"byte_end":91187,"line_start":2636,"line_end":2636,"column_start":5,"column_end":69}},{"value":"/     base_index: u32, // The base index within the index buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":91192,"byte_end":91259,"line_start":2637,"line_end":2637,"column_start":5,"column_end":72}},{"value":"/     vertex_offset: i32, // The value added to the vertex index before indexing into the vertex buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":91264,"byte_end":91370,"line_start":2638,"line_end":2638,"column_start":5,"column_end":111}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":91375,"byte_end":91452,"line_start":2639,"line_end":2639,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":91457,"byte_end":91462,"line_start":2640,"line_end":2640,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":91467,"byte_end":91474,"line_start":2641,"line_end":2641,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":91479,"byte_end":91482,"line_start":2642,"line_end":2642,"column_start":5,"column_end":8}},{"value":"/ These draw structures are expected to be tightly packed.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":91487,"byte_end":91547,"line_start":2643,"line_end":2643,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":93231,"byte_end":93256,"line_start":2687,"line_end":2687,"column_start":12,"column_end":37},"name":"multi_draw_indirect_count","qualname":"<RenderPass>::multi_draw_indirect_count","value":"pub fn multi_draw_indirect_count(&mut Self, &'a Buffer, BufferAddress,\n                                 &'a Buffer, BufferAddress, u32)","parent":null,"children":[],"decl_id":null,"docs":" Disptaches multiple draw calls from the active vertex buffer(s) based on the contents of the `indirect_buffer`.\n The count buffer is read to determine how many draws to issue.","sig":null,"attributes":[{"value":"/ Disptaches multiple draw calls from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":91962,"byte_end":92077,"line_start":2657,"line_end":2657,"column_start":5,"column_end":120}},{"value":"/ The count buffer is read to determine how many draws to issue.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92082,"byte_end":92148,"line_start":2658,"line_end":2658,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92153,"byte_end":92156,"line_start":2659,"line_end":2659,"column_start":5,"column_end":8}},{"value":"/ The indirect buffer must be long enough to account for `max_count` draws, however only `count` will","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92161,"byte_end":92264,"line_start":2660,"line_end":2660,"column_start":5,"column_end":108}},{"value":"/ draws will be read. If `count` is greater than `max_count`, `max_count` will be used.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92269,"byte_end":92358,"line_start":2661,"line_end":2661,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92363,"byte_end":92366,"line_start":2662,"line_end":2662,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92371,"byte_end":92451,"line_start":2663,"line_end":2663,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92456,"byte_end":92459,"line_start":2664,"line_end":2664,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92464,"byte_end":92529,"line_start":2665,"line_end":2665,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92534,"byte_end":92537,"line_start":2666,"line_end":2666,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92542,"byte_end":92553,"line_start":2667,"line_end":2667,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92558,"byte_end":92572,"line_start":2668,"line_end":2668,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndirect {","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92577,"byte_end":92602,"line_start":2669,"line_end":2669,"column_start":5,"column_end":30}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92607,"byte_end":92668,"line_start":2670,"line_end":2670,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92673,"byte_end":92737,"line_start":2671,"line_end":2671,"column_start":5,"column_end":69}},{"value":"/     base_vertex: u32, // The Index of the first vertex to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92742,"byte_end":92809,"line_start":2672,"line_end":2672,"column_start":5,"column_end":72}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92814,"byte_end":92891,"line_start":2673,"line_end":2673,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92896,"byte_end":92901,"line_start":2674,"line_end":2674,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92906,"byte_end":92913,"line_start":2675,"line_end":2675,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92918,"byte_end":92921,"line_start":2676,"line_end":2676,"column_start":5,"column_end":8}},{"value":"/ These draw structures are expected to be tightly packed.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92926,"byte_end":92986,"line_start":2677,"line_end":2677,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92991,"byte_end":92994,"line_start":2678,"line_end":2678,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `count_buffer` is the following:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":92999,"byte_end":93061,"line_start":2679,"line_end":2679,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":93066,"byte_end":93069,"line_start":2680,"line_end":2680,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":93074,"byte_end":93085,"line_start":2681,"line_end":2681,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":93090,"byte_end":93104,"line_start":2682,"line_end":2682,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndirectCount {","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":93109,"byte_end":93139,"line_start":2683,"line_end":2683,"column_start":5,"column_end":35}},{"value":"/     count: u32, // Number of draw calls to issue.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":93144,"byte_end":93197,"line_start":2684,"line_end":2684,"column_start":5,"column_end":58}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":93202,"byte_end":93207,"line_start":2685,"line_end":2685,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":93212,"byte_end":93219,"line_start":2686,"line_end":2686,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95172,"byte_end":95205,"line_start":2736,"line_end":2736,"column_start":12,"column_end":45},"name":"multi_draw_indexed_indirect_count","qualname":"<RenderPass>::multi_draw_indexed_indirect_count","value":"pub fn multi_draw_indexed_indirect_count(&mut Self, &'a Buffer, BufferAddress,\n                                         &'a Buffer, BufferAddress, u32)","parent":null,"children":[],"decl_id":null,"docs":" Dispatches multiple draw calls from the active index buffer and the active vertex buffers,\n based on the contents of the `indirect_buffer`. The count buffer is read to determine how many draws to issue.","sig":null,"attributes":[{"value":"/ Dispatches multiple draw calls from the active index buffer and the active vertex buffers,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":93663,"byte_end":93757,"line_start":2704,"line_end":2704,"column_start":5,"column_end":99}},{"value":"/ based on the contents of the `indirect_buffer`. The count buffer is read to determine how many draws to issue.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":93762,"byte_end":93876,"line_start":2705,"line_end":2705,"column_start":5,"column_end":119}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":93881,"byte_end":93884,"line_start":2706,"line_end":2706,"column_start":5,"column_end":8}},{"value":"/ The indirect buffer must be long enough to account for `max_count` draws, however only `count` will","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":93889,"byte_end":93992,"line_start":2707,"line_end":2707,"column_start":5,"column_end":108}},{"value":"/ draws will be read. If `count` is greater than `max_count`, `max_count` will be used.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":93997,"byte_end":94086,"line_start":2708,"line_end":2708,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94091,"byte_end":94094,"line_start":2709,"line_end":2709,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderPass::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94099,"byte_end":94193,"line_start":2710,"line_end":2710,"column_start":5,"column_end":99}},{"value":"/ vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94198,"byte_end":94267,"line_start":2711,"line_end":2711,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94272,"byte_end":94275,"line_start":2712,"line_end":2712,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94280,"byte_end":94345,"line_start":2713,"line_end":2713,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94350,"byte_end":94353,"line_start":2714,"line_end":2714,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94358,"byte_end":94369,"line_start":2715,"line_end":2715,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94374,"byte_end":94388,"line_start":2716,"line_end":2716,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndexedIndirect {","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94393,"byte_end":94425,"line_start":2717,"line_end":2717,"column_start":5,"column_end":37}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94430,"byte_end":94491,"line_start":2718,"line_end":2718,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94496,"byte_end":94560,"line_start":2719,"line_end":2719,"column_start":5,"column_end":69}},{"value":"/     base_index: u32, // The base index within the index buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94565,"byte_end":94632,"line_start":2720,"line_end":2720,"column_start":5,"column_end":72}},{"value":"/     vertex_offset: i32, // The value added to the vertex index before indexing into the vertex buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94637,"byte_end":94743,"line_start":2721,"line_end":2721,"column_start":5,"column_end":111}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94748,"byte_end":94825,"line_start":2722,"line_end":2722,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94830,"byte_end":94835,"line_start":2723,"line_end":2723,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94840,"byte_end":94847,"line_start":2724,"line_end":2724,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94852,"byte_end":94855,"line_start":2725,"line_end":2725,"column_start":5,"column_end":8}},{"value":"/ These draw structures are expected to be tightly packed.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94860,"byte_end":94920,"line_start":2726,"line_end":2726,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94925,"byte_end":94928,"line_start":2727,"line_end":2727,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `count_buffer` is the following:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":94933,"byte_end":94995,"line_start":2728,"line_end":2728,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95000,"byte_end":95003,"line_start":2729,"line_end":2729,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95008,"byte_end":95019,"line_start":2730,"line_end":2730,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95024,"byte_end":95038,"line_start":2731,"line_end":2731,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndexedIndirectCount {","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95043,"byte_end":95080,"line_start":2732,"line_end":2732,"column_start":5,"column_end":42}},{"value":"/     count: u32, // Number of draw calls to issue.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95085,"byte_end":95138,"line_start":2733,"line_end":2733,"column_start":5,"column_end":58}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95143,"byte_end":95148,"line_start":2734,"line_end":2734,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95153,"byte_end":95160,"line_start":2735,"line_end":2735,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96955,"byte_end":96973,"line_start":2784,"line_end":2784,"column_start":12,"column_end":30},"name":"set_push_constants","qualname":"<RenderPass>::set_push_constants","value":"pub fn set_push_constants(&mut Self, ShaderStages, u32, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Set push constant data.","sig":null,"attributes":[{"value":"/ Set push constant data.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95745,"byte_end":95772,"line_start":2756,"line_end":2756,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95777,"byte_end":95780,"line_start":2757,"line_end":2757,"column_start":5,"column_end":8}},{"value":"/ Offset is measured in bytes, but must be a multiple of [`PUSH_CONSTANT_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95785,"byte_end":95872,"line_start":2758,"line_end":2758,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95877,"byte_end":95880,"line_start":2759,"line_end":2759,"column_start":5,"column_end":8}},{"value":"/ Data size must be a multiple of 4 and must be aligned to the 4s, so we take an array of u32.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95885,"byte_end":95981,"line_start":2760,"line_end":2760,"column_start":5,"column_end":101}},{"value":"/ For example, with an offset of 4 and an array of `[u32; 3]`, that will write to the range","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95986,"byte_end":96079,"line_start":2761,"line_end":2761,"column_start":5,"column_end":98}},{"value":"/ of 4..16.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96084,"byte_end":96097,"line_start":2762,"line_end":2762,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96102,"byte_end":96105,"line_start":2763,"line_end":2763,"column_start":5,"column_end":8}},{"value":"/ For each byte in the range of push constant data written, the union of the stages of all push constant","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96110,"byte_end":96216,"line_start":2764,"line_end":2764,"column_start":5,"column_end":111}},{"value":"/ ranges that covers that byte must be exactly `stages`. There's no good way of explaining this simply,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96221,"byte_end":96326,"line_start":2765,"line_end":2765,"column_start":5,"column_end":110}},{"value":"/ so here are some examples:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96331,"byte_end":96361,"line_start":2766,"line_end":2766,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96366,"byte_end":96369,"line_start":2767,"line_end":2767,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96374,"byte_end":96385,"line_start":2768,"line_end":2768,"column_start":5,"column_end":16}},{"value":"/ For the given ranges:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96390,"byte_end":96415,"line_start":2769,"line_end":2769,"column_start":5,"column_end":30}},{"value":"/ - 0..4 Vertex","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96420,"byte_end":96437,"line_start":2770,"line_end":2770,"column_start":5,"column_end":22}},{"value":"/ - 4..8 Fragment","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96442,"byte_end":96461,"line_start":2771,"line_end":2771,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96466,"byte_end":96473,"line_start":2772,"line_end":2772,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96478,"byte_end":96481,"line_start":2773,"line_end":2773,"column_start":5,"column_end":8}},{"value":"/ You would need to upload this in two set_push_constants calls. First for the `Vertex` range, second for the `Fragment` range.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96486,"byte_end":96615,"line_start":2774,"line_end":2774,"column_start":5,"column_end":134}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96620,"byte_end":96623,"line_start":2775,"line_end":2775,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96628,"byte_end":96639,"line_start":2776,"line_end":2776,"column_start":5,"column_end":16}},{"value":"/ For the given ranges:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96644,"byte_end":96669,"line_start":2777,"line_end":2777,"column_start":5,"column_end":30}},{"value":"/ - 0..8  Vertex","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96674,"byte_end":96692,"line_start":2778,"line_end":2778,"column_start":5,"column_end":23}},{"value":"/ - 4..12 Fragment","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96697,"byte_end":96717,"line_start":2779,"line_end":2779,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96722,"byte_end":96729,"line_start":2780,"line_end":2780,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96734,"byte_end":96737,"line_start":2781,"line_end":2781,"column_start":5,"column_end":8}},{"value":"/ You would need to upload this in three set_push_constants calls. First for the `Vertex` only range 0..4, second","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96742,"byte_end":96857,"line_start":2782,"line_end":2782,"column_start":5,"column_end":120}},{"value":"/ for the `Vertex | Fragment` range 4..8, third for the `Fragment` range 8..12.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":96862,"byte_end":96943,"line_start":2783,"line_end":2783,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":97647,"byte_end":97662,"line_start":2798,"line_end":2798,"column_start":12,"column_end":27},"name":"write_timestamp","qualname":"<RenderPass>::write_timestamp","value":"pub fn write_timestamp(&mut Self, &QuerySet, u32)","parent":null,"children":[],"decl_id":null,"docs":" Issue a timestamp command at this point in the queue. The\n timestamp will be written to the specified query set, at the specified index.","sig":null,"attributes":[{"value":"/ Issue a timestamp command at this point in the queue. The","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":97230,"byte_end":97291,"line_start":2791,"line_end":2791,"column_start":5,"column_end":66}},{"value":"/ timestamp will be written to the specified query set, at the specified index.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":97296,"byte_end":97377,"line_start":2792,"line_end":2792,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":97382,"byte_end":97385,"line_start":2793,"line_end":2793,"column_start":5,"column_end":8}},{"value":"/ Must be multiplied by [`Queue::get_timestamp_period`] to get","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":97390,"byte_end":97454,"line_start":2794,"line_end":2794,"column_start":5,"column_end":69}},{"value":"/ the value in nanoseconds. Absolute values have no meaning,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":97459,"byte_end":97521,"line_start":2795,"line_end":2795,"column_start":5,"column_end":67}},{"value":"/ but timestamps can be subtracted to get the time it takes","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":97526,"byte_end":97587,"line_start":2796,"line_end":2796,"column_start":5,"column_end":66}},{"value":"/ for a string of operations to complete.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":97592,"byte_end":97635,"line_start":2797,"line_end":2797,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1375},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":98102,"byte_end":98133,"line_start":2807,"line_end":2807,"column_start":12,"column_end":43},"name":"begin_pipeline_statistics_query","qualname":"<RenderPass>::begin_pipeline_statistics_query","value":"pub fn begin_pipeline_statistics_query(&mut Self, &QuerySet, u32)","parent":null,"children":[],"decl_id":null,"docs":" Start a pipeline statistics query on this render pass. It can be ended with\n `end_pipeline_statistics_query`. Pipeline statistics queries may not be nested.\n","sig":null,"attributes":[{"value":"/ Start a pipeline statistics query on this render pass. It can be ended with","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":97923,"byte_end":98002,"line_start":2805,"line_end":2805,"column_start":5,"column_end":84}},{"value":"/ `end_pipeline_statistics_query`. Pipeline statistics queries may not be nested.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":98007,"byte_end":98090,"line_start":2806,"line_end":2806,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":98471,"byte_end":98500,"line_start":2814,"line_end":2814,"column_start":12,"column_end":41},"name":"end_pipeline_statistics_query","qualname":"<RenderPass>::end_pipeline_statistics_query","value":"pub fn end_pipeline_statistics_query(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" End the pipeline statistics query on this render pass. It can be started with\n `begin_pipeline_statistics_query`. Pipeline statistics queries may not be nested.\n","sig":null,"attributes":[{"value":"/ End the pipeline statistics query on this render pass. It can be started with","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":98288,"byte_end":98369,"line_start":2812,"line_end":2812,"column_start":5,"column_end":86}},{"value":"/ `begin_pipeline_statistics_query`. Pipeline statistics queries may not be nested.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":98374,"byte_end":98459,"line_start":2813,"line_end":2813,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":99376,"byte_end":99390,"line_start":2837,"line_end":2837,"column_start":12,"column_end":26},"name":"set_bind_group","qualname":"<ComputePass>::set_bind_group","value":"pub fn set_bind_group(&mut Self, u32, &'a BindGroup, &[DynamicOffset])","parent":null,"children":[],"decl_id":null,"docs":" Sets the active bind group for a given bind group index. The bind group layout\n in the active pipeline when the `dispatch()` function is called must match the layout of this bind group.","sig":null,"attributes":[{"value":"/ Sets the active bind group for a given bind group index. The bind group layout","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":98902,"byte_end":98984,"line_start":2831,"line_end":2831,"column_start":5,"column_end":87}},{"value":"/ in the active pipeline when the `dispatch()` function is called must match the layout of this bind group.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":98989,"byte_end":99098,"line_start":2832,"line_end":2832,"column_start":5,"column_end":114}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":99103,"byte_end":99106,"line_start":2833,"line_end":2833,"column_start":5,"column_end":8}},{"value":"/ If the bind group have dynamic offsets, provide them in order of their declaration.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":99111,"byte_end":99198,"line_start":2834,"line_end":2834,"column_start":5,"column_end":92}},{"value":"/ These offsets have to be aligned to [`Limits::min_uniform_buffer_offset_alignment`]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":99203,"byte_end":99290,"line_start":2835,"line_end":2835,"column_start":5,"column_end":92}},{"value":"/ or [`Limits::min_storage_buffer_offset_alignment`] appropriately.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":99295,"byte_end":99364,"line_start":2836,"line_end":2836,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":99657,"byte_end":99669,"line_start":2847,"line_end":2847,"column_start":12,"column_end":24},"name":"set_pipeline","qualname":"<ComputePass>::set_pipeline","value":"pub fn set_pipeline(&mut Self, &'a ComputePipeline)","parent":null,"children":[],"decl_id":null,"docs":" Sets the active compute pipeline.\n","sig":null,"attributes":[{"value":"/ Sets the active compute pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":99608,"byte_end":99645,"line_start":2846,"line_end":2846,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":99830,"byte_end":99849,"line_start":2852,"line_end":2852,"column_start":12,"column_end":31},"name":"insert_debug_marker","qualname":"<ComputePass>::insert_debug_marker","value":"pub fn insert_debug_marker(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Inserts debug marker.\n","sig":null,"attributes":[{"value":"/ Inserts debug marker.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":99793,"byte_end":99818,"line_start":2851,"line_end":2851,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1385},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100006,"byte_end":100022,"line_start":2857,"line_end":2857,"column_start":12,"column_end":28},"name":"push_debug_group","qualname":"<ComputePass>::push_debug_group","value":"pub fn push_debug_group(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Start record commands and group it into debug marker group.\n","sig":null,"attributes":[{"value":"/ Start record commands and group it into debug marker group.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":99931,"byte_end":99994,"line_start":2856,"line_end":2856,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100165,"byte_end":100180,"line_start":2862,"line_end":2862,"column_start":12,"column_end":27},"name":"pop_debug_group","qualname":"<ComputePass>::pop_debug_group","value":"pub fn pop_debug_group(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Stops command recording and creates debug group.\n","sig":null,"attributes":[{"value":"/ Stops command recording and creates debug group.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100101,"byte_end":100153,"line_start":2861,"line_end":2861,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1387},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100388,"byte_end":100396,"line_start":2869,"line_end":2869,"column_start":12,"column_end":20},"name":"dispatch","qualname":"<ComputePass>::dispatch","value":"pub fn dispatch(&mut Self, u32, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Dispatches compute work operations.","sig":null,"attributes":[{"value":"/ Dispatches compute work operations.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100240,"byte_end":100279,"line_start":2866,"line_end":2866,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100284,"byte_end":100287,"line_start":2867,"line_end":2867,"column_start":5,"column_end":8}},{"value":"/ `x`, `y` and `z` denote the number of work groups to dispatch in each dimension.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100292,"byte_end":100376,"line_start":2868,"line_end":2868,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100926,"byte_end":100943,"line_start":2886,"line_end":2886,"column_start":12,"column_end":29},"name":"dispatch_indirect","qualname":"<ComputePass>::dispatch_indirect","value":"pub fn dispatch_indirect(&mut Self, &'a Buffer, BufferAddress)","parent":null,"children":[],"decl_id":null,"docs":" Dispatches compute work operations, based on the contents of the `indirect_buffer`.","sig":null,"attributes":[{"value":"/ Dispatches compute work operations, based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100504,"byte_end":100591,"line_start":2873,"line_end":2873,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100596,"byte_end":100599,"line_start":2874,"line_end":2874,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100604,"byte_end":100669,"line_start":2875,"line_end":2875,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100674,"byte_end":100677,"line_start":2876,"line_end":2876,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100682,"byte_end":100693,"line_start":2877,"line_end":2877,"column_start":5,"column_end":16}},{"value":"/ // x, y and z denote the number of work groups to dispatch in each dimension.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100698,"byte_end":100779,"line_start":2878,"line_end":2878,"column_start":5,"column_end":86}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100784,"byte_end":100798,"line_start":2879,"line_end":2879,"column_start":5,"column_end":19}},{"value":"/ struct DispatchIndirect {","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100803,"byte_end":100832,"line_start":2880,"line_end":2880,"column_start":5,"column_end":34}},{"value":"/     x: u32,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100837,"byte_end":100852,"line_start":2881,"line_end":2881,"column_start":5,"column_end":20}},{"value":"/     y: u32,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100857,"byte_end":100872,"line_start":2882,"line_end":2882,"column_start":5,"column_end":20}},{"value":"/     z: u32,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100877,"byte_end":100892,"line_start":2883,"line_end":2883,"column_start":5,"column_end":20}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100897,"byte_end":100902,"line_start":2884,"line_end":2884,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":100907,"byte_end":100914,"line_start":2885,"line_end":2885,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":101647,"byte_end":101665,"line_start":2904,"line_end":2904,"column_start":12,"column_end":30},"name":"set_push_constants","qualname":"<ComputePass>::set_push_constants","value":"pub fn set_push_constants(&mut Self, u32, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Set push constant data.","sig":null,"attributes":[{"value":"/ Set push constant data.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":101283,"byte_end":101310,"line_start":2897,"line_end":2897,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":101315,"byte_end":101318,"line_start":2898,"line_end":2898,"column_start":5,"column_end":8}},{"value":"/ Offset is measured in bytes, but must be a multiple of [`PUSH_CONSTANT_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":101323,"byte_end":101410,"line_start":2899,"line_end":2899,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":101415,"byte_end":101418,"line_start":2900,"line_end":2900,"column_start":5,"column_end":8}},{"value":"/ Data size must be a multiple of 4 and must be aligned to the 4s, so we take an array of u32.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":101423,"byte_end":101519,"line_start":2901,"line_end":2901,"column_start":5,"column_end":101}},{"value":"/ For example, with an offset of 4 and an array of `[u32; 3]`, that will write to the range","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":101524,"byte_end":101617,"line_start":2902,"line_end":2902,"column_start":5,"column_end":98}},{"value":"/ of 4..16.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":101622,"byte_end":101635,"line_start":2903,"line_end":2903,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":102302,"byte_end":102317,"line_start":2917,"line_end":2917,"column_start":12,"column_end":27},"name":"write_timestamp","qualname":"<ComputePass>::write_timestamp","value":"pub fn write_timestamp(&mut Self, &QuerySet, u32)","parent":null,"children":[],"decl_id":null,"docs":" Issue a timestamp command at this point in the queue. The timestamp will be written to the specified query set, at the specified index.","sig":null,"attributes":[{"value":"/ Issue a timestamp command at this point in the queue. The timestamp will be written to the specified query set, at the specified index.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":101893,"byte_end":102032,"line_start":2911,"line_end":2911,"column_start":5,"column_end":144}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":102037,"byte_end":102040,"line_start":2912,"line_end":2912,"column_start":5,"column_end":8}},{"value":"/ Must be multiplied by [`Queue::get_timestamp_period`] to get","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":102045,"byte_end":102109,"line_start":2913,"line_end":2913,"column_start":5,"column_end":69}},{"value":"/ the value in nanoseconds. Absolute values have no meaning,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":102114,"byte_end":102176,"line_start":2914,"line_end":2914,"column_start":5,"column_end":67}},{"value":"/ but timestamps can be subtracted to get the time it takes","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":102181,"byte_end":102242,"line_start":2915,"line_end":2915,"column_start":5,"column_end":66}},{"value":"/ for a string of operations to complete.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":102247,"byte_end":102290,"line_start":2916,"line_end":2916,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1397},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":102758,"byte_end":102789,"line_start":2926,"line_end":2926,"column_start":12,"column_end":43},"name":"begin_pipeline_statistics_query","qualname":"<ComputePass>::begin_pipeline_statistics_query","value":"pub fn begin_pipeline_statistics_query(&mut Self, &QuerySet, u32)","parent":null,"children":[],"decl_id":null,"docs":" Start a pipeline statistics query on this render pass. It can be ended with\n `end_pipeline_statistics_query`. Pipeline statistics queries may not be nested.\n","sig":null,"attributes":[{"value":"/ Start a pipeline statistics query on this render pass. It can be ended with","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":102579,"byte_end":102658,"line_start":2924,"line_end":2924,"column_start":5,"column_end":84}},{"value":"/ `end_pipeline_statistics_query`. Pipeline statistics queries may not be nested.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":102663,"byte_end":102746,"line_start":2925,"line_end":2925,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":103127,"byte_end":103156,"line_start":2933,"line_end":2933,"column_start":12,"column_end":41},"name":"end_pipeline_statistics_query","qualname":"<ComputePass>::end_pipeline_statistics_query","value":"pub fn end_pipeline_statistics_query(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" End the pipeline statistics query on this render pass. It can be started with\n `begin_pipeline_statistics_query`. Pipeline statistics queries may not be nested.\n","sig":null,"attributes":[{"value":"/ End the pipeline statistics query on this render pass. It can be started with","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":102944,"byte_end":103025,"line_start":2931,"line_end":2931,"column_start":5,"column_end":86}},{"value":"/ `begin_pipeline_statistics_query`. Pipeline statistics queries may not be nested.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":103030,"byte_end":103115,"line_start":2932,"line_end":2932,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":103678,"byte_end":103684,"line_start":2951,"line_end":2951,"column_start":12,"column_end":18},"name":"finish","qualname":"<RenderBundleEncoder>::finish","value":"pub fn finish(Self, &RenderBundleDescriptor) -> RenderBundle","parent":null,"children":[],"decl_id":null,"docs":" Finishes recording and returns a [`RenderBundle`] that can be executed in other render passes.\n","sig":null,"attributes":[{"value":"/ Finishes recording and returns a [`RenderBundle`] that can be executed in other render passes.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":103568,"byte_end":103666,"line_start":2950,"line_end":2950,"column_start":5,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":104222,"byte_end":104236,"line_start":2962,"line_end":2962,"column_start":12,"column_end":26},"name":"set_bind_group","qualname":"<RenderBundleEncoder>::set_bind_group","value":"pub fn set_bind_group(&mut Self, u32, &'a BindGroup, &[DynamicOffset])","parent":null,"children":[],"decl_id":null,"docs":" Sets the active bind group for a given bind group index. The bind group layout\n in the active pipeline when any `draw()` function is called must match the layout of this bind group.","sig":null,"attributes":[{"value":"/ Sets the active bind group for a given bind group index. The bind group layout","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":103918,"byte_end":104000,"line_start":2958,"line_end":2958,"column_start":5,"column_end":87}},{"value":"/ in the active pipeline when any `draw()` function is called must match the layout of this bind group.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":104005,"byte_end":104110,"line_start":2959,"line_end":2959,"column_start":5,"column_end":110}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":104115,"byte_end":104118,"line_start":2960,"line_end":2960,"column_start":5,"column_end":8}},{"value":"/ If the bind group have dynamic offsets, provide them in order of their declaration.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":104123,"byte_end":104210,"line_start":2961,"line_end":2961,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":104583,"byte_end":104595,"line_start":2974,"line_end":2974,"column_start":12,"column_end":24},"name":"set_pipeline","qualname":"<RenderBundleEncoder>::set_pipeline","value":"pub fn set_pipeline(&mut Self, &'a RenderPipeline)","parent":null,"children":[],"decl_id":null,"docs":" Sets the active render pipeline.","sig":null,"attributes":[{"value":"/ Sets the active render pipeline.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":104448,"byte_end":104484,"line_start":2971,"line_end":2971,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":104489,"byte_end":104492,"line_start":2972,"line_end":2972,"column_start":5,"column_end":8}},{"value":"/ Subsequent draw calls will exhibit the behavior defined by `pipeline`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":104497,"byte_end":104571,"line_start":2973,"line_end":2973,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":104931,"byte_end":104947,"line_start":2982,"line_end":2982,"column_start":12,"column_end":28},"name":"set_index_buffer","qualname":"<RenderBundleEncoder>::set_index_buffer","value":"pub fn set_index_buffer(&mut Self, BufferSlice, IndexFormat)","parent":null,"children":[],"decl_id":null,"docs":" Sets the active index buffer.","sig":null,"attributes":[{"value":"/ Sets the active index buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":104712,"byte_end":104745,"line_start":2978,"line_end":2978,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":104750,"byte_end":104753,"line_start":2979,"line_end":2979,"column_start":5,"column_end":8}},{"value":"/ Subsequent calls to [`draw_indexed`](RenderBundleEncoder::draw_indexed) on this [`RenderBundleEncoder`] will","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":104758,"byte_end":104870,"line_start":2980,"line_end":2980,"column_start":5,"column_end":117}},{"value":"/ use `buffer` as the source index buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":104875,"byte_end":104919,"line_start":2981,"line_end":2981,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":105665,"byte_end":105682,"line_start":3002,"line_end":3002,"column_start":12,"column_end":29},"name":"set_vertex_buffer","qualname":"<RenderBundleEncoder>::set_vertex_buffer","value":"pub fn set_vertex_buffer(&mut Self, u32, BufferSlice)","parent":null,"children":[],"decl_id":null,"docs":" Assign a vertex buffer to a slot.","sig":null,"attributes":[{"value":"/ Assign a vertex buffer to a slot.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":105232,"byte_end":105269,"line_start":2992,"line_end":2992,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":105274,"byte_end":105277,"line_start":2993,"line_end":2993,"column_start":5,"column_end":8}},{"value":"/ Subsequent calls to [`draw`] and [`draw_indexed`] on this","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":105282,"byte_end":105343,"line_start":2994,"line_end":2994,"column_start":5,"column_end":66}},{"value":"/ [`RenderBundleEncoder`] will use `buffer` as one of the source vertex buffers.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":105348,"byte_end":105430,"line_start":2995,"line_end":2995,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":105435,"byte_end":105438,"line_start":2996,"line_end":2996,"column_start":5,"column_end":8}},{"value":"/ The `slot` refers to the index of the matching descriptor in","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":105443,"byte_end":105507,"line_start":2997,"line_end":2997,"column_start":5,"column_end":69}},{"value":"/ [`VertexState::buffers`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":105512,"byte_end":105541,"line_start":2998,"line_end":2998,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":105546,"byte_end":105549,"line_start":2999,"line_end":2999,"column_start":5,"column_end":8}},{"value":"/ [`draw`]: RenderBundleEncoder::draw","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":105554,"byte_end":105593,"line_start":3000,"line_end":3000,"column_start":5,"column_end":44}},{"value":"/ [`draw_indexed`]: RenderBundleEncoder::draw_indexed","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":105598,"byte_end":105653,"line_start":3001,"line_end":3001,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":106112,"byte_end":106116,"line_start":3015,"line_end":3015,"column_start":12,"column_end":16},"name":"draw","qualname":"<RenderBundleEncoder>::draw","value":"pub fn draw(&mut Self, Range<u32>, Range<u32>)","parent":null,"children":[],"decl_id":null,"docs":" Draws primitives from the active vertex buffer(s).","sig":null,"attributes":[{"value":"/ Draws primitives from the active vertex buffer(s).","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":105944,"byte_end":105998,"line_start":3012,"line_end":3012,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":106003,"byte_end":106006,"line_start":3013,"line_end":3013,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderBundleEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":106011,"byte_end":106100,"line_start":3014,"line_end":3014,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":106547,"byte_end":106559,"line_start":3023,"line_end":3023,"column_start":12,"column_end":24},"name":"draw_indexed","qualname":"<RenderBundleEncoder>::draw_indexed","value":"pub fn draw_indexed(&mut Self, Range<u32>, i32, Range<u32>)","parent":null,"children":[],"decl_id":null,"docs":" Draws indexed primitives using the active index buffer and the active vertex buffers.","sig":null,"attributes":[{"value":"/ Draws indexed primitives using the active index buffer and the active vertex buffers.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":106247,"byte_end":106336,"line_start":3019,"line_end":3019,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":106341,"byte_end":106344,"line_start":3020,"line_end":3020,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderBundleEncoder::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":106349,"byte_end":106452,"line_start":3021,"line_end":3021,"column_start":5,"column_end":108}},{"value":"/ vertex buffers can be set with [`RenderBundleEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":106457,"byte_end":106535,"line_start":3022,"line_end":3022,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1411},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107405,"byte_end":107418,"line_start":3042,"line_end":3042,"column_start":12,"column_end":25},"name":"draw_indirect","qualname":"<RenderBundleEncoder>::draw_indirect","value":"pub fn draw_indirect(&mut Self, &'a Buffer, BufferAddress)","parent":null,"children":[],"decl_id":null,"docs":" Draws primitives from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","sig":null,"attributes":[{"value":"/ Draws primitives from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":106728,"byte_end":106829,"line_start":3027,"line_end":3027,"column_start":5,"column_end":106}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":106834,"byte_end":106837,"line_start":3028,"line_end":3028,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderBundleEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":106842,"byte_end":106931,"line_start":3029,"line_end":3029,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":106936,"byte_end":106939,"line_start":3030,"line_end":3030,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":106944,"byte_end":107009,"line_start":3031,"line_end":3031,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107014,"byte_end":107017,"line_start":3032,"line_end":3032,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107022,"byte_end":107033,"line_start":3033,"line_end":3033,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107038,"byte_end":107052,"line_start":3034,"line_end":3034,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndirect {","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107057,"byte_end":107082,"line_start":3035,"line_end":3035,"column_start":5,"column_end":30}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107087,"byte_end":107148,"line_start":3036,"line_end":3036,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107153,"byte_end":107217,"line_start":3037,"line_end":3037,"column_start":5,"column_end":69}},{"value":"/     base_vertex: u32, // The Index of the first vertex to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107222,"byte_end":107289,"line_start":3038,"line_end":3038,"column_start":5,"column_end":72}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107294,"byte_end":107371,"line_start":3039,"line_end":3039,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107376,"byte_end":107381,"line_start":3040,"line_end":3040,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107386,"byte_end":107393,"line_start":3041,"line_end":3041,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108509,"byte_end":108530,"line_start":3064,"line_end":3064,"column_start":12,"column_end":33},"name":"draw_indexed_indirect","qualname":"<RenderBundleEncoder>::draw_indexed_indirect","value":"pub fn draw_indexed_indirect(&mut Self, &'a Buffer, BufferAddress)","parent":null,"children":[],"decl_id":null,"docs":" Draws indexed primitives using the active index buffer and the active vertex buffers,\n based on the contents of the `indirect_buffer`.","sig":null,"attributes":[{"value":"/ Draws indexed primitives using the active index buffer and the active vertex buffers,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107573,"byte_end":107662,"line_start":3046,"line_end":3046,"column_start":5,"column_end":94}},{"value":"/ based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107667,"byte_end":107718,"line_start":3047,"line_end":3047,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107723,"byte_end":107726,"line_start":3048,"line_end":3048,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderBundleEncoder::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107731,"byte_end":107834,"line_start":3049,"line_end":3049,"column_start":5,"column_end":108}},{"value":"/ vertex buffers can be set with [`RenderBundleEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107839,"byte_end":107917,"line_start":3050,"line_end":3050,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107922,"byte_end":107925,"line_start":3051,"line_end":3051,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":107930,"byte_end":107995,"line_start":3052,"line_end":3052,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108000,"byte_end":108003,"line_start":3053,"line_end":3053,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108008,"byte_end":108019,"line_start":3054,"line_end":3054,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108024,"byte_end":108038,"line_start":3055,"line_end":3055,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndexedIndirect {","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108043,"byte_end":108075,"line_start":3056,"line_end":3056,"column_start":5,"column_end":37}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108080,"byte_end":108141,"line_start":3057,"line_end":3057,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108146,"byte_end":108210,"line_start":3058,"line_end":3058,"column_start":5,"column_end":69}},{"value":"/     base_index: u32, // The base index within the index buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108215,"byte_end":108282,"line_start":3059,"line_end":3059,"column_start":5,"column_end":72}},{"value":"/     vertex_offset: i32, // The value added to the vertex index before indexing into the vertex buffer.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108287,"byte_end":108393,"line_start":3060,"line_end":3060,"column_start":5,"column_end":111}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108398,"byte_end":108475,"line_start":3061,"line_end":3061,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108480,"byte_end":108485,"line_start":3062,"line_end":3062,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108490,"byte_end":108497,"line_start":3063,"line_end":3063,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":110081,"byte_end":110099,"line_start":3104,"line_end":3104,"column_start":12,"column_end":30},"name":"set_push_constants","qualname":"<RenderBundleEncoder>::set_push_constants","value":"pub fn set_push_constants(&mut Self, ShaderStages, u32, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Set push constant data.","sig":null,"attributes":[{"value":"/ Set push constant data.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108871,"byte_end":108898,"line_start":3076,"line_end":3076,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108903,"byte_end":108906,"line_start":3077,"line_end":3077,"column_start":5,"column_end":8}},{"value":"/ Offset is measured in bytes, but must be a multiple of [`PUSH_CONSTANT_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108911,"byte_end":108998,"line_start":3078,"line_end":3078,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109003,"byte_end":109006,"line_start":3079,"line_end":3079,"column_start":5,"column_end":8}},{"value":"/ Data size must be a multiple of 4 and must be aligned to the 4s, so we take an array of u32.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109011,"byte_end":109107,"line_start":3080,"line_end":3080,"column_start":5,"column_end":101}},{"value":"/ For example, with an offset of 4 and an array of `[u32; 3]`, that will write to the range","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109112,"byte_end":109205,"line_start":3081,"line_end":3081,"column_start":5,"column_end":98}},{"value":"/ of 4..16.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109210,"byte_end":109223,"line_start":3082,"line_end":3082,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109228,"byte_end":109231,"line_start":3083,"line_end":3083,"column_start":5,"column_end":8}},{"value":"/ For each byte in the range of push constant data written, the union of the stages of all push constant","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109236,"byte_end":109342,"line_start":3084,"line_end":3084,"column_start":5,"column_end":111}},{"value":"/ ranges that covers that byte must be exactly `stages`. There's no good way of explaining this simply,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109347,"byte_end":109452,"line_start":3085,"line_end":3085,"column_start":5,"column_end":110}},{"value":"/ so here are some examples:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109457,"byte_end":109487,"line_start":3086,"line_end":3086,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109492,"byte_end":109495,"line_start":3087,"line_end":3087,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109500,"byte_end":109511,"line_start":3088,"line_end":3088,"column_start":5,"column_end":16}},{"value":"/ For the given ranges:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109516,"byte_end":109541,"line_start":3089,"line_end":3089,"column_start":5,"column_end":30}},{"value":"/ - 0..4 Vertex","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109546,"byte_end":109563,"line_start":3090,"line_end":3090,"column_start":5,"column_end":22}},{"value":"/ - 4..8 Fragment","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109568,"byte_end":109587,"line_start":3091,"line_end":3091,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109592,"byte_end":109599,"line_start":3092,"line_end":3092,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109604,"byte_end":109607,"line_start":3093,"line_end":3093,"column_start":5,"column_end":8}},{"value":"/ You would need to upload this in two set_push_constants calls. First for the `Vertex` range, second for the `Fragment` range.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109612,"byte_end":109741,"line_start":3094,"line_end":3094,"column_start":5,"column_end":134}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109746,"byte_end":109749,"line_start":3095,"line_end":3095,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109754,"byte_end":109765,"line_start":3096,"line_end":3096,"column_start":5,"column_end":16}},{"value":"/ For the given ranges:","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109770,"byte_end":109795,"line_start":3097,"line_end":3097,"column_start":5,"column_end":30}},{"value":"/ - 0..8  Vertex","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109800,"byte_end":109818,"line_start":3098,"line_end":3098,"column_start":5,"column_end":23}},{"value":"/ - 4..12 Fragment","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109823,"byte_end":109843,"line_start":3099,"line_end":3099,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109848,"byte_end":109855,"line_start":3100,"line_end":3100,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109860,"byte_end":109863,"line_start":3101,"line_end":3101,"column_start":5,"column_end":8}},{"value":"/ You would need to upload this in three set_push_constants calls. First for the `Vertex` only range 0..4, second","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109868,"byte_end":109983,"line_start":3102,"line_end":3102,"column_start":5,"column_end":120}},{"value":"/ for the `Vertex | Fragment` range 4..8, third for the `Fragment` range 8..12.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":109988,"byte_end":110069,"line_start":3103,"line_end":3103,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":110538,"byte_end":110550,"line_start":3115,"line_end":3115,"column_start":12,"column_end":24},"name":"write_buffer","qualname":"<Queue>::write_buffer","value":"pub fn write_buffer(&Self, &Buffer, BufferAddress, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Schedule a data write into `buffer` starting at `offset`.","sig":null,"attributes":[{"value":"/ Schedule a data write into `buffer` starting at `offset`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":110245,"byte_end":110306,"line_start":3110,"line_end":3110,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":110311,"byte_end":110314,"line_start":3111,"line_end":3111,"column_start":5,"column_end":8}},{"value":"/ This method is intended to have low performance costs.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":110319,"byte_end":110377,"line_start":3112,"line_end":3112,"column_start":5,"column_end":63}},{"value":"/ As such, the write is not immediately submitted, and instead enqueued","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":110382,"byte_end":110455,"line_start":3113,"line_end":3113,"column_start":5,"column_end":78}},{"value":"/ internally to happen at the start of the next `submit()` call.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":110460,"byte_end":110526,"line_start":3114,"line_end":3114,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1418},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":110985,"byte_end":110998,"line_start":3124,"line_end":3124,"column_start":12,"column_end":25},"name":"write_texture","qualname":"<Queue>::write_texture","value":"pub fn write_texture(&Self, ImageCopyTexture, &[u8], ImageDataLayout,\n                     Extent3d)","parent":null,"children":[],"decl_id":null,"docs":" Schedule a data write into `texture`.","sig":null,"attributes":[{"value":"/ Schedule a data write into `texture`.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":110712,"byte_end":110753,"line_start":3119,"line_end":3119,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":110758,"byte_end":110761,"line_start":3120,"line_end":3120,"column_start":5,"column_end":8}},{"value":"/ This method is intended to have low performance costs.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":110766,"byte_end":110824,"line_start":3121,"line_end":3121,"column_start":5,"column_end":63}},{"value":"/ As such, the write is not immediately submitted, and instead enqueued","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":110829,"byte_end":110902,"line_start":3122,"line_end":3122,"column_start":5,"column_end":78}},{"value":"/ internally to happen at the start of the next `submit()` call.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":110907,"byte_end":110973,"line_start":3123,"line_end":3123,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1419},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":111324,"byte_end":111330,"line_start":3135,"line_end":3135,"column_start":12,"column_end":18},"name":"submit","qualname":"<Queue>::submit","value":"pub fn submit<I: IntoIterator<Item = CommandBuffer>>(&Self, I)","parent":null,"children":[],"decl_id":null,"docs":" Submits a series of finished command buffers for execution.\n","sig":null,"attributes":[{"value":"/ Submits a series of finished command buffers for execution.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":111249,"byte_end":111312,"line_start":3134,"line_end":3134,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":111773,"byte_end":111793,"line_start":3148,"line_end":3148,"column_start":12,"column_end":32},"name":"get_timestamp_period","qualname":"<Queue>::get_timestamp_period","value":"pub fn get_timestamp_period(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Gets the amount of nanoseconds each tick of a timestamp query represents.","sig":null,"attributes":[{"value":"/ Gets the amount of nanoseconds each tick of a timestamp query represents.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":111617,"byte_end":111694,"line_start":3145,"line_end":3145,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":111699,"byte_end":111702,"line_start":3146,"line_end":3146,"column_start":5,"column_end":8}},{"value":"/ Returns zero if timestamp queries are unsupported.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":111707,"byte_end":111761,"line_start":3147,"line_end":3147,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":112014,"byte_end":112036,"line_start":3154,"line_end":3154,"column_start":12,"column_end":34},"name":"on_submitted_work_done","qualname":"<Queue>::on_submitted_work_done","value":"pub fn on_submitted_work_done(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns a future that resolves once all the work submitted by this point\n is done processing on GPU.\n","sig":null,"attributes":[{"value":"/ Returns a future that resolves once all the work submitted by this point","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":111891,"byte_end":111967,"line_start":3152,"line_end":3152,"column_start":5,"column_end":81}},{"value":"/ is done processing on GPU.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":111972,"byte_end":112002,"line_start":3153,"line_end":3153,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":112365,"byte_end":112372,"line_start":3163,"line_end":3163,"column_start":12,"column_end":19},"name":"present","qualname":"<SurfaceTexture>::present","value":"pub fn present(Self)","parent":null,"children":[],"decl_id":null,"docs":" Schedule this texture to be presented on the owning surface.","sig":null,"attributes":[{"value":"/ Schedule this texture to be presented on the owning surface.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":112188,"byte_end":112252,"line_start":3160,"line_end":3160,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":112257,"byte_end":112260,"line_start":3161,"line_end":3161,"column_start":5,"column_end":8}},{"value":"/ Needs to be called after any work on the texture is scheduled via [`Queue::submit`].","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":112265,"byte_end":112353,"line_start":3162,"line_end":3162,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1430},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113000,"byte_end":113020,"line_start":3185,"line_end":3185,"column_start":12,"column_end":32},"name":"get_preferred_format","qualname":"<Surface>::get_preferred_format","value":"pub fn get_preferred_format(&Self, &Adapter) -> Option<TextureFormat>","parent":null,"children":[],"decl_id":null,"docs":" Returns an optimal texture format to use for the [`Surface`] with this adapter.","sig":null,"attributes":[{"value":"/ Returns an optimal texture format to use for the [`Surface`] with this adapter.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":112827,"byte_end":112910,"line_start":3182,"line_end":3182,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":112915,"byte_end":112918,"line_start":3183,"line_end":3183,"column_start":5,"column_end":8}},{"value":"/ Returns None if the surface is incompatible with the adapter.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":112923,"byte_end":112988,"line_start":3184,"line_end":3184,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1431},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113404,"byte_end":113413,"line_start":3195,"line_end":3195,"column_start":12,"column_end":21},"name":"configure","qualname":"<Surface>::configure","value":"pub fn configure(&Self, &Device, &SurfaceConfiguration)","parent":null,"children":[],"decl_id":null,"docs":" Initializes [`Surface`] for presentation.","sig":null,"attributes":[{"value":"/ Initializes [`Surface`] for presentation.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113170,"byte_end":113215,"line_start":3189,"line_end":3189,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113220,"byte_end":113223,"line_start":3190,"line_end":3190,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113228,"byte_end":113240,"line_start":3191,"line_end":3191,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113245,"byte_end":113248,"line_start":3192,"line_end":3192,"column_start":5,"column_end":8}},{"value":"/ - A old [`SurfaceTexture`] is still alive referencing an old surface.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113253,"byte_end":113326,"line_start":3193,"line_end":3193,"column_start":5,"column_end":78}},{"value":"/ - Texture format requested is unsupported on the surface.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113331,"byte_end":113392,"line_start":3194,"line_end":3194,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1432},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":114035,"byte_end":114054,"line_start":3207,"line_end":3207,"column_start":12,"column_end":31},"name":"get_current_texture","qualname":"<Surface>::get_current_texture","value":"pub fn get_current_texture(&Self) -> Result<SurfaceTexture, SurfaceError>","parent":null,"children":[],"decl_id":null,"docs":" Returns the next texture to be presented by the swapchain for drawing.","sig":null,"attributes":[{"value":"/ Returns the next texture to be presented by the swapchain for drawing.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113563,"byte_end":113637,"line_start":3199,"line_end":3199,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113642,"byte_end":113645,"line_start":3200,"line_end":3200,"column_start":5,"column_end":8}},{"value":"/ In order to present the [`SurfaceTexture`] returned by this method,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113650,"byte_end":113721,"line_start":3201,"line_end":3201,"column_start":5,"column_end":76}},{"value":"/ first a [`Queue::submit`] needs to be done with some work rendering to this texture.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113726,"byte_end":113814,"line_start":3202,"line_end":3202,"column_start":5,"column_end":93}},{"value":"/ Then [`SurfaceTexture::present`] needs to be called.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113819,"byte_end":113875,"line_start":3203,"line_end":3203,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113880,"byte_end":113883,"line_start":3204,"line_end":3204,"column_start":5,"column_end":8}},{"value":"/ If a SurfaceTexture referencing this surface is alive when the swapchain is recreated,","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113888,"byte_end":113978,"line_start":3205,"line_end":3205,"column_start":5,"column_end":95}},{"value":"/ recreating the swapchain will panic.","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":113983,"byte_end":114023,"line_start":3206,"line_end":3206,"column_start":5,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":1434},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":115019,"byte_end":115041,"line_start":3235,"line_end":3235,"column_start":11,"column_end":33},"name":"UncapturedErrorHandler","qualname":"::UncapturedErrorHandler","value":"UncapturedErrorHandler: Fn(Error) -> () + Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Type for the callback of uncaptured error handler\n","sig":null,"attributes":[{"value":"/ Type for the callback of uncaptured error handler","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":114955,"byte_end":115008,"line_start":3234,"line_end":3234,"column_start":1,"column_end":54}}]},{"kind":"StructVariant","id":{"krate":0,"index":2088},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":115231,"byte_end":115247,"line_start":3242,"line_end":3242,"column_start":5,"column_end":21},"name":"OutOfMemoryError","qualname":"::Error::OutOfMemoryError","value":"Error::OutOfMemoryError { source }","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Out of memory error\n","sig":null,"attributes":[{"value":"/ Out of memory error","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":115203,"byte_end":115226,"line_start":3241,"line_end":3241,"column_start":5,"column_end":28}}]},{"kind":"StructVariant","id":{"krate":0,"index":2090},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":115388,"byte_end":115403,"line_start":3247,"line_end":3247,"column_start":5,"column_end":20},"name":"ValidationError","qualname":"::Error::ValidationError","value":"Error::ValidationError { source, description }","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Validation error, signifying a bug in code or data\n","sig":null,"attributes":[{"value":"/ Validation error, signifying a bug in code or data","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":115329,"byte_end":115383,"line_start":3246,"line_end":3246,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":2087},"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":115191,"byte_end":115196,"line_start":3240,"line_end":3240,"column_start":10,"column_end":15},"name":"Error","qualname":"::Error","value":"pub enum Error {\n    OutOfMemoryError {\n        source: Box<dyn error::Error + Send + 'static>,\n    },\n    ValidationError {\n        source: Box<dyn error::Error + Send + 'static>,\n        description: String,\n    },\n}","parent":null,"children":[{"krate":0,"index":2088},{"krate":0,"index":2090}],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":115150,"byte_end":115164,"line_start":3238,"line_end":3238,"column_start":1,"column_end":15}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":117525,"byte_end":117532,"line_start":28,"line_end":28,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":117607,"byte_end":117614,"line_start":34,"line_end":34,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":117762,"byte_end":117769,"line_start":40,"line_end":40,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":123908,"byte_end":123919,"line_start":234,"line_end":234,"column_start":61,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":126465,"byte_end":126475,"line_start":309,"line_end":309,"column_start":56,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":131152,"byte_end":131162,"line_start":448,"line_end":448,"column_start":60,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":133623,"byte_end":133642,"line_start":519,"line_end":519,"column_start":56,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":139955,"byte_end":139962,"line_start":730,"line_end":730,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":296},{"krate":0,"index":299},{"krate":0,"index":308},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":379},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":190269,"byte_end":190281,"line_start":2175,"line_end":2175,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":190538,"byte_end":190550,"line_start":2187,"line_end":2187,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":190920,"byte_end":190937,"line_start":2204,"line_end":2204,"column_start":22,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":190962,"byte_end":190979,"line_start":2205,"line_end":2205,"column_start":22,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":191023,"byte_end":191040,"line_start":2207,"line_end":2207,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":191275,"byte_end":191292,"line_start":2217,"line_end":2217,"column_start":15,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\native_gpu_future.rs","byte_start":192043,"byte_end":192052,"line_start":27,"line_end":27,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\native_gpu_future.rs","byte_start":192518,"byte_end":192537,"line_start":43,"line_end":43,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":197486,"byte_end":197490,"line_start":14,"line_end":14,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":199351,"byte_end":199362,"line_start":70,"line_end":70,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":204783,"byte_end":204789,"line_start":40,"line_end":40,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":539},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214698,"byte_end":214708,"line_start":123,"line_end":123,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":216389,"byte_end":216408,"line_start":174,"line_end":174,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":195614,"byte_end":195628,"line_start":73,"line_end":73,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":196962,"byte_end":196976,"line_start":108,"line_end":108,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":679},{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17988,"byte_end":17995,"line_start":513,"line_end":513,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1119}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":19047,"byte_end":19057,"line_start":552,"line_end":552,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21956,"byte_end":21963,"line_start":657,"line_end":657,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1127}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":22447,"byte_end":22454,"line_start":675,"line_end":675,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1129}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":23137,"byte_end":23152,"line_start":695,"line_end":695,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1131}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":23773,"byte_end":23782,"line_start":715,"line_end":715,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1133}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":24317,"byte_end":24329,"line_start":734,"line_end":734,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25899,"byte_end":25913,"line_start":784,"line_end":784,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":26421,"byte_end":26435,"line_start":802,"line_end":802,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1152}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":26578,"byte_end":26592,"line_start":810,"line_end":810,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1154}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":27313,"byte_end":27328,"line_start":833,"line_end":833,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":27472,"byte_end":27487,"line_start":841,"line_end":841,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":28322,"byte_end":28335,"line_start":865,"line_end":865,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1160}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":29008,"byte_end":29022,"line_start":888,"line_end":888,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1162}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":30688,"byte_end":30700,"line_start":940,"line_end":940,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1164}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":30959,"byte_end":30967,"line_start":954,"line_end":954,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1169}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33986,"byte_end":33992,"line_start":1034,"line_end":1034,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1172}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":34533,"byte_end":34543,"line_start":1051,"line_end":1051,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1175}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":40270,"byte_end":40287,"line_start":1175,"line_end":1175,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1196}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48119,"byte_end":48131,"line_start":1364,"line_end":1364,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1208}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48671,"byte_end":48683,"line_start":1375,"line_end":1375,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48693,"byte_end":48701,"line_start":1377,"line_end":1377,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1217},{"krate":0,"index":1221},{"krate":0,"index":1223},{"krate":0,"index":1225},{"krate":0,"index":1226}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53703,"byte_end":53710,"line_start":1529,"line_end":1529,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1228},{"krate":0,"index":1232},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":57964,"byte_end":57970,"line_start":1639,"line_end":1639,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1263},{"krate":0,"index":1264}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":65758,"byte_end":65764,"line_start":1862,"line_end":1862,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1266}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66013,"byte_end":66031,"line_start":1874,"line_end":1874,"column_start":18,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1268}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66186,"byte_end":66204,"line_start":1880,"line_end":1880,"column_start":23,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66349,"byte_end":66365,"line_start":1886,"line_end":1886,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1271}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66542,"byte_end":66558,"line_start":1892,"line_end":1892,"column_start":23,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":68604,"byte_end":68614,"line_start":1968,"line_end":1968,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":68737,"byte_end":68750,"line_start":1976,"line_end":1976,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1283},{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":69035,"byte_end":69048,"line_start":1989,"line_end":1989,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1286}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":69166,"byte_end":69176,"line_start":1995,"line_end":1995,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1288}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":69271,"byte_end":69284,"line_start":2001,"line_end":2001,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1290}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":69384,"byte_end":69394,"line_start":2007,"line_end":2007,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1292}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":69590,"byte_end":69603,"line_start":2017,"line_end":2017,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1294}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":69790,"byte_end":69796,"line_start":2027,"line_end":2027,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1300},{"krate":0,"index":1301}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":71042,"byte_end":71053,"line_start":2065,"line_end":2065,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1304},{"krate":0,"index":1306},{"krate":0,"index":1307}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":73509,"byte_end":73515,"line_start":2130,"line_end":2130,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":73649,"byte_end":73656,"line_start":2138,"line_end":2138,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1311},{"krate":0,"index":1314},{"krate":0,"index":1315},{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":74966,"byte_end":74973,"line_start":2178,"line_end":2178,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1318}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":75131,"byte_end":75142,"line_start":2186,"line_end":2186,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1320}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":75282,"byte_end":75296,"line_start":2194,"line_end":2194,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":81090,"byte_end":81104,"line_start":2383,"line_end":2383,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1336}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":81931,"byte_end":81945,"line_start":2402,"line_end":2402,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1338}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":82657,"byte_end":82667,"line_start":2425,"line_end":2425,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89466,"byte_end":89476,"line_start":2595,"line_end":2595,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1361},{"krate":0,"index":1362}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":91941,"byte_end":91951,"line_start":2656,"line_end":2656,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1365},{"krate":0,"index":1366}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95724,"byte_end":95734,"line_start":2755,"line_end":2755,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1369}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":97209,"byte_end":97219,"line_start":2790,"line_end":2790,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":97902,"byte_end":97912,"line_start":2804,"line_end":2804,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1375},{"krate":0,"index":1376}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":98590,"byte_end":98600,"line_start":2819,"line_end":2819,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1379}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":98880,"byte_end":98891,"line_start":2830,"line_end":2830,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1388}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":101261,"byte_end":101272,"line_start":2896,"line_end":2896,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":101871,"byte_end":101882,"line_start":2910,"line_end":2910,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":102557,"byte_end":102568,"line_start":2923,"line_end":2923,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1397},{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":103246,"byte_end":103257,"line_start":2938,"line_end":2938,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1401}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":103538,"byte_end":103557,"line_start":2949,"line_end":2949,"column_start":10,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108841,"byte_end":108860,"line_start":3075,"line_end":3075,"column_start":10,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1415}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":110233,"byte_end":110238,"line_start":3109,"line_end":3109,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1422},{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":112167,"byte_end":112181,"line_start":3159,"line_end":3159,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1426}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":112529,"byte_end":112543,"line_start":3169,"line_end":3169,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1428}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":112813,"byte_end":112820,"line_start":3181,"line_end":3181,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":115108,"byte_end":115109,"line_start":3236,"line_end":3236,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":115547,"byte_end":115552,"line_start":3255,"line_end":3255,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1438}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":115825,"byte_end":115830,"line_start":3264,"line_end":3264,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1440}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":294,"byte_end":298,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":455}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":117525,"byte_end":117532,"line_start":28,"line_end":28,"column_start":15,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":126},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":117607,"byte_end":117614,"line_start":34,"line_end":34,"column_start":21,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":126},"to":{"krate":2,"index":9401}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":117762,"byte_end":117769,"line_start":40,"line_end":40,"column_start":6,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":123908,"byte_end":123919,"line_start":234,"line_end":234,"column_start":61,"column_end":72},"kind":{"Impl":{"id":3}},"from":{"krate":23,"index":670},"to":{"krate":0,"index":961}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":126465,"byte_end":126475,"line_start":309,"line_end":309,"column_start":56,"column_end":66},"kind":{"Impl":{"id":4}},"from":{"krate":23,"index":1084},"to":{"krate":0,"index":974}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":131152,"byte_end":131162,"line_start":448,"line_end":448,"column_start":60,"column_end":70},"kind":{"Impl":{"id":5}},"from":{"krate":23,"index":1084},"to":{"krate":0,"index":989}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":133623,"byte_end":133642,"line_start":519,"line_end":519,"column_start":56,"column_end":75},"kind":{"Impl":{"id":6}},"from":{"krate":23,"index":4491},"to":{"krate":0,"index":974}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":139955,"byte_end":139962,"line_start":730,"line_end":730,"column_start":25,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":126},"to":{"krate":0,"index":1004}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":190269,"byte_end":190281,"line_start":2175,"line_end":2175,"column_start":6,"column_end":18},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":190538,"byte_end":190550,"line_start":2187,"line_end":2187,"column_start":21,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":382},"to":{"krate":2,"index":9401}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":190920,"byte_end":190937,"line_start":2204,"line_end":2204,"column_start":22,"column_end":39},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":3016}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":190962,"byte_end":190979,"line_start":2205,"line_end":2205,"column_start":22,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":3028}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":191023,"byte_end":191040,"line_start":2207,"line_end":2207,"column_start":40,"column_end":57},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1484},"to":{"krate":0,"index":1276}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\direct.rs","byte_start":191275,"byte_end":191292,"line_start":2217,"line_end":2217,"column_start":15,"column_end":32},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\native_gpu_future.rs","byte_start":192043,"byte_end":192052,"line_start":27,"line_end":27,"column_start":20,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":437},"to":{"krate":2,"index":12715}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\backend\\native_gpu_future.rs","byte_start":192518,"byte_end":192537,"line_start":43,"line_end":43,"column_start":9,"column_end":28},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":441},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":197486,"byte_end":197490,"line_start":14,"line_end":14,"column_start":41,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":502},"to":{"krate":2,"index":12715}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\belt.rs","byte_start":199351,"byte_end":199362,"line_start":70,"line_end":70,"column_start":6,"column_end":17},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\device.rs","byte_start":204783,"byte_end":204789,"line_start":40,"line_end":40,"column_start":27,"column_end":33},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1524},"to":{"krate":0,"index":535}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":214698,"byte_end":214708,"line_start":123,"line_end":123,"column_start":32,"column_end":42},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1632},"to":{"krate":0,"index":574}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\encoder.rs","byte_start":216389,"byte_end":216408,"line_start":174,"line_end":174,"column_start":32,"column_end":51},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1646},"to":{"krate":0,"index":574}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":195614,"byte_end":195628,"line_start":73,"line_end":73,"column_start":6,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":670},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\util\\mod.rs","byte_start":196962,"byte_end":196976,"line_start":108,"line_end":108,"column_start":26,"column_end":40},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":670},"to":{"krate":2,"index":3227}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":4732,"byte_end":4743,"line_start":130,"line_end":130,"column_start":38,"column_end":49},"kind":"SuperTrait","from":{"krate":0,"index":974},"to":{"krate":0,"index":989}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":5620,"byte_end":5625,"line_start":155,"line_end":155,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":9401},"to":{"krate":0,"index":1004}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":5628,"byte_end":5632,"line_start":155,"line_end":155,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":1004}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":5635,"byte_end":5640,"line_start":155,"line_end":155,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":3021},"to":{"krate":0,"index":1004}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":5643,"byte_end":5647,"line_start":155,"line_end":155,"column_start":39,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":3028},"to":{"krate":0,"index":1004}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":17988,"byte_end":17995,"line_start":513,"line_end":513,"column_start":15,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1519},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":19047,"byte_end":19057,"line_start":552,"line_end":552,"column_start":6,"column_end":16},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1545},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":21956,"byte_end":21963,"line_start":657,"line_end":657,"column_start":15,"column_end":22},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1582},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":22447,"byte_end":22454,"line_start":675,"line_end":675,"column_start":15,"column_end":22},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1587},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":23137,"byte_end":23152,"line_start":695,"line_end":695,"column_start":15,"column_end":30},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":23773,"byte_end":23782,"line_start":715,"line_end":715,"column_start":15,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1597},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":24317,"byte_end":24329,"line_start":734,"line_end":734,"column_start":15,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1602},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":25899,"byte_end":25913,"line_start":784,"line_end":784,"column_start":15,"column_end":29},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1607},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":26421,"byte_end":26435,"line_start":802,"line_end":802,"column_start":15,"column_end":29},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":26578,"byte_end":26592,"line_start":810,"line_end":810,"column_start":6,"column_end":20},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1612},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":27313,"byte_end":27328,"line_start":833,"line_end":833,"column_start":15,"column_end":30},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1617},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":27472,"byte_end":27487,"line_start":841,"line_end":841,"column_start":6,"column_end":21},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1617},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":28322,"byte_end":28335,"line_start":865,"line_end":865,"column_start":15,"column_end":28},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1622},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":29008,"byte_end":29022,"line_start":888,"line_end":888,"column_start":15,"column_end":29},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1627},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":30688,"byte_end":30700,"line_start":940,"line_end":940,"column_start":15,"column_end":27},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1655},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":30959,"byte_end":30967,"line_start":954,"line_end":954,"column_start":15,"column_end":23},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1165},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":33986,"byte_end":33992,"line_start":1034,"line_end":1034,"column_start":30,"column_end":36},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1699},"to":{"krate":2,"index":2994}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":34533,"byte_end":34543,"line_start":1051,"line_end":1051,"column_start":30,"column_end":40},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1729},"to":{"krate":2,"index":2994}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":40270,"byte_end":40287,"line_start":1175,"line_end":1175,"column_start":18,"column_end":35},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1817},"to":{"krate":2,"index":2994}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48119,"byte_end":48131,"line_start":1364,"line_end":1364,"column_start":18,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2016},"to":{"krate":2,"index":9408}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48671,"byte_end":48683,"line_start":1375,"line_end":1375,"column_start":23,"column_end":35},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2016},"to":{"krate":1,"index":2341}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":48693,"byte_end":48701,"line_start":1377,"line_end":1377,"column_start":6,"column_end":14},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1515},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":53703,"byte_end":53710,"line_start":1529,"line_end":1529,"column_start":6,"column_end":13},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1519},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":57964,"byte_end":57970,"line_start":1639,"line_end":1639,"column_start":6,"column_end":12},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":65758,"byte_end":65764,"line_start":1862,"line_end":1862,"column_start":15,"column_end":21},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1524},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66013,"byte_end":66031,"line_start":1874,"line_end":1874,"column_start":18,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2035},"to":{"krate":2,"index":9408}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66186,"byte_end":66204,"line_start":1880,"line_end":1880,"column_start":23,"column_end":41},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2035},"to":{"krate":1,"index":2341}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66349,"byte_end":66365,"line_start":1886,"line_end":1886,"column_start":18,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2047},"to":{"krate":2,"index":9408}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":66542,"byte_end":66558,"line_start":1892,"line_end":1892,"column_start":23,"column_end":39},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2047},"to":{"krate":1,"index":2341}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":68604,"byte_end":68614,"line_start":1968,"line_end":1968,"column_start":26,"column_end":36},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2072},"to":{"krate":2,"index":3227}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":68737,"byte_end":68750,"line_start":1976,"line_end":1976,"column_start":26,"column_end":39},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2079},"to":{"krate":2,"index":3227}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":69035,"byte_end":69048,"line_start":1989,"line_end":1989,"column_start":29,"column_end":42},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2079},"to":{"krate":2,"index":3240}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":69166,"byte_end":69176,"line_start":1995,"line_end":1995,"column_start":22,"column_end":32},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2072},"to":{"krate":2,"index":2913}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":69271,"byte_end":69284,"line_start":2001,"line_end":2001,"column_start":22,"column_end":35},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2079},"to":{"krate":2,"index":2916}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":69384,"byte_end":69394,"line_start":2007,"line_end":2007,"column_start":15,"column_end":25},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2072},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":69590,"byte_end":69603,"line_start":2017,"line_end":2017,"column_start":15,"column_end":28},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2079},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":69790,"byte_end":69796,"line_start":2027,"line_end":2027,"column_start":6,"column_end":12},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1551},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":71042,"byte_end":71053,"line_start":2065,"line_end":2065,"column_start":10,"column_end":21},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":73509,"byte_end":73515,"line_start":2130,"line_end":2130,"column_start":15,"column_end":21},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1551},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":73649,"byte_end":73656,"line_start":2138,"line_end":2138,"column_start":6,"column_end":13},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":74966,"byte_end":74973,"line_start":2178,"line_end":2178,"column_start":15,"column_end":22},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1571},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":75131,"byte_end":75142,"line_start":2186,"line_end":2186,"column_start":15,"column_end":26},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1577},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":75282,"byte_end":75296,"line_start":2194,"line_end":2194,"column_start":6,"column_end":20},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":81090,"byte_end":81104,"line_start":2383,"line_end":2383,"column_start":6,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":81931,"byte_end":81945,"line_start":2402,"line_end":2402,"column_start":6,"column_end":20},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":82657,"byte_end":82667,"line_start":2425,"line_end":2425,"column_start":10,"column_end":20},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":89466,"byte_end":89476,"line_start":2595,"line_end":2595,"column_start":10,"column_end":20},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":91941,"byte_end":91951,"line_start":2656,"line_end":2656,"column_start":10,"column_end":20},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":95724,"byte_end":95734,"line_start":2755,"line_end":2755,"column_start":10,"column_end":20},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":97209,"byte_end":97219,"line_start":2790,"line_end":2790,"column_start":10,"column_end":20},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":97902,"byte_end":97912,"line_start":2804,"line_end":2804,"column_start":10,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":98590,"byte_end":98600,"line_start":2819,"line_end":2819,"column_start":19,"column_end":29},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":98880,"byte_end":98891,"line_start":2830,"line_end":2830,"column_start":10,"column_end":21},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":101261,"byte_end":101272,"line_start":2896,"line_end":2896,"column_start":10,"column_end":21},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":101871,"byte_end":101882,"line_start":2910,"line_end":2910,"column_start":10,"column_end":21},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":102557,"byte_end":102568,"line_start":2923,"line_end":2923,"column_start":10,"column_end":21},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":103246,"byte_end":103257,"line_start":2938,"line_end":2938,"column_start":19,"column_end":30},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1639},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":103538,"byte_end":103557,"line_start":2949,"line_end":2949,"column_start":10,"column_end":29},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1646},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":108841,"byte_end":108860,"line_start":3075,"line_end":3075,"column_start":10,"column_end":29},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1646},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":110233,"byte_end":110238,"line_start":3109,"line_end":3109,"column_start":6,"column_end":11},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1660},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":112167,"byte_end":112181,"line_start":3159,"line_end":3159,"column_start":6,"column_end":20},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2009},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":112529,"byte_end":112543,"line_start":3169,"line_end":3169,"column_start":15,"column_end":29},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2009},"to":{"krate":2,"index":3251}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":112813,"byte_end":112820,"line_start":3181,"line_end":3181,"column_start":6,"column_end":13},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1587},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":115043,"byte_end":115045,"line_start":3235,"line_end":3235,"column_start":35,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":3254},"to":{"krate":0,"index":1434}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":115055,"byte_end":115059,"line_start":3235,"line_end":3235,"column_start":47,"column_end":51},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":1434}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":115108,"byte_end":115109,"line_start":3236,"line_end":3236,"column_start":36,"column_end":37},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1436},"to":{"krate":0,"index":1434}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":115547,"byte_end":115552,"line_start":3255,"line_end":3255,"column_start":23,"column_end":28},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2087},"to":{"krate":1,"index":2341}},{"span":{"file_name":"C:\\Users\\Ethan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.11.1\\src\\lib.rs","byte_start":115825,"byte_end":115830,"line_start":3264,"line_end":3264,"column_start":18,"column_end":23},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2087},"to":{"krate":2,"index":9408}}]}